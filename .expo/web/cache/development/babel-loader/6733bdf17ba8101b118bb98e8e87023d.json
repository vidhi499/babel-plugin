{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar clipboardAvailable;\nvar Clipboard = function () {\n  function Clipboard() {\n    _classCallCheck(this, Clipboard);\n  }\n  _createClass(Clipboard, null, [{\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      if (clipboardAvailable === undefined) {\n        clipboardAvailable = typeof document.queryCommandSupported === 'function' && document.queryCommandSupported('copy');\n      }\n      return clipboardAvailable;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString() {\n      return Promise.resolve('');\n    }\n  }, {\n    key: \"setString\",\n    value: function setString(text) {\n      var success = false;\n      var body = document.body;\n      if (body) {\n        var node = document.createElement('span');\n        node.textContent = text;\n        node.style.opacity = '0';\n        node.style.position = 'absolute';\n        node.style.whiteSpace = 'pre-wrap';\n        node.style.userSelect = 'auto';\n        body.appendChild(node);\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        var range = document.createRange();\n        range.selectNodeContents(node);\n        selection.addRange(range);\n        try {\n          document.execCommand('copy');\n          success = true;\n        } catch (e) {}\n        selection.removeAllRanges();\n        body.removeChild(node);\n      }\n      return success;\n    }\n  }]);\n  return Clipboard;\n}();\nexport { Clipboard as default };","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/Clipboard/index.js"],"names":["clipboardAvailable","Clipboard","undefined","document","queryCommandSupported","Promise","resolve","text","success","body","node","createElement","textContent","style","opacity","position","whiteSpace","userSelect","appendChild","selection","window","getSelection","removeAllRanges","range","createRange","selectNodeContents","addRange","execCommand","e","removeChild"],"mappings":";;AASA,IAAIA,kBAAJ;AACqBC,IAAAA,S;;;;;;WACnB,SAAA,WAAA,GAAqB;MACnB,IAAID,kBAAkB,KAAKE,SAA3B,EAAsC;QACpCF,kBAAkB,GAAG,OAAOG,QAAQ,CAACC,qBAAhB,KAA0C,UAA1C,IAAwDD,QAAQ,CAACC,qBAATD,CAA+B,MAA/BA,CAA7EH;MACD;MAED,OAAOA,kBAAP;IACD;;;WAED,SAAA,SAAA,GAAmB;MACjB,OAAOK,OAAO,CAACC,OAARD,CAAgB,EAAhBA,CAAP;IACD;;;WAED,SAAA,SAAA,CAAiBE,IAAjB,EAAuB;MACrB,IAAIC,OAAO,GAAG,KAAd;MACA,IAAIC,IAAI,GAAGN,QAAQ,CAACM,IAApB;MAEA,IAAIA,IAAJ,EAAU;QAER,IAAIC,IAAI,GAAGP,QAAQ,CAACQ,aAATR,CAAuB,MAAvBA,CAAX;QACAO,IAAI,CAACE,WAALF,GAAmBH,IAAnBG;QACAA,IAAI,CAACG,KAALH,CAAWI,OAAXJ,GAAqB,GAArBA;QACAA,IAAI,CAACG,KAALH,CAAWK,QAAXL,GAAsB,UAAtBA;QACAA,IAAI,CAACG,KAALH,CAAWM,UAAXN,GAAwB,UAAxBA;QACAA,IAAI,CAACG,KAALH,CAAWO,UAAXP,GAAwB,MAAxBA;QACAD,IAAI,CAACS,WAALT,CAAiBC,IAAjBD,CAAAA;QAEA,IAAIU,SAAS,GAAGC,MAAM,CAACC,YAAPD,EAAhB;QACAD,SAAS,CAACG,eAAVH,EAAAA;QACA,IAAII,KAAK,GAAGpB,QAAQ,CAACqB,WAATrB,EAAZ;QACAoB,KAAK,CAACE,kBAANF,CAAyBb,IAAzBa,CAAAA;QACAJ,SAAS,CAACO,QAAVP,CAAmBI,KAAnBJ,CAAAA;QAEA,IAAI;UACFhB,QAAQ,CAACwB,WAATxB,CAAqB,MAArBA,CAAAA;UACAK,OAAO,GAAG,IAAVA;QACD,CAAC,QAAOoB,CAAP,EAAU,CAAE;QAGdT,SAAS,CAACG,eAAVH,EAAAA;QACAV,IAAI,CAACoB,WAALpB,CAAiBC,IAAjBD,CAAAA;MACD;MAED,OAAOD,OAAP;IACD;;;;SA5CkBP,S","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar clipboardAvailable;\nexport default class Clipboard {\n  static isAvailable() {\n    if (clipboardAvailable === undefined) {\n      clipboardAvailable = typeof document.queryCommandSupported === 'function' && document.queryCommandSupported('copy');\n    }\n\n    return clipboardAvailable;\n  }\n\n  static getString() {\n    return Promise.resolve('');\n  }\n\n  static setString(text) {\n    var success = false;\n    var body = document.body;\n\n    if (body) {\n      // add the text to a hidden node\n      var node = document.createElement('span');\n      node.textContent = text;\n      node.style.opacity = '0';\n      node.style.position = 'absolute';\n      node.style.whiteSpace = 'pre-wrap';\n      node.style.userSelect = 'auto';\n      body.appendChild(node); // select the text\n\n      var selection = window.getSelection();\n      selection.removeAllRanges();\n      var range = document.createRange();\n      range.selectNodeContents(node);\n      selection.addRange(range); // attempt to copy\n\n      try {\n        document.execCommand('copy');\n        success = true;\n      } catch (e) {} // remove selection and node\n\n\n      selection.removeAllRanges();\n      body.removeChild(node);\n    }\n\n    return success;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}