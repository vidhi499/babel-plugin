{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar $4hxXn$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n$parcel$export(module.exports, \"SSRProvider\", function () {\n  return $29383e587d62412a$export$9f8ac96af4b1b2ae;\n});\n$parcel$export(module.exports, \"useSSRSafeId\", function () {\n  return $29383e587d62412a$export$619500959fc48b26;\n});\n$parcel$export(module.exports, \"useIsSSR\", function () {\n  return $29383e587d62412a$export$535bd6ca7f90a273;\n});\nvar $29383e587d62412a$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\nvar $29383e587d62412a$var$SSRContext = (0, $parcel$interopDefault($4hxXn$react)).createContext($29383e587d62412a$var$defaultContext);\nfunction $29383e587d62412a$export$9f8ac96af4b1b2ae(props) {\n  var cur = (0, $4hxXn$react.useContext)($29383e587d62412a$var$SSRContext);\n  var value = (0, $4hxXn$react.useMemo)(function () {\n    return {\n      prefix: cur === $29383e587d62412a$var$defaultContext ? \"\" : cur.prefix + \"-\" + ++cur.current,\n      current: 0\n    };\n  }, [cur]);\n  return (0, $parcel$interopDefault($4hxXn$react)).createElement($29383e587d62412a$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\nvar $29383e587d62412a$var$canUseDOM = Boolean(typeof window !== \"undefined\" && window.document && window.document.createElement);\nfunction $29383e587d62412a$export$619500959fc48b26(defaultId) {\n  var ctx = (0, $4hxXn$react.useContext)($29383e587d62412a$var$SSRContext);\n  if (ctx === $29383e587d62412a$var$defaultContext && !$29383e587d62412a$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n  return (0, $4hxXn$react.useMemo)(function () {\n    return defaultId || \"react-aria\" + ctx.prefix + \"-\" + ++ctx.current;\n  }, [defaultId]);\n}\nfunction $29383e587d62412a$export$535bd6ca7f90a273() {\n  var cur = (0, $4hxXn$react.useContext)($29383e587d62412a$var$SSRContext);\n  var isInSSRContext = cur !== $29383e587d62412a$var$defaultContext;\n  var _ref = (0, $4hxXn$react.useState)(isInSSRContext),\n    _ref2 = _slicedToArray(_ref, 2),\n    isSSR = _ref2[0],\n    setIsSSR = _ref2[1];\n  if (typeof window !== \"undefined\" && isInSSRContext) (0, $4hxXn$react.useLayoutEffect)(function () {\n      setIsSSR(false);\n    }, []);\n  return isSSR;\n}","map":{"version":3,"sources":["packages/@react-aria/ssr/src/SSRProvider.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAM,oCAAA,GAAkC;EACtC,MAAA,EAAQ,MAAA,CAAO,IAAA,CAAK,KAAK,CAAC,IAAA,CAAK,MAAM,EAAA,GAAK,WAAA,CAAA,CAAA;EAC1C,OAAA,EAAS;AACX,CAAA;AAEA,IAAM,gCAAA,GAAa,CAAA,CAAA,EAAA,sBAAA,CAAA,YAAA,CAAK,EAAC,aAAa,CAAkB,oCAAA,CAAA;AAWjD,SAAS,yCAAA,CAAY,KAAuB,EAAe;EAChE,IAAI,GAAA,GAAM,CAAA,CAAA,EAAA,YAAA,CAAA,UAAS,EAAE,gCAAA,CAAA;EACrB,IAAI,KAAA,GAAyB,CAAA,CAAA,EAAA,YAAA,CAAA,OAAO,EAAC;IAAA,OAAO;MAG1C,MAAA,EAAQ,GAAA,KAAQ,oCAAA,GAAiB,EAAA,GAAQ,GAAA,CAAI,MAAM,SAAI,EAAE,GAAA,CAAI,OAAS;MACtE,OAAA,EAAS;IACX,CAAA;EAAA,CAAA,EAAI,CAAC,GAAA,CAAI,CAAA;EAET,OACE,CAAA,CAAA,EAAA,sBAAA,CAAA,YAAA,CAAA,EAAA,aAAA,CAAC,gCAAA,CAAW,QAAQ,EAAA;IAAC,KAAA,EAAO;KACzB,KAAA,CAAM,QAAQ,CAAA;AAGrB;AAEA,IAAI,+BAAA,GAAY,OAAA,CACd,OAAO,MAAA,KAAW,WAAA,IAClB,MAAA,CAAO,QAAQ,IACf,MAAA,CAAO,QAAQ,CAAC,aAAa,CAAA;AAIxB,SAAS,yCAAA,CAAa,SAAkB,EAAU;EACvD,IAAI,GAAA,GAAM,CAAA,CAAA,EAAA,YAAA,CAAA,UAAS,EAAE,gCAAA,CAAA;EAIrB,IAAI,GAAA,KAAQ,oCAAA,IAAkB,CAAC,+BAAA,EAC7B,OAAA,CAAQ,IAAI,CAAC,iJAAA,CAAA;EAIf,OAAO,CAAA,CAAA,EAAA,YAAA,CAAA,OAAM,EAAE;IAAA,OAAM,SAAA,mBAA0B,GAAA,CAAI,MAAM,SAAI,EAAE,GAAA,CAAI,OAAS;EAAA,GAAE,CAAC,SAAA,CAAU,CAAA;AAC3F;AAOO,SAAS,yCAAA,GAAoB;EAClC,IAAI,GAAA,GAAM,CAAA,CAAA,EAAA,YAAA,CAAA,UAAS,EAAE,gCAAA,CAAA;EACrB,IAAI,cAAA,GAAiB,GAAA,KAAQ,oCAAA;EAC7B,WAAwB,CAAA,CAAA,EAAA,YAAA,CAAA,QAAQ,EAAC,cAAA,CAAA;IAAA;IAA5B,KAAA;IAAO,QAAA;EAIZ,IAAI,OAAO,MAAA,KAAW,WAAA,IAAe,cAAA,EAInC,CAAA,CAAA,EAAA,YAAA,CAAA,eAAe,EAAC,YAAM;MACpB,QAAA,CAAS,KAAK,CAAA;IAChB,CAAA,EAAG,EAAE,CAAA;EAGP,OAAO,KAAA;AACT","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\nexport interface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  let isInSSRContext = cur !== defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"]},"metadata":{},"sourceType":"script"}