{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _get = require(\"@babel/runtime/helpers/get\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _AnimatedValue = _interopRequireDefault(require(\"../nodes/AnimatedValue\"));\nvar _AnimatedValueXY = _interopRequireDefault(require(\"../nodes/AnimatedValueXY\"));\nvar _AnimatedInterpolation = _interopRequireDefault(require(\"../nodes/AnimatedInterpolation\"));\nvar _Animation = _interopRequireDefault(require(\"./Animation\"));\nvar _SpringConfig = _interopRequireDefault(require(\"../SpringConfig\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _NativeAnimatedHelper = require(\"../NativeAnimatedHelper\");\nvar SpringAnimation = function (_Animation$default) {\n  _inherits(SpringAnimation, _Animation$default);\n  var _super = _createSuper(SpringAnimation);\n  function SpringAnimation(config) {\n    var _this;\n    _classCallCheck(this, SpringAnimation);\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n    _this = _super.call(this);\n    _this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    _this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    _this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    _this._toValue = config.toValue;\n    _this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    _this._useNativeDriver = (0, _NativeAnimatedHelper.shouldUseNativeDriver)(config);\n    _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver;\n    _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n      (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, \"You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one\");\n      _this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      _this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      _this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n      (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, \"You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one\");\n      var springConfig = _SpringConfig.default.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n      _this._stiffness = springConfig.stiffness;\n      _this._damping = springConfig.damping;\n      _this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n      var _springConfig = _SpringConfig.default.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n      _this._stiffness = _springConfig.stiffness;\n      _this._damping = _springConfig.damping;\n      _this._mass = 1;\n    }\n    (0, _invariant.default)(_this._stiffness > 0, \"Stiffness value must be greater than 0\");\n    (0, _invariant.default)(_this._damping > 0, \"Damping value must be greater than 0\");\n    (0, _invariant.default)(_this._mass > 0, \"Mass value must be greater than 0\");\n    return _this;\n  }\n  _createClass(SpringAnimation, [{\n    key: \"__getNativeAnimationConfig\",\n    value: function __getNativeAnimationConfig() {\n      var _this$_initialVelocit;\n      return {\n        type: \"spring\",\n        overshootClamping: this._overshootClamping,\n        restDisplacementThreshold: this._restDisplacementThreshold,\n        restSpeedThreshold: this._restSpeedThreshold,\n        stiffness: this._stiffness,\n        damping: this._damping,\n        mass: this._mass,\n        initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n        toValue: this._toValue,\n        iterations: this.__iterations\n      };\n    }\n  }, {\n    key: \"start\",\n    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n      var _this2 = this;\n      this.__active = true;\n      this._startPosition = fromValue;\n      this._lastPosition = this._startPosition;\n      this._onUpdate = onUpdate;\n      this.__onEnd = onEnd;\n      this._lastTime = Date.now();\n      this._frameTime = 0.0;\n      if (previousAnimation instanceof SpringAnimation) {\n        var internalState = previousAnimation.getInternalState();\n        this._lastPosition = internalState.lastPosition;\n        this._lastVelocity = internalState.lastVelocity;\n        this._initialVelocity = this._lastVelocity;\n        this._lastTime = internalState.lastTime;\n      }\n      var start = function start() {\n        if (_this2._useNativeDriver) {\n          _this2.__startNativeAnimation(animatedValue);\n        } else {\n          _this2.onUpdate();\n        }\n      };\n      if (this._delay) {\n        this._timeout = setTimeout(start, this._delay);\n      } else {\n        start();\n      }\n    }\n  }, {\n    key: \"getInternalState\",\n    value: function getInternalState() {\n      return {\n        lastPosition: this._lastPosition,\n        lastVelocity: this._lastVelocity,\n        lastTime: this._lastTime\n      };\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate() {\n      var MAX_STEPS = 64;\n      var now = Date.now();\n      if (now > this._lastTime + MAX_STEPS) {\n        now = this._lastTime + MAX_STEPS;\n      }\n      var deltaTime = (now - this._lastTime) / 1000;\n      this._frameTime += deltaTime;\n      var c = this._damping;\n      var m = this._mass;\n      var k = this._stiffness;\n      var v0 = -this._initialVelocity;\n      var zeta = c / (2 * Math.sqrt(k * m));\n      var omega0 = Math.sqrt(k / m);\n      var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);\n      var x0 = this._toValue - this._startPosition;\n      var position = 0.0;\n      var velocity = 0.0;\n      var t = this._frameTime;\n      if (zeta < 1) {\n        var envelope = Math.exp(-zeta * omega0 * t);\n        position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));\n        velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n      } else {\n        var _envelope = Math.exp(-omega0 * t);\n        position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n        velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n      }\n      this._lastTime = now;\n      this._lastPosition = position;\n      this._lastVelocity = velocity;\n      this._onUpdate(position);\n      if (!this.__active) {\n        return;\n      }\n      var isOvershooting = false;\n      if (this._overshootClamping && this._stiffness !== 0) {\n        if (this._startPosition < this._toValue) {\n          isOvershooting = position > this._toValue;\n        } else {\n          isOvershooting = position < this._toValue;\n        }\n      }\n      var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n      var isDisplacement = true;\n      if (this._stiffness !== 0) {\n        isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n      }\n      if (isOvershooting || isVelocity && isDisplacement) {\n        if (this._stiffness !== 0) {\n          this._lastPosition = this._toValue;\n          this._lastVelocity = 0;\n          this._onUpdate(this._toValue);\n        }\n        this.__debouncedOnEnd({\n          finished: true\n        });\n        return;\n      }\n      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      _get(_getPrototypeOf(SpringAnimation.prototype), \"stop\", this).call(this);\n      this.__active = false;\n      clearTimeout(this._timeout);\n      global.cancelAnimationFrame(this._animationFrame);\n      this.__debouncedOnEnd({\n        finished: false\n      });\n    }\n  }]);\n  return SpringAnimation;\n}(_Animation.default);\nvar _default = SpringAnimation;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/vendor/react-native/Animated/animations/SpringAnimation.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","_AnimatedValue","_AnimatedValueXY","_AnimatedInterpolation","_Animation","_SpringConfig","_invariant","_NativeAnimatedHelper","SpringAnimation","constructor","config","_config$overshootClam","_config$restDisplacem","_config$restSpeedThre","_config$velocity","_config$velocity2","_config$delay","_config$isInteraction","_config$iterations","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","shouldUseNativeDriver","__isInteraction","isInteraction","__iterations","iterations","stiffness","undefined","damping","mass","_config$stiffness","_config$damping","_config$mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","_config$bounciness","_config$speed","springConfig","fromBouncinessAndSpeed","_config$tension","_config$friction","_springConfig","fromOrigamiTensionAndFriction","__getNativeAnimationConfig","_this$_initialVelocit","type","initialVelocity","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","__startNativeAnimation","_timeout","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","_envelope","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","stop","clearTimeout","global","cancelAnimationFrame","_default","module"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _AnimatedValue = _interopRequireDefault(require(\"../nodes/AnimatedValue\"));\n\nvar _AnimatedValueXY = _interopRequireDefault(require(\"../nodes/AnimatedValueXY\"));\n\nvar _AnimatedInterpolation = _interopRequireDefault(require(\"../nodes/AnimatedInterpolation\"));\n\nvar _Animation = _interopRequireDefault(require(\"./Animation\"));\n\nvar _SpringConfig = _interopRequireDefault(require(\"../SpringConfig\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _NativeAnimatedHelper = require(\"../NativeAnimatedHelper\");\n\nclass SpringAnimation extends _Animation.default {\n  constructor(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n\n    super();\n    this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : false;\n    this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 0.001;\n    this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 0.001;\n    this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0;\n    this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0;\n    this._toValue = config.toValue;\n    this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    this._useNativeDriver = (0, _NativeAnimatedHelper.shouldUseNativeDriver)(config);\n    this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !this._useNativeDriver;\n    this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n\n      (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100;\n      this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10;\n      this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n\n      var springConfig = _SpringConfig.default.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);\n\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      var _springConfig = _SpringConfig.default.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);\n\n      this._stiffness = _springConfig.stiffness;\n      this._damping = _springConfig.damping;\n      this._mass = 1;\n    }\n\n    (0, _invariant.default)(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    (0, _invariant.default)(this._damping > 0, 'Damping value must be greater than 0');\n    (0, _invariant.default)(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig() {\n    var _this$_initialVelocit;\n\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  }\n\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity; // Set the initial velocity to the last velocity\n\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    var start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    }; //  If this._delay is more than 0, we start after the timeout.\n\n\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n\n\n  onUpdate() {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    var MAX_STEPS = 64;\n    var now = Date.now();\n\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n\n    var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n\n    var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n\n    if (zeta < 1) {\n      // Under damped\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t)); // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      var _envelope = Math.exp(-omega0 * t);\n\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    } // Conditions for stopping the spring animation\n\n\n    var isOvershooting = false;\n\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n\n    var isDisplacement = true;\n\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({\n        finished: true\n      });\n\n      return;\n    }\n\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop() {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  }\n\n}\n\nvar _default = SpringAnimation;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}