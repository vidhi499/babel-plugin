{"ast":null,"code":"import createEventHandle from \"../createEventHandle\";\nimport useLayoutEffect from \"../useLayoutEffect\";\nimport useStable from \"../useStable\";\nexport default function useEvent(event, options) {\n  var targetListeners = useStable(function () {\n    return new Map();\n  });\n  var addListener = useStable(function () {\n    var addEventListener = createEventHandle(event, options);\n    return function (target, callback) {\n      var removeTargetListener = targetListeners.get(target);\n      if (removeTargetListener != null) {\n        removeTargetListener();\n      }\n      if (callback == null) {\n        targetListeners.delete(target);\n      }\n      var removeEventListener = addEventListener(target, callback);\n      targetListeners.set(target, removeEventListener);\n      return removeEventListener;\n    };\n  });\n  useLayoutEffect(function () {\n    return function () {\n      targetListeners.forEach(function (removeListener) {\n        removeListener();\n      });\n      targetListeners.clear();\n    };\n  }, [targetListeners]);\n  return addListener;\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/useEvent/index.js"],"names":["createEventHandle","useLayoutEffect","useStable","useEvent","event","options","targetListeners","Map","addListener","addEventListener","target","callback","removeTargetListener","get","delete","removeEventListener","set","forEach","removeListener","clear"],"mappings":"AAQA,OAAOA,iBAAAA;AACP,OAAOC,eAAAA;AACP,OAAOC,SAAAA;AAWP,eAAe,SAASC,QAAAA,CAASC,KAAK,EAAEC,OAAO,EAAE;EAC/C,IAAIC,eAAAA,GAAkBJ,SAAAA,CAAU;IAAA,OAAM,IAAIK,GAAAA,EAAAA;EAAAA,EAAAA;EAC1C,IAAIC,WAAAA,GAAcN,SAAAA,CAAU,YAAM;IAChC,IAAIO,gBAAAA,GAAmBT,iBAAAA,CAAkBI,KAAAA,EAAOC,OAAAA,CAAAA;IAChD,OAAO,UAACK,MAAAA,EAAQC,QAAAA,EAAa;MAC3B,IAAIC,oBAAAA,GAAuBN,eAAAA,CAAgBO,GAAG,CAACH,MAAAA,CAAAA;MAE/C,IAAIE,oBAAAA,IAAwB,IAAI,EAAE;QAChCA,oBAAAA,EAAAA;MACF;MAEA,IAAID,QAAAA,IAAY,IAAI,EAAE;QACpBL,eAAAA,CAAgBQ,MAAM,CAACJ,MAAAA,CAAAA;MACzB;MAEA,IAAIK,mBAAAA,GAAsBN,gBAAAA,CAAiBC,MAAAA,EAAQC,QAAAA,CAAAA;MACnDL,eAAAA,CAAgBU,GAAG,CAACN,MAAAA,EAAQK,mBAAAA,CAAAA;MAC5B,OAAOA,mBAAAA;IACT,CAAA;EACF,CAAA,CAAA;EACAd,eAAAA,CAAgB,YAAM;IACpB,OAAO,YAAM;MACXK,eAAAA,CAAgBW,OAAO,CAACC,UAAAA,cAAAA,EAAkB;QACxCA,cAAAA,EAAAA;MACF,CAAA,CAAA;MACAZ,eAAAA,CAAgBa,KAAK,EAAA;IACvB,CAAA;EACF,CAAA,EAAG,CAACb,eAAAA,CAAgB,CAAA;EACpB,OAAOE,WAAAA;AACT","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport createEventHandle from '../createEventHandle';\nimport useLayoutEffect from '../useLayoutEffect';\nimport useStable from '../useStable';\n\n/**\n * This can be used with any event type include custom events.\n *\n * const click = useEvent('click', options);\n * useEffect(() => {\n *   click.setListener(target, onClick);\n *   return () => click.clear();\n * }).\n */\nexport default function useEvent(event, options) {\n  var targetListeners = useStable(() => new Map());\n  var addListener = useStable(() => {\n    var addEventListener = createEventHandle(event, options);\n    return (target, callback) => {\n      var removeTargetListener = targetListeners.get(target);\n\n      if (removeTargetListener != null) {\n        removeTargetListener();\n      }\n\n      if (callback == null) {\n        targetListeners.delete(target);\n      }\n\n      var removeEventListener = addEventListener(target, callback);\n      targetListeners.set(target, removeEventListener);\n      return removeEventListener;\n    };\n  });\n  useLayoutEffect(() => {\n    return () => {\n      targetListeners.forEach(removeListener => {\n        removeListener();\n      });\n      targetListeners.clear();\n    };\n  }, [targetListeners]);\n  return addListener;\n}"]},"metadata":{},"sourceType":"module"}