{"ast":null,"code":"'use strict';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AccessibilityUtil from \"../../modules/AccessibilityUtil\";\nimport BoundingDimensions from \"./BoundingDimensions\";\nimport findNodeHandle from \"../findNodeHandle\";\nimport normalizeColor from 'normalize-css-color';\nimport Position from \"./Position\";\nimport React from 'react';\nimport UIManager from \"../UIManager\";\nimport View from \"../View\";\nvar extractSingleTouch = function extractSingleTouch(nativeEvent) {\n  var touches = nativeEvent.touches;\n  var changedTouches = nativeEvent.changedTouches;\n  var hasTouches = touches && touches.length > 0;\n  var hasChangedTouches = changedTouches && changedTouches.length > 0;\n  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;\n};\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  ERROR: 'ERROR'\n};\nvar baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\nvar IsActive = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n});\nvar IsPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\nvar IsLongPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\nvar TouchableMixin = {\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n    this._touchableNode = findNodeHandle(this);\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressInLocation = null;\n    this.state.touchable.responderID = null;\n    this._touchableNode = null;\n  },\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n    if (isTouchWithinActive) {\n      var prevState = this.state.touchable.touchState;\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      var curState = this.state.touchable.touchState;\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  touchableHandleFocus: function touchableHandleFocus(e) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n  touchableHandleBlur: function touchableHandleBlur(e) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n      locationX: locationX,\n      locationY: locationY\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n    var newIsHighlight = this._isHighlight(nextState);\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n    var isActiveTransition = !IsActive[curState] && IsActive[nextState];\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _playTouchSound: function _playTouchSound() {\n    UIManager.playTouchSound();\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var type = e.type,\n      key = e.key;\n    if (key === 'Enter' || key === ' ') {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n      e.stopPropagation();\n      if (!(key === 'Enter' && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  },\n  withoutDefaultFocusAndBlur: {}\n};\nvar touchableHandleFocus = TouchableMixin.touchableHandleFocus,\n  touchableHandleBlur = TouchableMixin.touchableHandleBlur,\n  TouchableMixinWithoutDefaultFocusAndBlur = _objectWithoutPropertiesLoose(TouchableMixin, [\"touchableHandleFocus\", \"touchableHandleBlur\"]);\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n      hitSlop = _ref.hitSlop;\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n    if (true) {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n    var debugHitSlopStyle = {};\n    hitSlop = hitSlop || {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n    for (var key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n    var normalizedColor = normalizeColor(color);\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n    var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return React.createElement(View, {\n      pointerEvents: \"none\",\n      style: _objectSpread({\n        position: 'absolute',\n        borderColor: hexColor.slice(0, -2) + '55',\n        borderWidth: 1,\n        borderStyle: 'dashed',\n        backgroundColor: hexColor.slice(0, -2) + '0F'\n      }, debugHitSlopStyle)\n    });\n  }\n};\nexport default Touchable;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/Touchable/index.js"],"names":["_objectWithoutPropertiesLoose","_objectSpread","AccessibilityUtil","BoundingDimensions","findNodeHandle","normalizeColor","Position","React","UIManager","View","extractSingleTouch","touches","nativeEvent","changedTouches","hasTouches","length","hasChangedTouches","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","baseStatesConditions","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","_touchableNode","addEventListener","_touchableBlurListener","_isTouchableKeyboardActive","state","touchable","touchState","touchableHandleResponderTerminate","e","componentWillUnmount","removeEventListener","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","pressInLocation","responderID","touchableGetInitialState","undefined","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","currentTarget","persist","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","pageX","pageY","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","prevState","curState","touchableHandleFocus","onFocus","touchableHandleBlur","onBlur","_remeasureMetricsOnActivation","tag","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","release","getPooled","console","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","isInitialTransition","isActiveTransition","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableHandlePress","_playTouchSound","playTouchSound","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableGetPressOutDelayMS","touchableHandleKeyEvent","type","key","stopPropagation","propsToAriaRole","preventDefault","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","color","_ref","debugHitSlopStyle","normalizedColor","hexColor","toString","substr","createElement","pointerEvents","style","position","borderColor","slice","borderWidth","borderStyle","backgroundColor"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport BoundingDimensions from './BoundingDimensions';\nimport findNodeHandle from '../findNodeHandle';\nimport normalizeColor from 'normalize-css-color';\nimport Position from './Position';\nimport React from 'react';\nimport UIManager from '../UIManager';\nimport View from '../View';\n\nvar extractSingleTouch = nativeEvent => {\n  var touches = nativeEvent.touches;\n  var changedTouches = nativeEvent.changedTouches;\n  var hasTouches = touches && touches.length > 0;\n  var hasChangedTouches = changedTouches && changedTouches.length > 0;\n  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;\n};\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\n\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR'\n};\n\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\nvar baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\n\nvar IsActive = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n});\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\n\n\nvar IsPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar IsLongPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n/**\n * Inputs to the state machine.\n */\n\n\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\n\n/**\n * Mapping from States x Signals => States\n */\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n}; // ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\n\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10; // Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\n\nvar TouchableMixin = {\n  // HACK (part 1): basic support for touchable interactions using a keyboard\n  componentDidMount: function componentDidMount() {\n    this._touchableNode = findNodeHandle(this);\n\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = e => {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n\n          this._isTouchableKeyboardActive = false;\n        }\n      };\n\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout); // Clear DOM nodes\n\n    this.pressInLocation = null;\n    this.state.touchable.responderID = null;\n    this._touchableNode = null;\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  // ==== Hooks to Gesture Responder system ====\n\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget; // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      var prevState = this.state.touchable.touchState;\n\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleFocus: function touchableHandleFocus(e) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleBlur: function touchableHandleBlur(e) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && // $FlowFixMe\n    BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY); // $FlowFixMe\n\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {\n      pageX,\n      pageY,\n      locationX,\n      locationY\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n    var isActiveTransition = !IsActive[curState] && IsActive[nextState];\n\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && ( // We *are* long pressing.. // But either has no long handler\n      !hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _playTouchSound: function _playTouchSound() {\n    UIManager.playTouchSound();\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  // HACK (part 2): basic support for touchable interactions using a keyboard (including\n  // delays and longPress)\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var type = e.type,\n        key = e.key;\n\n    if (key === 'Enter' || key === ' ') {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n\n      e.stopPropagation(); // prevent the default behaviour unless the Touchable functions as a link\n      // and Enter is pressed\n\n      if (!(key === 'Enter' && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  },\n  withoutDefaultFocusAndBlur: {}\n};\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\n\nvar touchableHandleFocus = TouchableMixin.touchableHandleFocus,\n    touchableHandleBlur = TouchableMixin.touchableHandleBlur,\n    TouchableMixinWithoutDefaultFocusAndBlur = _objectWithoutPropertiesLoose(TouchableMixin, [\"touchableHandleFocus\", \"touchableHandleBlur\"]);\n\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  // Highlights all touchable targets. Toggle with Inspector.\n\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: _ref => {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n\n    var debugHitSlopStyle = {};\n    hitSlop = hitSlop || {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n\n    for (var key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n\n    var normalizedColor = normalizeColor(color);\n\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n\n    var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"none\",\n      style: _objectSpread({\n        position: 'absolute',\n        borderColor: hexColor.slice(0, -2) + '55',\n        // More opaque\n        borderWidth: 1,\n        borderStyle: 'dashed',\n        backgroundColor: hexColor.slice(0, -2) + '0F'\n      }, debugHitSlopStyle)\n    });\n  }\n};\nexport default Touchable;"]},"metadata":{},"sourceType":"module"}