{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _requestIdleCallback = _interopRequireWildcard(require(\"../../modules/requestIdleCallback\"));\nvar InteractionManager = {\n  Events: {\n    interactionStart: \"interactionStart\",\n    interactionComplete: \"interactionComplete\"\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = (0, _requestIdleCallback.default)(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        (0, _requestIdleCallback.cancelIdleCallback)(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    (0, _invariant.default)(!!handle, \"Must provide a handle to clear.\");\n  },\n  addListener: function addListener() {}\n};\nvar _default = InteractionManager;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/exports/InteractionManager/index.js"],"names":["_interopRequireWildcard","require","default","_interopRequireDefault","exports","__esModule","_invariant","_requestIdleCallback","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","then","bind","done","cancel","cancelIdleCallback","createInteractionHandle","clearInteractionHandle","addListener","_default","module"],"mappings":"AAAA,YAAA;;AAEA,IAAIA,uBAAAA,GAA0BC,OAAAA,CAAQ,+CAAA,CAAA,CAAiDC,OAAO;AAE9F,IAAIC,sBAAAA,GAAyBF,OAAAA,CAAQ,8CAAA,CAAA,CAAgDC,OAAO;AAE5FE,OAAAA,CAAQC,UAAU,GAAG,IAAI;AACzBD,OAAAA,CAAQF,OAAO,GAAG,KAAK,CAAA;AAEvB,IAAII,UAAAA,GAAaH,sBAAAA,CAAuBF,OAAAA,CAAQ,oBAAA,CAAA,CAAA;AAEhD,IAAIM,oBAAAA,GAAuBP,uBAAAA,CAAwBC,OAAAA,qCAAQ,CAAA;AAW3D,IAAIO,kBAAAA,GAAqB;EACvBC,MAAAA,EAAQ;IACNC,gBAAAA,EAAkB,kBAAA;IAClBC,mBAAAA,EAAqB;EACvB,CAAA;EAKAC,oBAAAA,gCAAqBC,IAAI,EAAE;IACzB,IAAIC,MAAAA;IACJ,IAAIC,OAAAA,GAAU,IAAIC,OAAAA,CAAQC,UAAAA,OAAAA,EAAW;MACnCH,MAAAA,GAAU,CAAA,CAAA,EAAGP,oBAAAA,CAAqBL,OAAO,EAAE,YAAM;QAC/C,IAAIW,IAAAA,EAAM;UACRI,OAAAA,CAAQJ,IAAAA,EAAAA,CAAAA;QACV,CAAA,MAAO;UACLI,OAAAA,EAAAA;QACF;MACF,CAAA,CAAA;IACF,CAAA,CAAA;IACA,OAAO;MACLC,IAAAA,EAAMH,OAAAA,CAAQG,IAAI,CAACC,IAAI,CAACJ,OAAAA,CAAAA;MACxBK,IAAAA,EAAML,OAAAA,CAAQG,IAAI,CAACC,IAAI,CAACJ,OAAAA,CAAAA;MACxBM,MAAAA,EAAQ,kBAAM;QACX,CAAA,CAAA,EAAGd,oBAAAA,CAAqBe,kBAAkB,EAAER,MAAAA,CAAAA;MAC/C;IACF,CAAA;EACF,CAAA;EAKAS,uBAAAA,qCAA0B;IACxB,OAAO,CAAA;EACT,CAAA;EAKAC,sBAAAA,kCAAuBV,MAAM,EAAE;IAC5B,CAAA,CAAA,EAAGR,UAAAA,CAAWJ,OAAO,EAAE,CAAC,CAACY,MAAAA,EAAQ,iCAAA,CAAA;EACpC,CAAA;EAEAW,WAAAA,EAAa,uBAAM,CAAC;AACtB,CAAA;AACA,IAAIC,QAAAA,GAAWlB,kBAAAA;AACfJ,OAAAA,CAAQF,OAAO,GAAGwB,QAAAA;AAClBC,MAAAA,CAAOvB,OAAO,GAAGA,OAAAA,CAAQF,OAAO","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _requestIdleCallback = _interopRequireWildcard(require(\"../../modules/requestIdleCallback\"));\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(resolve => {\n      handle = (0, _requestIdleCallback.default)(() => {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        (0, _requestIdleCallback.cancelIdleCallback)(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle) {\n    (0, _invariant.default)(!!handle, 'Must provide a handle to clear.');\n  },\n\n  addListener: () => {}\n};\nvar _default = InteractionManager;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}