{"ast":null,"code":"var CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\nvar getUnit = function getUnit(str) {\n  return str.match(CSS_UNIT_RE)[1];\n};\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\nvar multiplyStyleLengthValue = function multiplyStyleLengthValue(value, multiple) {\n  if (typeof value === 'string') {\n    var number = parseFloat(value) * multiple;\n    var unit = getUnit(value);\n    return \"\" + number + unit;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\nexport default multiplyStyleLengthValue;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/multiplyStyleLengthValue/index.js"],"names":["CSS_UNIT_RE","getUnit","str","match","isNumeric","isNaN","parseFloat","n","isFinite","multiplyStyleLengthValue","value","multiple","number","unit"],"mappings":"AAQA,IAAIA,WAAW,GAAG,6CAAlB;AAEA,IAAIC,OAAO,GAAPA,SAAAA,OAAU,CAAA,GAAG,EAAA;EAAA,OAAIC,GAAG,CAACC,KAAJD,CAAUF,WAAVE,CAAAA,CAAuB,CAAvBA,CAAJ;AAAA,CAAjB;AAEA,IAAIE,SAAS,GAATA,SAAAA,SAAY,CAAA,CAAC,EAAI;EACnB,OAAO,CAACC,KAAK,CAACC,UAAU,CAACC,CAAD,CAAX,CAAN,IAAyBC,QAAQ,CAACD,CAAD,CAAxC;AACD,CAFD;AAIA,IAAIE,wBAAwB,GAAxBA,SAAAA,wBAA2B,CAACC,KAAD,EAAQC,QAAR,EAAqB;EAClD,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC7B,IAAIE,MAAM,GAAGN,UAAU,CAACI,KAAD,CAAVJ,GAAoBK,QAAjC;IACA,IAAIE,IAAI,GAAGZ,OAAO,CAACS,KAAD,CAAlB;IACA,OAAO,EAAA,GAAKE,MAAL,GAAcC,IAArB;EACD,CAJD,MAIO,IAAIT,SAAS,CAACM,KAAD,CAAb,EAAsB;IAC3B,OAAOA,KAAK,GAAGC,QAAf;EACD;AACF,CARD;AAUA,eAAeF,wBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nvar getUnit = str => str.match(CSS_UNIT_RE)[1];\n\nvar isNumeric = n => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar multiplyStyleLengthValue = (value, multiple) => {\n  if (typeof value === 'string') {\n    var number = parseFloat(value) * multiple;\n    var unit = getUnit(value);\n    return \"\" + number + unit;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;"]},"metadata":{},"sourceType":"module"}