{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n    this._subscriptionsForType = {};\n  }\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value: function addSubscription(eventType, subscription) {\n      (0, _invariant.default)(subscription.subscriber === this, \"The subscriber of the subscription is incorrectly set.\");\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n      var key = this._subscriptionsForType[eventType].length;\n      this._subscriptionsForType[eventType].push(subscription);\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions(eventType) {\n      if (eventType == null) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value: function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n  return EventSubscriptionVendor;\n}();\nvar _default = EventSubscriptionVendor;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","_invariant","EventSubscriptionVendor","constructor","_subscriptionsForType","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType","_default","module"],"mappings":"AASA,YAAA;;AAAA;AAAA;AAEA,IAAIA,sBAAAA,GAAyBC,OAAAA,CAAQ,8CAAA,CAAA,CAAgDC,OAAO;AAE5FC,OAAAA,CAAQC,UAAU,GAAG,IAAI;AACzBD,OAAAA,CAAQD,OAAO,GAAG,KAAK,CAAA;AAEvB,IAAIG,UAAAA,GAAaL,sBAAAA,CAAuBC,OAAAA,CAAQ,oBAAA,CAAA,CAAA;AAAA,IAM1CK,uBAAAA;EACJC,mCAAc;IAAA;IACZ,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAA;EAChC;EAAA;IAAA;IAAA,OASAC,yBAAgBC,SAAS,EAAEC,YAAY,EAAE;MACtC,CAAA,CAAA,EAAGN,UAAAA,CAAWH,OAAO,EAAES,YAAAA,CAAaC,UAAU,KAAK,IAAI,EAAE,wDAAA,CAAA;MAE1D,IAAI,CAAC,IAAI,CAACJ,qBAAqB,CAACE,SAAAA,CAAU,EAAE;QAC1C,IAAI,CAACF,qBAAqB,CAACE,SAAAA,CAAU,GAAG,EAAE;MAC5C;MAEA,IAAIG,GAAAA,GAAM,IAAI,CAACL,qBAAqB,CAACE,SAAAA,CAAU,CAACI,MAAM;MAEtD,IAAI,CAACN,qBAAqB,CAACE,SAAAA,CAAU,CAACK,IAAI,CAACJ,YAAAA,CAAAA;MAE3CA,YAAAA,CAAaD,SAAS,GAAGA,SAAAA;MACzBC,YAAAA,CAAaE,GAAG,GAAGA,GAAAA;MACnB,OAAOF,YAAAA;IACT;EAAA;IAAA;IAAA,OASAK,gCAAuBN,SAAS,EAAE;MAChC,IAAIA,SAAAA,IAAa,IAAI,EAAE;QACrB,IAAI,CAACF,qBAAqB,GAAG,CAAC,CAAA;MAChC,CAAA,MAAO;QACL,OAAO,IAAI,CAACA,qBAAqB,CAACE,SAAAA,CAAU;MAC9C;IACF;EAAA;IAAA;IAAA,OASAO,4BAAmBN,YAAY,EAAE;MAC/B,IAAID,SAAAA,GAAYC,YAAAA,CAAaD,SAAS;MACtC,IAAIG,GAAAA,GAAMF,YAAAA,CAAaE,GAAG;MAC1B,IAAIK,oBAAAA,GAAuB,IAAI,CAACV,qBAAqB,CAACE,SAAAA,CAAU;MAEhE,IAAIQ,oBAAAA,EAAsB;QACxB,OAAOA,oBAAoB,CAACL,GAAAA,CAAI;MAClC;IACF;EAAA;IAAA;IAAA,OAeAM,iCAAwBT,SAAS,EAAE;MACjC,OAAO,IAAI,CAACF,qBAAqB,CAACE,SAAAA,CAAU;IAC9C;EAAA;EAAA;AAAA;AAIF,IAAIU,QAAAA,GAAWd,uBAAAA;AACfH,OAAAA,CAAQD,OAAO,GAAGkB,QAAAA;AAClBC,MAAAA,CAAOlB,OAAO,GAAGA,OAAAA,CAAQD,OAAO","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  addSubscription(eventType, subscription) {\n    (0, _invariant.default)(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  }\n\n}\n\nvar _default = EventSubscriptionVendor;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}