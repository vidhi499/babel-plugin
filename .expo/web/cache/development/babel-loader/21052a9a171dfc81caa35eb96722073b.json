{"ast":null,"code":"import createResponderEvent from \"./createResponderEvent\";\nimport { isCancelish, isEndish, isMoveish, isScroll, isSelectionChange, isStartish } from \"./ResponderEventTypes\";\nimport { getLowestCommonAncestor, getResponderPaths, hasTargetTouches, hasValidSelection, isPrimaryPointerDown, setResponderId } from \"./utils\";\nimport { ResponderTouchHistoryStore } from \"./ResponderTouchHistoryStore\";\nimport canUseDOM from \"../canUseDom\";\nvar emptyObject = {};\nvar startRegistration = [\"onStartShouldSetResponderCapture\", \"onStartShouldSetResponder\", {\n  bubbles: true\n}];\nvar moveRegistration = [\"onMoveShouldSetResponderCapture\", \"onMoveShouldSetResponder\", {\n  bubbles: true\n}];\nvar scrollRegistration = [\"onScrollShouldSetResponderCapture\", \"onScrollShouldSetResponder\", {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\nvar responderTouchHistoryStore = new ResponderTouchHistoryStore();\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n  if (eventType === \"touchstart\") {\n    isEmulatingMouseEvents = true;\n  }\n  if (eventType === \"touchmove\" || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  }\n  if (eventType === \"mousedown\" && isEmulatingMouseEvents || eventType === \"mousemove\" && isEmulatingMouseEvents || eventType === \"mousemove\" && trackedTouchCount < 1) {\n    return;\n  }\n  if (isEmulatingMouseEvents && eventType === \"mouseup\") {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n    return;\n  }\n  var isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);\n  var isMoveEvent = isMoveish(eventType);\n  var isEndEvent = isEndish(eventType);\n  var isScrollEvent = isScroll(eventType);\n  var isSelectionChangeEvent = isSelectionChange(eventType);\n  var responderEvent = createResponderEvent(domEvent, responderTouchHistoryStore);\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n    responderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n  var eventPaths = getResponderPaths(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder;\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n    if (eventPaths != null) {\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n      if (wantsResponder != null) {\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  }\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n      id = _currentResponder.id,\n      node = _currentResponder.node;\n    var _getResponderConfig = getResponderConfig(id),\n      onResponderStart = _getResponderConfig.onResponderStart,\n      onResponderMove = _getResponderConfig.onResponderMove,\n      onResponderEnd = _getResponderConfig.onResponderEnd,\n      onResponderRelease = _getResponderConfig.onResponderRelease,\n      onResponderTerminate = _getResponderConfig.onResponderTerminate,\n      onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node;\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = \"onResponderStart\";\n        onResponderStart(responderEvent);\n      }\n    } else if (isMoveEvent) {\n      if (onResponderMove != null) {\n        responderEvent.dispatchConfig.registrationName = \"onResponderMove\";\n        onResponderMove(responderEvent);\n      }\n    } else {\n      var isTerminateEvent = isCancelish(eventType) || eventType === \"contextmenu\" || eventType === \"blur\" && eventTarget === window || eventType === \"blur\" && eventTarget.contains(node) && domEvent.relatedTarget !== node || isScrollEvent && trackedTouchCount === 0 || isScrollEvent && eventTarget.contains(node) && eventTarget !== node || isSelectionChangeEvent && hasValidSelection(domEvent);\n      var isReleaseEvent = isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches);\n      if (isEndEvent) {\n        if (onResponderEnd != null) {\n          responderEvent.dispatchConfig.registrationName = \"onResponderEnd\";\n          onResponderEnd(responderEvent);\n        }\n      }\n      if (isReleaseEvent) {\n        if (onResponderRelease != null) {\n          responderEvent.dispatchConfig.registrationName = \"onResponderRelease\";\n          onResponderRelease(responderEvent);\n        }\n        changeCurrentResponder(emptyResponder);\n      }\n      if (isTerminateEvent) {\n        var shouldTerminate = true;\n        if (eventType === \"contextmenu\" || eventType === \"scroll\" || eventType === \"selectionchange\") {\n          if (wasNegotiated) {\n            shouldTerminate = false;\n          } else if (onResponderTerminationRequest != null) {\n            responderEvent.dispatchConfig.registrationName = \"onResponderTerminationRequest\";\n            if (onResponderTerminationRequest(responderEvent) === false) {\n              shouldTerminate = false;\n            }\n          }\n        }\n        if (shouldTerminate) {\n          if (onResponderTerminate != null) {\n            responderEvent.dispatchConfig.registrationName = \"onResponderTerminate\";\n            onResponderTerminate(responderEvent);\n          }\n          changeCurrentResponder(emptyResponder);\n          isEmulatingMouseEvents = false;\n          trackedTouchCount = 0;\n        }\n      }\n    }\n  }\n}\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n      nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n        if (shouldSetCallback(responderEvent) === true) {\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    };\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n      if (result != null) {\n        return result;\n      }\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    }\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n        if (_result != null) {\n          return _result;\n        }\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n    currentId = _currentResponder2.id,\n    currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n    node = wantsResponder.node;\n  var _getResponderConfig2 = getResponderConfig(id),\n    onResponderGrant = _getResponderConfig2.onResponderGrant,\n    onResponderReject = _getResponderConfig2.onResponderReject;\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node;\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = \"onResponderGrant\";\n      onResponderGrant(responderEvent);\n    }\n    changeCurrentResponder(wantsResponder);\n  } else {\n    var _getResponderConfig3 = getResponderConfig(currentId),\n      onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n      onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n    var allowTransfer = true;\n    if (onResponderTerminationRequest != null) {\n      responderEvent.currentTarget = currentNode;\n      responderEvent.dispatchConfig.registrationName = \"onResponderTerminationRequest\";\n      if (onResponderTerminationRequest(responderEvent) === false) {\n        allowTransfer = false;\n      }\n    }\n    if (allowTransfer) {\n      if (onResponderTerminate != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = \"onResponderTerminate\";\n        onResponderTerminate(responderEvent);\n      }\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = \"onResponderGrant\";\n        onResponderGrant(responderEvent);\n      }\n      changeCurrentResponder(wantsResponder);\n    } else {\n      if (onResponderReject != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = \"onResponderReject\";\n        onResponderReject(responderEvent);\n      }\n    }\n  }\n}\nvar documentEventsCapturePhase = [\"blur\", \"scroll\"];\nvar documentEventsBubblePhase = [\"mousedown\", \"mousemove\", \"mouseup\", \"dragstart\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\", \"contextmenu\", \"select\", \"selectionchange\"];\nexport function attachListeners() {\n  if (canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener(\"blur\", eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\nexport function addNode(id, node, config) {\n  setResponderId(node, id);\n  responderListenersMap.set(id, config);\n}\nexport function removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\nexport function terminateResponder() {\n  var _currentResponder3 = currentResponder,\n    id = _currentResponder3.id,\n    node = _currentResponder3.node;\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n      onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n    if (onResponderTerminate != null) {\n      var event = createResponderEvent({}, responderTouchHistoryStore);\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n    changeCurrentResponder(emptyResponder);\n  }\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\nexport function getResponderNode() {\n  return currentResponder.node;\n}\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/useResponderEvents/ResponderSystem.js"],"names":["createResponderEvent","isCancelish","isEndish","isMoveish","isScroll","isSelectionChange","isStartish","getLowestCommonAncestor","getResponderPaths","hasTargetTouches","hasValidSelection","isPrimaryPointerDown","setResponderId","ResponderTouchHistoryStore","canUseDOM","emptyObject","startRegistration","bubbles","moveRegistration","scrollRegistration","shouldSetResponderEvents","touchstart","mousedown","touchmove","mousemove","scroll","emptyResponder","id","idPath","node","responderListenersMap","Map","isEmulatingMouseEvents","trackedTouchCount","currentResponder","responderTouchHistoryStore","changeCurrentResponder","responder","getResponderConfig","config","get","eventListener","domEvent","eventType","type","eventTarget","target","isStartEvent","isMoveEvent","isEndEvent","isScrollEvent","isSelectionChangeEvent","responderEvent","touches","length","recordTouchTrack","nativeEvent","eventPaths","wasNegotiated","wantsResponder","currentResponderIdPath","eventIdPath","lowestCommonAncestor","indexOfLowestCommonAncestor","indexOf","index","slice","nodePath","findWantsResponder","attemptTransfer","_currentResponder","_getResponderConfig","onResponderStart","onResponderMove","onResponderEnd","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","currentTarget","dispatchConfig","registrationName","isTerminateEvent","window","contains","relatedTarget","isReleaseEvent","shouldTerminate","shouldSetCallbacks","shouldSetCallbackCaptureName","shouldSetCallbackBubbleName","check","callbackName","shouldSetCallback","prunedIdPath","i","result","isPropagationStopped","_i","_id","_node","_result","_id2","_node2","_currentResponder2","currentId","currentNode","_getResponderConfig2","onResponderGrant","onResponderReject","_getResponderConfig3","allowTransfer","documentEventsCapturePhase","documentEventsBubblePhase","attachListeners","__reactResponderSystemActive","addEventListener","forEach","document","addNode","set","removeNode","terminateResponder","has","delete","_currentResponder3","_getResponderConfig4","event","getResponderNode"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * RESPONDER EVENT SYSTEM\n *\n * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\n * that pointer interactions are exclusive to that view and none other. The \"interaction\n * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\n * pointers continue to be active.\n *\n * Responder being granted:\n *\n * A view can become the \"responder\" after the following events:\n *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\n *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\n *  * \"scroll\" (while a pointer is down)\n *  * \"selectionchange\" (while a pointer is down)\n *\n * If nothing is already the \"responder\", the event propagates to (capture) and from\n * (bubble) the event target until a view returns `true` for\n * `on*ShouldSetResponder(Capture)`.\n *\n * If something is already the responder, the event propagates to (capture) and from\n * (bubble) the lowest common ancestor of the event target and the current \"responder\".\n * Then negotiation happens between the current \"responder\" and a view that wants to\n * become the \"responder\": see the timing diagram below.\n *\n * (NOTE: Scrolled views either automatically become the \"responder\" or release the\n * \"interaction lock\". A native scroll view that isn't built on top of the responder\n * system must result in the current \"responder\" being notified that it no longer has\n * the \"interaction lock\" - the native system has taken over.\n *\n * Responder being released:\n *\n * As soon as there are no more active pointers that *started* inside descendants\n * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\n * current \"responder\", and the responder lock is released.\n *\n * Typical sequence of events:\n *  * startShouldSetResponder\n *  * responderGrant/Reject\n *  * responderStart\n *  * responderMove\n *  * responderEnd\n *  * responderRelease\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +--------------+          |                            |\n     | onTouchStart |          |                            |\n     +------+-------+    none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | | onResponder            | |\n            +------------------->|    TerminationRequest  | |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | | onResponderTerminate   |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\nimport createResponderEvent from './createResponderEvent';\nimport { isCancelish, isEndish, isMoveish, isScroll, isSelectionChange, isStartish } from './ResponderEventTypes';\nimport { getLowestCommonAncestor, getResponderPaths, hasTargetTouches, hasValidSelection, isPrimaryPointerDown, setResponderId } from './utils';\nimport { ResponderTouchHistoryStore } from './ResponderTouchHistoryStore';\nimport canUseDOM from '../canUseDom';\n/* ------------ TYPES ------------ */\n\nvar emptyObject = {};\n/* ------------ IMPLEMENTATION ------------ */\n\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\nvar responderTouchHistoryStore = new ResponderTouchHistoryStore();\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n/**\n * Process native events\n *\n * A single event listener is used to manage the responder system.\n * All pointers are tracked in the ResponderTouchHistoryStore. Native events\n * are interpreted in terms of the Responder System and checked to see if\n * the responder should be transferred. Each host node that is attached to\n * the Responder System has an ID, which is used to look up its associated\n * callbacks.\n */\n\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n  /**\n   * Manage emulated events and early bailout.\n   * Since PointerEvent is not used yet (lack of support in older Safari), it's\n   * necessary to manually manage the mess of browser touch/mouse events.\n   * And bailout early for termination events when there is no active responder.\n   */\n  // Flag when browser may produce emulated events\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  } // Remove flag when browser will not produce emulated events\n\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  } // Ignore various events in particular circumstances\n\n\n  if ( // Ignore browser emulated mouse events\n  eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first\n  eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  } // Remove flag after emulated events are finished\n\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);\n  var isMoveEvent = isMoveish(eventType);\n  var isEndEvent = isEndish(eventType);\n  var isScrollEvent = isScroll(eventType);\n  var isSelectionChangeEvent = isSelectionChange(eventType);\n  var responderEvent = createResponderEvent(domEvent, responderTouchHistoryStore);\n  /**\n   * Record the state of active pointers\n   */\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    responderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n  /**\n   * Responder System logic\n   */\n\n\n  var eventPaths = getResponderPaths(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder; // If an event occured that might change the current responder...\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    // If there is already a responder, prune the event paths to the lowest common ancestor\n    // of the existing responder and deepest target of the event.\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor); // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\n\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      // If a node wants to become the responder, attempt to transfer.\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        // Sets responder if none exists, or negotates with existing responder.\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  } // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\n\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node; // Start\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } // Move\n    else if (isMoveEvent) {\n      if (onResponderMove != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n        onResponderMove(responderEvent);\n      }\n    } else {\n      var isTerminateEvent = isCancelish(eventType) || // native context menu\n      eventType === 'contextmenu' || // window blur\n      eventType === 'blur' && eventTarget === window || // responder (or ancestors) blur\n      eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer\n      isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)\n      isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node\n      isSelectionChangeEvent && hasValidSelection(domEvent);\n      var isReleaseEvent = isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches); // End\n\n      if (isEndEvent) {\n        if (onResponderEnd != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n          onResponderEnd(responderEvent);\n        }\n      } // Release\n\n\n      if (isReleaseEvent) {\n        if (onResponderRelease != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n          onResponderRelease(responderEvent);\n        }\n\n        changeCurrentResponder(emptyResponder);\n      } // Terminate\n\n\n      if (isTerminateEvent) {\n        var shouldTerminate = true; // Responders can still avoid termination but only for these events.\n\n        if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n          // Only call this function is it wasn't already called during negotiation.\n          if (wasNegotiated) {\n            shouldTerminate = false;\n          } else if (onResponderTerminationRequest != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n            if (onResponderTerminationRequest(responderEvent) === false) {\n              shouldTerminate = false;\n            }\n          }\n        }\n\n        if (shouldTerminate) {\n          if (onResponderTerminate != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n            onResponderTerminate(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n          isEmulatingMouseEvents = false;\n          trackedTouchCount = 0;\n        }\n      }\n    }\n  }\n}\n/**\n * Walk the event path to/from the target node. At each node, stop and call the\n * relevant \"shouldSet\" functions for the given event type. If any of those functions\n * call \"stopPropagation\" on the event, stop searching for a responder.\n */\n\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type]; // for Flow\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          // Start the path from the potential responder\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id,\n            node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    }; // capture\n\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    } // bubble\n\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n/**\n * Attempt to transfer the responder.\n */\n\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node; // Set responder\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } // Negotiate with current responder\n  else {\n    var _getResponderConfig3 = getResponderConfig(currentId),\n        onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n    var allowTransfer = true;\n\n    if (onResponderTerminationRequest != null) {\n      responderEvent.currentTarget = currentNode;\n      responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n      if (onResponderTerminationRequest(responderEvent) === false) {\n        allowTransfer = false;\n      }\n    }\n\n    if (allowTransfer) {\n      // Terminate existing responder\n      if (onResponderTerminate != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n        onResponderTerminate(responderEvent);\n      } // Grant next responder\n\n\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n        onResponderGrant(responderEvent);\n      }\n\n      changeCurrentResponder(wantsResponder);\n    } else {\n      // Reject responder request\n      if (onResponderReject != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n        onResponderReject(responderEvent);\n      }\n    }\n  }\n}\n/* ------------ PUBLIC API ------------ */\n\n/**\n * Attach Listeners\n *\n * Use native events as ReactDOM doesn't have a non-plugin API to implement\n * this system.\n */\n\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = [// mouse\n'mousedown', 'mousemove', 'mouseup', 'dragstart', // touch\n'touchstart', 'touchmove', 'touchend', 'touchcancel', // other\n'contextmenu', 'select', 'selectionchange'];\nexport function attachListeners() {\n  if (canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(eventType => {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(eventType => {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n/**\n * Register a node with the ResponderSystem.\n */\n\nexport function addNode(id, node, config) {\n  setResponderId(node, id);\n  responderListenersMap.set(id, config);\n}\n/**\n * Unregister a node with the ResponderSystem.\n */\n\nexport function removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n/**\n * Allow the current responder to be terminated from within components to support\n * more complex requirements, such as use with other React libraries for working\n * with scroll views, input views, etc.\n */\n\nexport function terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = createResponderEvent({}, responderTouchHistoryStore);\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n/**\n * Allow unit tests to inspect the current responder in the system.\n * FOR TESTING ONLY.\n */\n\nexport function getResponderNode() {\n  return currentResponder.node;\n}"]},"metadata":{},"sourceType":"module"}