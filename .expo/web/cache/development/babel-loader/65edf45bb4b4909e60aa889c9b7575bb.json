{"ast":null,"code":"\"use strict\";\n\nimport Dimensions from \"../Dimensions\";\nimport { useEffect, useState } from \"react\";\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n      return Dimensions.get(\"window\");\n    }),\n    dims = _useState[0],\n    setDims = _useState[1];\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      if (window != null) {\n        setDims(window);\n      }\n    }\n    Dimensions.addEventListener(\"change\", handleChange);\n    setDims(Dimensions.get(\"window\"));\n    return function () {\n      Dimensions.removeEventListener(\"change\", handleChange);\n    };\n  }, []);\n  return dims;\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/useWindowDimensions/index.js"],"names":["Dimensions","useEffect","useState","useWindowDimensions","_useState","get","dims","setDims","handleChange","_ref","window","addEventListener","removeEventListener"],"mappings":"AASA,YAAA;;AAEA,OAAOA,UAAAA;AACP,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAA;AACpC,eAAe,SAASC,mBAAAA,GAAsB;EAC5C,IAAIC,SAAAA,GAAYF,QAAAA,CAAS;MAAA,OAAMF,UAAAA,CAAWK,GAAG,CAAC,QAAA,CAAA;IAAA,EAAA;IAC1CC,IAAAA,GAAOF,SAAS,CAAC,CAAA,CAAE;IACnBG,OAAAA,GAAUH,SAAS,CAAC,CAAA,CAAE;EAE1BH,SAAAA,CAAU,YAAM;IACd,SAASO,YAAAA,CAAaC,IAAI,EAAE;MAC1B,IAAIC,MAAAA,GAASD,IAAAA,CAAKC,MAAM;MAExB,IAAIA,MAAAA,IAAU,IAAI,EAAE;QAClBH,OAAAA,CAAQG,MAAAA,CAAAA;MACV;IACF;IAEAV,UAAAA,CAAWW,gBAAgB,CAAC,QAAA,EAAUH,YAAAA,CAAAA;IAItCD,OAAAA,CAAQP,UAAAA,CAAWK,GAAG,CAAC,QAAA,CAAA,CAAA;IACvB,OAAO,YAAM;MACXL,UAAAA,CAAWY,mBAAmB,CAAC,QAAA,EAAUJ,YAAAA,CAAAA;IAC3C,CAAA;EACF,CAAA,EAAG,EAAE,CAAA;EACL,OAAOF,IAAAA;AACT","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(() => Dimensions.get('window')),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(() => {\n    function handleChange(_ref) {\n      var window = _ref.window;\n\n      if (window != null) {\n        setDims(window);\n      }\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}"]},"metadata":{},"sourceType":"module"}