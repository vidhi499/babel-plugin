{"ast":null,"code":"import createEventHandle from \"../createEventHandle\";\nimport canUseDOM from \"../canUseDom\";\nvar supportsPointerEvent = function supportsPointerEvent() {\n  return !!(true && window.PointerEvent != null);\n};\nvar activeModality = 'keyboard';\nvar modality = 'keyboard';\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = 'keyboard';\nvar MOUSE = 'mouse';\nvar TOUCH = 'touch';\nvar BLUR = 'blur';\nvar CONTEXTMENU = 'contextmenu';\nvar FOCUS = 'focus';\nvar KEYDOWN = 'keydown';\nvar MOUSEDOWN = 'mousedown';\nvar MOUSEMOVE = 'mousemove';\nvar MOUSEUP = 'mouseup';\nvar POINTERDOWN = 'pointerdown';\nvar POINTERMOVE = 'pointermove';\nvar SCROLL = 'scroll';\nvar SELECTIONCHANGE = 'selectionchange';\nvar TOUCHCANCEL = 'touchcancel';\nvar TOUCHMOVE = 'touchmove';\nvar TOUCHSTART = 'touchstart';\nvar VISIBILITYCHANGE = 'visibilitychange';\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n};\nvar addBlurListener = createEventHandle(BLUR, bubbleOptions);\nvar addFocusListener = createEventHandle(FOCUS, bubbleOptions);\nvar addVisibilityChangeListener = createEventHandle(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = createEventHandle(KEYDOWN, captureOptions);\nvar addPointerDownListener = createEventHandle(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = createEventHandle(POINTERMOVE, captureOptions);\nvar addContextMenuListener = createEventHandle(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = createEventHandle(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = createEventHandle(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = createEventHandle(MOUSEUP, captureOptions);\nvar addScrollListener = createEventHandle(SCROLL, captureOptions);\nvar addSelectiomChangeListener = createEventHandle(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = createEventHandle(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = createEventHandle(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = createEventHandle(TOUCHSTART, captureOptions);\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n    callListeners();\n  }\n}\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners();\n  isEmulatingMouseEvents = false;\n}\nfunction onFocusWindow() {\n  restoreModality();\n}\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\nfunction onVisibilityChange() {\n  if (document.visibilityState !== 'hidden') {\n    restoreModality();\n  }\n}\nfunction onPointerish(event) {\n  var eventType = event.type;\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n      return;\n    }\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n      return;\n    }\n  } else {\n    if (!isEmulatingMouseEvents) {\n      if (eventType === MOUSEDOWN) {\n        if (activeModality !== MOUSE) {\n          modality = MOUSE;\n          activeModality = MOUSE;\n          callListeners();\n        }\n      }\n      if (eventType === MOUSEMOVE) {\n        if (modality !== MOUSE) {\n          modality = MOUSE;\n          callListeners();\n        }\n      }\n    }\n    if (eventType === TOUCHSTART) {\n      isEmulatingMouseEvents = true;\n      if (event.touches && event.touches.length > 1) {\n        isEmulatingMouseEvents = false;\n      }\n      if (activeModality !== TOUCH) {\n        modality = TOUCH;\n        activeModality = TOUCH;\n        callListeners();\n      }\n      return;\n    }\n    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n      isEmulatingMouseEvents = false;\n    }\n  }\n}\nif (canUseDOM) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange);\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\nfunction callListeners() {\n  var value = {\n    activeModality: activeModality,\n    modality: modality\n  };\n  listeners.forEach(function (listener) {\n    listener(value);\n  });\n}\nexport function getActiveModality() {\n  return activeModality;\n}\nexport function getModality() {\n  return modality;\n}\nexport function addModalityListener(listener) {\n  listeners.add(listener);\n  return function () {\n    listeners[\"delete\"](listener);\n  };\n}\nexport function testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/modality/index.js"],"names":["createEventHandle","canUseDOM","supportsPointerEvent","window","PointerEvent","activeModality","modality","previousModality","previousActiveModality","isEmulatingMouseEvents","listeners","Set","KEYBOARD","MOUSE","TOUCH","BLUR","CONTEXTMENU","FOCUS","KEYDOWN","MOUSEDOWN","MOUSEMOVE","MOUSEUP","POINTERDOWN","POINTERMOVE","SCROLL","SELECTIONCHANGE","TOUCHCANCEL","TOUCHMOVE","TOUCHSTART","VISIBILITYCHANGE","bubbleOptions","passive","captureOptions","capture","addBlurListener","addFocusListener","addVisibilityChangeListener","addKeyDownListener","addPointerDownListener","addPointerMoveListener","addContextMenuListener","addMouseDownListener","addMouseMoveListener","addMouseUpListener","addScrollListener","addSelectiomChangeListener","addTouchCancelListener","addTouchMoveListener","addTouchStartListener","restoreModality","callListeners","onBlurWindow","onFocusWindow","onKeyDown","event","metaKey","altKey","ctrlKey","onVisibilityChange","document","visibilityState","onPointerish","eventType","type","pointerType","touches","length","value","forEach","listener","getActiveModality","getModality","addModalityListener","add","testOnly_resetActiveModality"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport createEventHandle from '../createEventHandle';\nimport canUseDOM from '../canUseDom';\n\nvar supportsPointerEvent = () => !!(typeof window !== 'undefined' && window.PointerEvent != null);\n\nvar activeModality = 'keyboard';\nvar modality = 'keyboard';\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = 'keyboard';\nvar MOUSE = 'mouse';\nvar TOUCH = 'touch';\nvar BLUR = 'blur';\nvar CONTEXTMENU = 'contextmenu';\nvar FOCUS = 'focus';\nvar KEYDOWN = 'keydown';\nvar MOUSEDOWN = 'mousedown';\nvar MOUSEMOVE = 'mousemove';\nvar MOUSEUP = 'mouseup';\nvar POINTERDOWN = 'pointerdown';\nvar POINTERMOVE = 'pointermove';\nvar SCROLL = 'scroll';\nvar SELECTIONCHANGE = 'selectionchange';\nvar TOUCHCANCEL = 'touchcancel';\nvar TOUCHMOVE = 'touchmove';\nvar TOUCHSTART = 'touchstart';\nvar VISIBILITYCHANGE = 'visibilitychange';\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n}; // Window events\n\nvar addBlurListener = createEventHandle(BLUR, bubbleOptions);\nvar addFocusListener = createEventHandle(FOCUS, bubbleOptions); // Must be capture phase because 'stopPropagation' might prevent these\n// events bubbling to the document.\n\nvar addVisibilityChangeListener = createEventHandle(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = createEventHandle(KEYDOWN, captureOptions);\nvar addPointerDownListener = createEventHandle(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = createEventHandle(POINTERMOVE, captureOptions); // Fallback events\n\nvar addContextMenuListener = createEventHandle(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = createEventHandle(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = createEventHandle(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = createEventHandle(MOUSEUP, captureOptions);\nvar addScrollListener = createEventHandle(SCROLL, captureOptions);\nvar addSelectiomChangeListener = createEventHandle(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = createEventHandle(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = createEventHandle(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = createEventHandle(TOUCHSTART, captureOptions);\n\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n\n    callListeners();\n  }\n}\n\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners(); // for fallback events\n\n  isEmulatingMouseEvents = false;\n}\n\nfunction onFocusWindow() {\n  restoreModality();\n}\n\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\n\nfunction onVisibilityChange() {\n  if (document.visibilityState !== 'hidden') {\n    restoreModality();\n  }\n}\n\nfunction onPointerish(event) {\n  var eventType = event.type;\n\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n  } // Fallback for non-PointerEvent environment\n  else {\n    if (!isEmulatingMouseEvents) {\n      if (eventType === MOUSEDOWN) {\n        if (activeModality !== MOUSE) {\n          modality = MOUSE;\n          activeModality = MOUSE;\n          callListeners();\n        }\n      }\n\n      if (eventType === MOUSEMOVE) {\n        if (modality !== MOUSE) {\n          modality = MOUSE;\n          callListeners();\n        }\n      }\n    } // Flag when browser may produce emulated events\n\n\n    if (eventType === TOUCHSTART) {\n      isEmulatingMouseEvents = true;\n\n      if (event.touches && event.touches.length > 1) {\n        isEmulatingMouseEvents = false;\n      }\n\n      if (activeModality !== TOUCH) {\n        modality = TOUCH;\n        activeModality = TOUCH;\n        callListeners();\n      }\n\n      return;\n    } // Remove flag after emulated events are finished or cancelled, and if an\n    // event occurs that cuts short a touch event sequence.\n\n\n    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n      isEmulatingMouseEvents = false;\n    }\n  }\n}\n\nif (canUseDOM) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange); // fallbacks\n\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\n\nfunction callListeners() {\n  var value = {\n    activeModality,\n    modality\n  };\n  listeners.forEach(listener => {\n    listener(value);\n  });\n}\n\nexport function getActiveModality() {\n  return activeModality;\n}\nexport function getModality() {\n  return modality;\n}\nexport function addModalityListener(listener) {\n  listeners.add(listener);\n  return () => {\n    listeners.delete(listener);\n  };\n}\nexport function testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}"]},"metadata":{},"sourceType":"module"}