{"ast":null,"code":"var _s = $RefreshSig$();\n\"use strict\";\nimport PressResponder from \"./PressResponder\";\nimport { useDebugValue, useEffect, useRef } from \"react\";\nexport default function usePressEvents(hostRef, config) {\n  _s();\n  var pressResponderRef = useRef(null);\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n  var pressResponder = pressResponderRef.current;\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}\n_s(usePressEvents, \"Bn7MRJJF05Zb4wEzqRzInRkFfmc=\");\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"names":["PressResponder","useDebugValue","useEffect","useRef","usePressEvents","hostRef","config","pressResponderRef","current","pressResponder","configure","reset","getEventHandlers"],"mappings":"AASA,IAAA,EAAA,GAAA,YAAA,EAAA;AAAA,YAAA;AAEA,OAAOA,cAAAA;AACP,SAASC,aAAa,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAA;AACjD,eAAe,SAASC,cAAAA,CAAeC,OAAO,EAAEC,MAAM,EAAE;;EACtD,IAAIC,iBAAAA,GAAoBJ,MAAAA,CAAO,IAAI,CAAA;EAEnC,IAAII,iBAAAA,CAAkBC,OAAO,IAAI,IAAI,EAAE;IACrCD,iBAAAA,CAAkBC,OAAO,GAAG,IAAIR,cAAAA,CAAeM,MAAAA,CAAAA;EACjD;EAEA,IAAIG,cAAAA,GAAiBF,iBAAAA,CAAkBC,OAAO;EAE9CN,SAAAA,CAAU,YAAM;IACdO,cAAAA,CAAeC,SAAS,CAACJ,MAAAA,CAAAA;EAC3B,CAAA,EAAG,CAACA,MAAAA,EAAQG,cAAAA,CAAe,CAAA;EAG3BP,SAAAA,CAAU,YAAM;IACd,OAAO,YAAM;MACXO,cAAAA,CAAeE,KAAK,EAAA;IACtB,CAAA;EACF,CAAA,EAAG,CAACF,cAAAA,CAAe,CAAA;EACnBR,aAAAA,CAAcK,MAAAA,CAAAA;EACd,OAAOG,cAAAA,CAAeG,gBAAgB,EAAA;AACxC;GArBwBR,cAAAA,EAAAA,8BAAAA,CAAAA","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"]},"metadata":{},"sourceType":"module"}