{"ast":null,"code":"import createEventHandle from \"../createEventHandle\";\nimport canUseDOM from \"../canUseDom\";\nvar supportsPointerEvent = function supportsPointerEvent() {\n  return !!(\"object\" !== \"undefined\" && window.PointerEvent != null);\n};\nvar activeModality = \"keyboard\";\nvar modality = \"keyboard\";\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = \"keyboard\";\nvar MOUSE = \"mouse\";\nvar TOUCH = \"touch\";\nvar BLUR = \"blur\";\nvar CONTEXTMENU = \"contextmenu\";\nvar FOCUS = \"focus\";\nvar KEYDOWN = \"keydown\";\nvar MOUSEDOWN = \"mousedown\";\nvar MOUSEMOVE = \"mousemove\";\nvar MOUSEUP = \"mouseup\";\nvar POINTERDOWN = \"pointerdown\";\nvar POINTERMOVE = \"pointermove\";\nvar SCROLL = \"scroll\";\nvar SELECTIONCHANGE = \"selectionchange\";\nvar TOUCHCANCEL = \"touchcancel\";\nvar TOUCHMOVE = \"touchmove\";\nvar TOUCHSTART = \"touchstart\";\nvar VISIBILITYCHANGE = \"visibilitychange\";\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n};\nvar addBlurListener = createEventHandle(BLUR, bubbleOptions);\nvar addFocusListener = createEventHandle(FOCUS, bubbleOptions);\nvar addVisibilityChangeListener = createEventHandle(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = createEventHandle(KEYDOWN, captureOptions);\nvar addPointerDownListener = createEventHandle(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = createEventHandle(POINTERMOVE, captureOptions);\nvar addContextMenuListener = createEventHandle(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = createEventHandle(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = createEventHandle(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = createEventHandle(MOUSEUP, captureOptions);\nvar addScrollListener = createEventHandle(SCROLL, captureOptions);\nvar addSelectiomChangeListener = createEventHandle(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = createEventHandle(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = createEventHandle(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = createEventHandle(TOUCHSTART, captureOptions);\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n    callListeners();\n  }\n}\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners();\n  isEmulatingMouseEvents = false;\n}\nfunction onFocusWindow() {\n  restoreModality();\n}\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\nfunction onVisibilityChange() {\n  if (document.visibilityState !== \"hidden\") {\n    restoreModality();\n  }\n}\nfunction onPointerish(event) {\n  var eventType = event.type;\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n      return;\n    }\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n      return;\n    }\n  } else {\n    if (!isEmulatingMouseEvents) {\n      if (eventType === MOUSEDOWN) {\n        if (activeModality !== MOUSE) {\n          modality = MOUSE;\n          activeModality = MOUSE;\n          callListeners();\n        }\n      }\n      if (eventType === MOUSEMOVE) {\n        if (modality !== MOUSE) {\n          modality = MOUSE;\n          callListeners();\n        }\n      }\n    }\n    if (eventType === TOUCHSTART) {\n      isEmulatingMouseEvents = true;\n      if (event.touches && event.touches.length > 1) {\n        isEmulatingMouseEvents = false;\n      }\n      if (activeModality !== TOUCH) {\n        modality = TOUCH;\n        activeModality = TOUCH;\n        callListeners();\n      }\n      return;\n    }\n    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n      isEmulatingMouseEvents = false;\n    }\n  }\n}\nif (canUseDOM) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange);\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\nfunction callListeners() {\n  var value = {\n    activeModality: activeModality,\n    modality: modality\n  };\n  listeners.forEach(function (listener) {\n    listener(value);\n  });\n}\nexport function getActiveModality() {\n  return activeModality;\n}\nexport function getModality() {\n  return modality;\n}\nexport function addModalityListener(listener) {\n  listeners.add(listener);\n  return function () {\n    listeners.delete(listener);\n  };\n}\nexport function testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/modality/index.js"],"names":["createEventHandle","canUseDOM","supportsPointerEvent","window","PointerEvent","activeModality","modality","previousModality","previousActiveModality","isEmulatingMouseEvents","listeners","Set","KEYBOARD","MOUSE","TOUCH","BLUR","CONTEXTMENU","FOCUS","KEYDOWN","MOUSEDOWN","MOUSEMOVE","MOUSEUP","POINTERDOWN","POINTERMOVE","SCROLL","SELECTIONCHANGE","TOUCHCANCEL","TOUCHMOVE","TOUCHSTART","VISIBILITYCHANGE","bubbleOptions","passive","captureOptions","capture","addBlurListener","addFocusListener","addVisibilityChangeListener","addKeyDownListener","addPointerDownListener","addPointerMoveListener","addContextMenuListener","addMouseDownListener","addMouseMoveListener","addMouseUpListener","addScrollListener","addSelectiomChangeListener","addTouchCancelListener","addTouchMoveListener","addTouchStartListener","restoreModality","callListeners","onBlurWindow","onFocusWindow","onKeyDown","event","metaKey","altKey","ctrlKey","onVisibilityChange","document","visibilityState","onPointerish","eventType","type","pointerType","touches","length","value","forEach","listener","getActiveModality","getModality","addModalityListener","add","delete","testOnly_resetActiveModality"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport createEventHandle from '../createEventHandle';\nimport canUseDOM from '../canUseDom';\n\nvar supportsPointerEvent = () => !!(typeof window !== 'undefined' && window.PointerEvent != null);\n\nvar activeModality = 'keyboard';\nvar modality = 'keyboard';\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = 'keyboard';\nvar MOUSE = 'mouse';\nvar TOUCH = 'touch';\nvar BLUR = 'blur';\nvar CONTEXTMENU = 'contextmenu';\nvar FOCUS = 'focus';\nvar KEYDOWN = 'keydown';\nvar MOUSEDOWN = 'mousedown';\nvar MOUSEMOVE = 'mousemove';\nvar MOUSEUP = 'mouseup';\nvar POINTERDOWN = 'pointerdown';\nvar POINTERMOVE = 'pointermove';\nvar SCROLL = 'scroll';\nvar SELECTIONCHANGE = 'selectionchange';\nvar TOUCHCANCEL = 'touchcancel';\nvar TOUCHMOVE = 'touchmove';\nvar TOUCHSTART = 'touchstart';\nvar VISIBILITYCHANGE = 'visibilitychange';\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n}; // Window events\n\nvar addBlurListener = createEventHandle(BLUR, bubbleOptions);\nvar addFocusListener = createEventHandle(FOCUS, bubbleOptions); // Must be capture phase because 'stopPropagation' might prevent these\n// events bubbling to the document.\n\nvar addVisibilityChangeListener = createEventHandle(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = createEventHandle(KEYDOWN, captureOptions);\nvar addPointerDownListener = createEventHandle(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = createEventHandle(POINTERMOVE, captureOptions); // Fallback events\n\nvar addContextMenuListener = createEventHandle(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = createEventHandle(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = createEventHandle(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = createEventHandle(MOUSEUP, captureOptions);\nvar addScrollListener = createEventHandle(SCROLL, captureOptions);\nvar addSelectiomChangeListener = createEventHandle(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = createEventHandle(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = createEventHandle(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = createEventHandle(TOUCHSTART, captureOptions);\n\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n\n    callListeners();\n  }\n}\n\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners(); // for fallback events\n\n  isEmulatingMouseEvents = false;\n}\n\nfunction onFocusWindow() {\n  restoreModality();\n}\n\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\n\nfunction onVisibilityChange() {\n  if (document.visibilityState !== 'hidden') {\n    restoreModality();\n  }\n}\n\nfunction onPointerish(event) {\n  var eventType = event.type;\n\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n  } // Fallback for non-PointerEvent environment\n  else {\n    if (!isEmulatingMouseEvents) {\n      if (eventType === MOUSEDOWN) {\n        if (activeModality !== MOUSE) {\n          modality = MOUSE;\n          activeModality = MOUSE;\n          callListeners();\n        }\n      }\n\n      if (eventType === MOUSEMOVE) {\n        if (modality !== MOUSE) {\n          modality = MOUSE;\n          callListeners();\n        }\n      }\n    } // Flag when browser may produce emulated events\n\n\n    if (eventType === TOUCHSTART) {\n      isEmulatingMouseEvents = true;\n\n      if (event.touches && event.touches.length > 1) {\n        isEmulatingMouseEvents = false;\n      }\n\n      if (activeModality !== TOUCH) {\n        modality = TOUCH;\n        activeModality = TOUCH;\n        callListeners();\n      }\n\n      return;\n    } // Remove flag after emulated events are finished or cancelled, and if an\n    // event occurs that cuts short a touch event sequence.\n\n\n    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n      isEmulatingMouseEvents = false;\n    }\n  }\n}\n\nif (canUseDOM) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange); // fallbacks\n\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\n\nfunction callListeners() {\n  var value = {\n    activeModality,\n    modality\n  };\n  listeners.forEach(listener => {\n    listener(value);\n  });\n}\n\nexport function getActiveModality() {\n  return activeModality;\n}\nexport function getModality() {\n  return modality;\n}\nexport function addModalityListener(listener) {\n  listeners.add(listener);\n  return () => {\n    listeners.delete(listener);\n  };\n}\nexport function testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}"]},"metadata":{},"sourceType":"module"}