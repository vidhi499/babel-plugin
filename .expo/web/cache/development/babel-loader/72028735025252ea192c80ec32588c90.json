{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _EmitterSubscription = _interopRequireDefault(require(\"./_EmitterSubscription\"));\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./_EventSubscriptionVendor\"));\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      this._subscriber.removeAllSubscriptions(eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      (0, _invariant.default)(subscription.emitter === this, \"Subscription does not belong to this emitter.\");\n      this._subscriber.removeSubscription(subscription);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      return subscriptions ? subscriptions.filter(sparseFilterPredicate).length : 0;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener) {\n            subscription.listener.apply(subscription.context, args);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + \"deprecated. Please instead use `remove()` on the subscription \" + \"returned by `EventEmitter.addListener`.\");\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n          }\n        }\n      }\n    }\n  }]);\n  return EventEmitter;\n}();\nvar _default = EventEmitter;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/vendor/react-native/emitter/_EventEmitter.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","_invariant","_EmitterSubscription","_EventSubscriptionVendor","sparseFilterPredicate","EventEmitter","constructor","subscriber","_subscriber","addListener","eventType","listener","context","addSubscription","removeAllListeners","removeAllSubscriptions","removeSubscription","subscription","emitter","listenerCount","subscriptions","getSubscriptionsForType","filter","length","emit","_len","arguments","args","Array","_key","i","l","apply","removeListener","console","error","remove","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _EmitterSubscription = _interopRequireDefault(require(\"./_EmitterSubscription\"));\n\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./_EventSubscriptionVendor\"));\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nvar sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber) {\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n\n\n  removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeSubscription(subscription) {\n    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n\n\n  listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n\n\n  emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n\n}\n\nvar _default = EventEmitter;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}