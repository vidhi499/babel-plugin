{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.addModalityListener = addModalityListener;\nexports.getActiveModality = getActiveModality;\nexports.getModality = getModality;\nexports.testOnly_resetActiveModality = testOnly_resetActiveModality;\nvar _createEventHandle = _interopRequireDefault(require(\"../createEventHandle\"));\nvar _canUseDom = _interopRequireDefault(require(\"../canUseDom\"));\nvar supportsPointerEvent = function supportsPointerEvent() {\n  return !!(\"undefined\" !== \"undefined\" && window.PointerEvent != null);\n};\nvar activeModality = \"keyboard\";\nvar modality = \"keyboard\";\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = \"keyboard\";\nvar MOUSE = \"mouse\";\nvar TOUCH = \"touch\";\nvar BLUR = \"blur\";\nvar CONTEXTMENU = \"contextmenu\";\nvar FOCUS = \"focus\";\nvar KEYDOWN = \"keydown\";\nvar MOUSEDOWN = \"mousedown\";\nvar MOUSEMOVE = \"mousemove\";\nvar MOUSEUP = \"mouseup\";\nvar POINTERDOWN = \"pointerdown\";\nvar POINTERMOVE = \"pointermove\";\nvar SCROLL = \"scroll\";\nvar SELECTIONCHANGE = \"selectionchange\";\nvar TOUCHCANCEL = \"touchcancel\";\nvar TOUCHMOVE = \"touchmove\";\nvar TOUCHSTART = \"touchstart\";\nvar VISIBILITYCHANGE = \"visibilitychange\";\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n};\nvar addBlurListener = (0, _createEventHandle.default)(BLUR, bubbleOptions);\nvar addFocusListener = (0, _createEventHandle.default)(FOCUS, bubbleOptions);\nvar addVisibilityChangeListener = (0, _createEventHandle.default)(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = (0, _createEventHandle.default)(KEYDOWN, captureOptions);\nvar addPointerDownListener = (0, _createEventHandle.default)(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = (0, _createEventHandle.default)(POINTERMOVE, captureOptions);\nvar addContextMenuListener = (0, _createEventHandle.default)(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = (0, _createEventHandle.default)(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = (0, _createEventHandle.default)(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = (0, _createEventHandle.default)(MOUSEUP, captureOptions);\nvar addScrollListener = (0, _createEventHandle.default)(SCROLL, captureOptions);\nvar addSelectiomChangeListener = (0, _createEventHandle.default)(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = (0, _createEventHandle.default)(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = (0, _createEventHandle.default)(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = (0, _createEventHandle.default)(TOUCHSTART, captureOptions);\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n    callListeners();\n  }\n}\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners();\n  isEmulatingMouseEvents = false;\n}\nfunction onFocusWindow() {\n  restoreModality();\n}\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\nfunction onVisibilityChange() {\n  if (document.visibilityState !== \"hidden\") {\n    restoreModality();\n  }\n}\nfunction onPointerish(event) {\n  var eventType = event.type;\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n      return;\n    }\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n      return;\n    }\n  } else {\n    if (!isEmulatingMouseEvents) {\n      if (eventType === MOUSEDOWN) {\n        if (activeModality !== MOUSE) {\n          modality = MOUSE;\n          activeModality = MOUSE;\n          callListeners();\n        }\n      }\n      if (eventType === MOUSEMOVE) {\n        if (modality !== MOUSE) {\n          modality = MOUSE;\n          callListeners();\n        }\n      }\n    }\n    if (eventType === TOUCHSTART) {\n      isEmulatingMouseEvents = true;\n      if (event.touches && event.touches.length > 1) {\n        isEmulatingMouseEvents = false;\n      }\n      if (activeModality !== TOUCH) {\n        modality = TOUCH;\n        activeModality = TOUCH;\n        callListeners();\n      }\n      return;\n    }\n    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n      isEmulatingMouseEvents = false;\n    }\n  }\n}\nif (_canUseDom.default) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange);\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\nfunction callListeners() {\n  var value = {\n    activeModality: activeModality,\n    modality: modality\n  };\n  listeners.forEach(function (listener) {\n    listener(value);\n  });\n}\nfunction getActiveModality() {\n  return activeModality;\n}\nfunction getModality() {\n  return modality;\n}\nfunction addModalityListener(listener) {\n  listeners.add(listener);\n  return function () {\n    listeners.delete(listener);\n  };\n}\nfunction testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/modules/modality/index.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","addModalityListener","getActiveModality","getModality","testOnly_resetActiveModality","_createEventHandle","_canUseDom","supportsPointerEvent","window","PointerEvent","activeModality","modality","previousModality","previousActiveModality","isEmulatingMouseEvents","listeners","Set","KEYBOARD","MOUSE","TOUCH","BLUR","CONTEXTMENU","FOCUS","KEYDOWN","MOUSEDOWN","MOUSEMOVE","MOUSEUP","POINTERDOWN","POINTERMOVE","SCROLL","SELECTIONCHANGE","TOUCHCANCEL","TOUCHMOVE","TOUCHSTART","VISIBILITYCHANGE","bubbleOptions","passive","captureOptions","capture","addBlurListener","addFocusListener","addVisibilityChangeListener","addKeyDownListener","addPointerDownListener","addPointerMoveListener","addContextMenuListener","addMouseDownListener","addMouseMoveListener","addMouseUpListener","addScrollListener","addSelectiomChangeListener","addTouchCancelListener","addTouchMoveListener","addTouchStartListener","restoreModality","callListeners","onBlurWindow","onFocusWindow","onKeyDown","event","metaKey","altKey","ctrlKey","onVisibilityChange","document","visibilityState","onPointerish","eventType","type","pointerType","touches","length","value","forEach","listener","add","delete"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.addModalityListener = addModalityListener;\nexports.getActiveModality = getActiveModality;\nexports.getModality = getModality;\nexports.testOnly_resetActiveModality = testOnly_resetActiveModality;\n\nvar _createEventHandle = _interopRequireDefault(require(\"../createEventHandle\"));\n\nvar _canUseDom = _interopRequireDefault(require(\"../canUseDom\"));\n\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar supportsPointerEvent = () => !!(typeof window !== 'undefined' && window.PointerEvent != null);\n\nvar activeModality = 'keyboard';\nvar modality = 'keyboard';\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = 'keyboard';\nvar MOUSE = 'mouse';\nvar TOUCH = 'touch';\nvar BLUR = 'blur';\nvar CONTEXTMENU = 'contextmenu';\nvar FOCUS = 'focus';\nvar KEYDOWN = 'keydown';\nvar MOUSEDOWN = 'mousedown';\nvar MOUSEMOVE = 'mousemove';\nvar MOUSEUP = 'mouseup';\nvar POINTERDOWN = 'pointerdown';\nvar POINTERMOVE = 'pointermove';\nvar SCROLL = 'scroll';\nvar SELECTIONCHANGE = 'selectionchange';\nvar TOUCHCANCEL = 'touchcancel';\nvar TOUCHMOVE = 'touchmove';\nvar TOUCHSTART = 'touchstart';\nvar VISIBILITYCHANGE = 'visibilitychange';\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n}; // Window events\n\nvar addBlurListener = (0, _createEventHandle.default)(BLUR, bubbleOptions);\nvar addFocusListener = (0, _createEventHandle.default)(FOCUS, bubbleOptions); // Must be capture phase because 'stopPropagation' might prevent these\n// events bubbling to the document.\n\nvar addVisibilityChangeListener = (0, _createEventHandle.default)(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = (0, _createEventHandle.default)(KEYDOWN, captureOptions);\nvar addPointerDownListener = (0, _createEventHandle.default)(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = (0, _createEventHandle.default)(POINTERMOVE, captureOptions); // Fallback events\n\nvar addContextMenuListener = (0, _createEventHandle.default)(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = (0, _createEventHandle.default)(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = (0, _createEventHandle.default)(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = (0, _createEventHandle.default)(MOUSEUP, captureOptions);\nvar addScrollListener = (0, _createEventHandle.default)(SCROLL, captureOptions);\nvar addSelectiomChangeListener = (0, _createEventHandle.default)(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = (0, _createEventHandle.default)(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = (0, _createEventHandle.default)(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = (0, _createEventHandle.default)(TOUCHSTART, captureOptions);\n\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n\n    callListeners();\n  }\n}\n\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners(); // for fallback events\n\n  isEmulatingMouseEvents = false;\n}\n\nfunction onFocusWindow() {\n  restoreModality();\n}\n\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\n\nfunction onVisibilityChange() {\n  if (document.visibilityState !== 'hidden') {\n    restoreModality();\n  }\n}\n\nfunction onPointerish(event) {\n  var eventType = event.type;\n\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n  } // Fallback for non-PointerEvent environment\n  else {\n    if (!isEmulatingMouseEvents) {\n      if (eventType === MOUSEDOWN) {\n        if (activeModality !== MOUSE) {\n          modality = MOUSE;\n          activeModality = MOUSE;\n          callListeners();\n        }\n      }\n\n      if (eventType === MOUSEMOVE) {\n        if (modality !== MOUSE) {\n          modality = MOUSE;\n          callListeners();\n        }\n      }\n    } // Flag when browser may produce emulated events\n\n\n    if (eventType === TOUCHSTART) {\n      isEmulatingMouseEvents = true;\n\n      if (event.touches && event.touches.length > 1) {\n        isEmulatingMouseEvents = false;\n      }\n\n      if (activeModality !== TOUCH) {\n        modality = TOUCH;\n        activeModality = TOUCH;\n        callListeners();\n      }\n\n      return;\n    } // Remove flag after emulated events are finished or cancelled, and if an\n    // event occurs that cuts short a touch event sequence.\n\n\n    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n      isEmulatingMouseEvents = false;\n    }\n  }\n}\n\nif (_canUseDom.default) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange); // fallbacks\n\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\n\nfunction callListeners() {\n  var value = {\n    activeModality,\n    modality\n  };\n  listeners.forEach(listener => {\n    listener(value);\n  });\n}\n\nfunction getActiveModality() {\n  return activeModality;\n}\n\nfunction getModality() {\n  return modality;\n}\n\nfunction addModalityListener(listener) {\n  listeners.add(listener);\n  return () => {\n    listeners.delete(listener);\n  };\n}\n\nfunction testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}"]},"metadata":{},"sourceType":"script"}