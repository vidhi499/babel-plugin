{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Dimensions from \"../Dimensions\";\nvar PixelRatio = function () {\n  function PixelRatio() {\n    _classCallCheck(this, PixelRatio);\n  }\n  _createClass(PixelRatio, null, [{\n    key: \"get\",\n    value: function get() {\n      return Dimensions.get(\"window\").scale;\n    }\n  }, {\n    key: \"getFontScale\",\n    value: function getFontScale() {\n      return Dimensions.get(\"window\").fontScale || PixelRatio.get();\n    }\n  }, {\n    key: \"getPixelSizeForLayoutSize\",\n    value: function getPixelSizeForLayoutSize(layoutSize) {\n      return Math.round(layoutSize * PixelRatio.get());\n    }\n  }, {\n    key: \"roundToNearestPixel\",\n    value: function roundToNearestPixel(layoutSize) {\n      var ratio = PixelRatio.get();\n      return Math.round(layoutSize * ratio) / ratio;\n    }\n  }]);\n  return PixelRatio;\n}();\nexport { PixelRatio as default };\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"names":["Dimensions","PixelRatio","get","scale","fontScale","layoutSize","Math","round","ratio"],"mappings":";;AASA,OAAOA,UAAAA;AAAgC,IAKlBC,UAAAA;EAAAA;IAAAA;EAAAA;EAAAA;IAAAA;IAAAA,OAInB,eAAa;MACX,OAAOD,UAAAA,CAAWE,GAAG,CAAC,QAAA,CAAA,CAAUC,KAAK;IACvC;EAAA;IAAA;IAAA,OAMA,wBAAsB;MACpB,OAAOH,UAAAA,CAAWE,GAAG,CAAC,QAAA,CAAA,CAAUE,SAAS,IAAIH,UAAAA,CAAWC,GAAG,EAAA;IAC7D;EAAA;IAAA;IAAA,OAOA,mCAAiCG,UAAU,EAAE;MAC3C,OAAOC,IAAAA,CAAKC,KAAK,CAACF,UAAAA,GAAaJ,UAAAA,CAAWC,GAAG,EAAA,CAAA;IAC/C;EAAA;IAAA;IAAA,OASA,6BAA2BG,UAAU,EAAE;MACrC,IAAIG,KAAAA,GAAQP,UAAAA,CAAWC,GAAG,EAAA;MAC1B,OAAOI,IAAAA,CAAKC,KAAK,CAACF,UAAAA,GAAaG,KAAAA,CAAAA,GAASA,KAAAA;IAC1C;EAAA;EAAA;AAAA;AAnCF,SAAqBP,UAAAA,IAAAA,OAAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport Dimensions from '../Dimensions';\n/**\n * PixelRatio gives access to the device pixel density.\n */\n\nexport default class PixelRatio {\n  /**\n   * Returns the device pixel density.\n   */\n  static get() {\n    return Dimensions.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n\n\n  static getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n\n\n  static getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n\n\n  static roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}