{"ast":null,"code":"import _classCallCheck from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/createClass.js\";\nimport invariant from 'fbjs/lib/invariant';\nimport EmitterSubscription from \"./_EmitterSubscription\";\nimport EventSubscriptionVendor from \"./_EventSubscriptionVendor\";\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      this._subscriber.removeAllSubscriptions(eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n      this._subscriber.removeSubscription(subscription);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      return subscriptions ? subscriptions.filter(sparseFilterPredicate).length : 0;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener) {\n            subscription.listener.apply(subscription.context, args);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n          }\n        }\n      }\n    }\n  }]);\n  return EventEmitter;\n}();\nexport default EventEmitter;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventEmitter.js"],"names":["invariant","EmitterSubscription","EventSubscriptionVendor","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","eventType","listener","context","addSubscription","removeAllSubscriptions","subscription","emitter","removeSubscription","subscriptions","getSubscriptionsForType","filter","length","_len","arguments","args","Array","_key","i","l","apply","console","error","remove"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nimport invariant from 'fbjs/lib/invariant';\nimport EmitterSubscription from './_EmitterSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nvar sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n\n\n  removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n\n\n  listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n\n\n  emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n\n}\n\nexport default EventEmitter;"]},"metadata":{},"sourceType":"module"}