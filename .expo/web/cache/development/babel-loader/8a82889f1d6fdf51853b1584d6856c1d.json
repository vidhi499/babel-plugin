{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'fbjs/lib/invariant';\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n    this._subscriptionsForType = {};\n  }\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value: function addSubscription(eventType, subscription) {\n      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n      var key = this._subscriptionsForType[eventType].length;\n      this._subscriptionsForType[eventType].push(subscription);\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions(eventType) {\n      if (eventType == null) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value: function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n  return EventSubscriptionVendor;\n}();\nexport default EventSubscriptionVendor;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","eventType","subscription","subscriber","key","length","push","subscriptionsForType"],"mappings":"AASA,YAAA;;;;AAEA,OAAOA,SAAP,MAAsB,oBAAtB;AAMMC,IAAAA,uB;EACJ,SAAA,uBAAA,GAAc;IAAA,eAAA,CAAA,IAAA,EAAA,uBAAA,CAAA;IACZ,IAAA,CAAKC,qBAAL,GAA6B,CAAA,CAA7B;EACD;;;WASD,SAAA,eAAA,CAAgBC,SAAhB,EAA2BC,YAA3B,EAAyC;MACvCJ,SAAS,CAACI,YAAY,CAACC,UAAbD,KAA4B,IAA7B,EAAmC,wDAAnC,CAATJ;MAEA,IAAI,CAAC,IAAA,CAAKE,qBAAL,CAA2BC,SAA3B,CAAL,EAA4C;QAC1C,IAAA,CAAKD,qBAAL,CAA2BC,SAA3B,CAAA,GAAwC,EAAxC;MACD;MAED,IAAIG,GAAG,GAAG,IAAA,CAAKJ,qBAAL,CAA2BC,SAA3B,CAAA,CAAsCI,MAAhD;MAEA,IAAA,CAAKL,qBAAL,CAA2BC,SAA3B,CAAA,CAAsCK,IAAtC,CAA2CJ,YAA3C,CAAA;MAEAA,YAAY,CAACD,SAAbC,GAAyBD,SAAzBC;MACAA,YAAY,CAACE,GAAbF,GAAmBE,GAAnBF;MACA,OAAOA,YAAP;IACD;;;WASD,SAAA,sBAAA,CAAuBD,SAAvB,EAAkC;MAChC,IAAIA,SAAS,IAAI,IAAjB,EAAuB;QACrB,IAAA,CAAKD,qBAAL,GAA6B,CAAA,CAA7B;MACD,CAFD,MAEO;QACL,OAAO,IAAA,CAAKA,qBAAL,CAA2BC,SAA3B,CAAP;MACD;IACF;;;WASD,SAAA,kBAAA,CAAmBC,YAAnB,EAAiC;MAC/B,IAAID,SAAS,GAAGC,YAAY,CAACD,SAA7B;MACA,IAAIG,GAAG,GAAGF,YAAY,CAACE,GAAvB;MACA,IAAIG,oBAAoB,GAAG,IAAA,CAAKP,qBAAL,CAA2BC,SAA3B,CAA3B;MAEA,IAAIM,oBAAJ,EAA0B;QACxB,OAAOA,oBAAoB,CAACH,GAAD,CAA3B;MACD;IACF;;;WAeD,SAAA,uBAAA,CAAwBH,SAAxB,EAAmC;MACjC,OAAO,IAAA,CAAKD,qBAAL,CAA2BC,SAA3B,CAAP;IACD;;;;AAIH,eAAeF,uBAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  }\n\n}\n\nexport default EventSubscriptionVendor;"]},"metadata":{},"sourceType":"module"}