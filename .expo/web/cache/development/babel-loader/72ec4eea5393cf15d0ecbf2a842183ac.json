{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _EventEmitter = _interopRequireDefault(require(\"../../vendor/react-native/emitter/_EventEmitter\"));\nvar _canUseDom = _interopRequireDefault(require(\"../../modules/canUseDom\"));\nvar isPrefixed = _canUseDom.default && !document.hasOwnProperty(\"hidden\") && document.hasOwnProperty(\"webkitHidden\");\nvar EVENT_TYPES = [\"change\", \"memoryWarning\"];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? \"webkitvisibilitychange\" : \"visibilitychange\";\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? \"webkitVisibilityState\" : \"visibilityState\";\nvar AppStates = {\n  BACKGROUND: \"background\",\n  ACTIVE: \"active\"\n};\nvar changeEmitter = null;\nvar AppState = function () {\n  function AppState() {\n    _classCallCheck(this, AppState);\n  }\n  _createClass(AppState, null, [{\n    key: \"currentState\",\n    get: function get() {\n      if (!AppState.isAvailable) {\n        return AppStates.ACTIVE;\n      }\n      switch (document[VISIBILITY_STATE_PROPERTY]) {\n        case \"hidden\":\n        case \"prerender\":\n        case \"unloaded\":\n          return AppStates.BACKGROUND;\n        default:\n          return AppStates.ACTIVE;\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        (0, _invariant.default)(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n        if (type === \"change\") {\n          if (!changeEmitter) {\n            changeEmitter = new _EventEmitter.default();\n            document.addEventListener(VISIBILITY_CHANGE_EVENT, function () {\n              if (changeEmitter) {\n                changeEmitter.emit(\"change\", AppState.currentState);\n              }\n            }, false);\n          }\n          return changeEmitter.addListener(type, handler);\n        }\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + \"deprecated. Please instead use `remove()` on the subscription \" + \"returned by `AppState.addEventListener`.\");\n        (0, _invariant.default)(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n        if (type === \"change\" && changeEmitter) {\n          changeEmitter.removeListener(handler);\n        }\n      }\n    }\n  }]);\n  return AppState;\n}();\nexports.default = AppState;\nAppState.isAvailable = _canUseDom.default && document[VISIBILITY_STATE_PROPERTY];\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/exports/AppState/index.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","_invariant","_EventEmitter","_canUseDom","isPrefixed","document","hasOwnProperty","EVENT_TYPES","VISIBILITY_CHANGE_EVENT","VISIBILITY_STATE_PROPERTY","AppStates","BACKGROUND","ACTIVE","changeEmitter","AppState","isAvailable","type","handler","indexOf","addEventListener","emit","currentState","addListener","console","error","removeListener","module"],"mappings":"AAAA,YAAA;;AAAA;AAAA;AAEA,IAAIA,sBAAAA,GAAyBC,OAAAA,CAAQ,8CAAA,CAAA,CAAgDC,OAAO;AAE5FC,OAAAA,CAAQC,UAAU,GAAG,IAAI;AACzBD,OAAAA,CAAQD,OAAO,GAAG,KAAK,CAAA;AAEvB,IAAIG,UAAAA,GAAaL,sBAAAA,CAAuBC,OAAAA,CAAQ,oBAAA,CAAA,CAAA;AAEhD,IAAIK,aAAAA,GAAgBN,sBAAAA,CAAuBC,OAAAA,mDAAQ,CAAA;AAEnD,IAAIM,UAAAA,GAAaP,sBAAAA,CAAuBC,OAAAA,2BAAQ,CAAA;AAYhD,IAAIO,UAAAA,GAAaD,UAAAA,CAAWL,OAAO,IAAI,CAACO,QAAAA,CAASC,cAAc,CAAC,QAAA,CAAA,IAAaD,QAAAA,CAASC,cAAc,CAAC,cAAA,CAAA;AACrG,IAAIC,WAAAA,GAAc,CAAC,QAAA,EAAU,eAAA,CAAgB;AAC7C,IAAIC,uBAAAA,GAA0BJ,UAAAA,GAAa,wBAAA,GAA2B,kBAAkB;AACxF,IAAIK,yBAAAA,GAA4BL,UAAAA,GAAa,uBAAA,GAA0B,iBAAiB;AACxF,IAAIM,SAAAA,GAAY;EACdC,UAAAA,EAAY,YAAA;EACZC,MAAAA,EAAQ;AACV,CAAA;AACA,IAAIC,aAAAA,GAAgB,IAAI;AAAA,IAElBC,QAAAA;EAAAA;IAAAA;EAAAA;EAAAA;IAAAA;IAAAA,KACJ,eAA0B;MACxB,IAAI,CAACA,QAAAA,CAASC,WAAW,EAAE;QACzB,OAAOL,SAAAA,CAAUE,MAAM;MACzB;MAEA,QAAQP,QAAQ,CAACI,yBAAAA,CAA0B;QACzC,KAAK,QAAA;QACL,KAAK,WAAA;QACL,KAAK,UAAA;UACH,OAAOC,SAAAA,CAAUC,UAAU;QAE7B;UACE,OAAOD,SAAAA,CAAUE,MAAM;MAAA;IAE7B;EAAA;IAAA;IAAA,OAEA,0BAAwBI,IAAI,EAAEC,OAAO,EAAE;MACrC,IAAIH,QAAAA,CAASC,WAAW,EAAE;QACvB,CAAA,CAAA,EAAGd,UAAAA,CAAWH,OAAO,EAAES,WAAAA,CAAYW,OAAO,CAACF,IAAAA,CAAAA,KAAU,CAAC,CAAA,EAAG,4CAAA,EAA8CA,IAAAA,CAAAA;QAExG,IAAIA,IAAAA,KAAS,QAAA,EAAU;UACrB,IAAI,CAACH,aAAAA,EAAe;YAClBA,aAAAA,GAAgB,IAAIX,aAAAA,CAAcJ,OAAO,EAAA;YACzCO,QAAAA,CAASc,gBAAgB,CAACX,uBAAAA,EAAyB,YAAM;cACvD,IAAIK,aAAAA,EAAe;gBACjBA,aAAAA,CAAcO,IAAI,CAAC,QAAA,EAAUN,QAAAA,CAASO,YAAY,CAAA;cACpD;YACF,CAAA,EAAG,KAAK,CAAA;UACV;UAEA,OAAOR,aAAAA,CAAcS,WAAW,CAACN,IAAAA,EAAMC,OAAAA,CAAAA;QACzC;MACF;IACF;EAAA;IAAA;IAAA,OAEA,6BAA2BD,IAAI,EAAEC,OAAO,EAAE;MACxC,IAAIH,QAAAA,CAASC,WAAW,EAAE;QACxBQ,OAAAA,CAAQC,KAAK,CAAC,2BAAA,GAA8BR,IAAAA,GAAO,2BAAA,GAA8B,gEAAA,GAAmE,0CAAA,CAAA;QACnJ,CAAA,CAAA,EAAGf,UAAAA,CAAWH,OAAO,EAAES,WAAAA,CAAYW,OAAO,CAACF,IAAAA,CAAAA,KAAU,CAAC,CAAA,EAAG,mDAAA,EAAqDA,IAAAA,CAAAA;QAE/G,IAAIA,IAAAA,KAAS,QAAA,IAAYH,aAAAA,EAAe;UACtCA,aAAAA,CAAcY,cAAc,CAACR,OAAAA,CAAAA;QAC/B;MACF;IACF;EAAA;EAAA;AAAA;AAIFlB,OAAAA,CAAQD,OAAO,GAAGgB,QAAAA;AAClBA,QAAAA,CAASC,WAAW,GAAGZ,UAAAA,CAAWL,OAAO,IAAIO,QAAQ,CAACI,yBAAAA,CAA0B;AAChFiB,MAAAA,CAAO3B,OAAO,GAAGA,OAAAA,CAAQD,OAAO","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _EventEmitter = _interopRequireDefault(require(\"../../vendor/react-native/emitter/_EventEmitter\"));\n\nvar _canUseDom = _interopRequireDefault(require(\"../../modules/canUseDom\"));\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// Android 4.4 browser\nvar isPrefixed = _canUseDom.default && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\n\nclass AppState {\n  static get currentState() {\n    if (!AppState.isAvailable) {\n      return AppStates.ACTIVE;\n    }\n\n    switch (document[VISIBILITY_STATE_PROPERTY]) {\n      case 'hidden':\n      case 'prerender':\n      case 'unloaded':\n        return AppStates.BACKGROUND;\n\n      default:\n        return AppStates.ACTIVE;\n    }\n  }\n\n  static addEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      (0, _invariant.default)(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        if (!changeEmitter) {\n          changeEmitter = new _EventEmitter.default();\n          document.addEventListener(VISIBILITY_CHANGE_EVENT, () => {\n            if (changeEmitter) {\n              changeEmitter.emit('change', AppState.currentState);\n            }\n          }, false);\n        }\n\n        return changeEmitter.addListener(type, handler);\n      }\n    }\n  }\n\n  static removeEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n      (0, _invariant.default)(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (type === 'change' && changeEmitter) {\n        changeEmitter.removeListener(handler);\n      }\n    }\n  }\n\n}\n\nexports.default = AppState;\nAppState.isAvailable = _canUseDom.default && document[VISIBILITY_STATE_PROPERTY];\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}