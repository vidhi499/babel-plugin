{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from \"fbjs/lib/invariant\";\nimport EventEmitter from \"../../vendor/react-native/emitter/_EventEmitter\";\nimport canUseDOM from \"../../modules/canUseDom\";\nvar isPrefixed = canUseDOM && !document.hasOwnProperty(\"hidden\") && document.hasOwnProperty(\"webkitHidden\");\nvar EVENT_TYPES = [\"change\", \"memoryWarning\"];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? \"webkitvisibilitychange\" : \"visibilitychange\";\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? \"webkitVisibilityState\" : \"visibilityState\";\nvar AppStates = {\n  BACKGROUND: \"background\",\n  ACTIVE: \"active\"\n};\nvar changeEmitter = null;\nvar AppState = function () {\n  function AppState() {\n    _classCallCheck(this, AppState);\n  }\n  _createClass(AppState, null, [{\n    key: \"currentState\",\n    get: function get() {\n      if (!AppState.isAvailable) {\n        return AppStates.ACTIVE;\n      }\n      switch (document[VISIBILITY_STATE_PROPERTY]) {\n        case \"hidden\":\n        case \"prerender\":\n        case \"unloaded\":\n          return AppStates.BACKGROUND;\n        default:\n          return AppStates.ACTIVE;\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n        if (type === \"change\") {\n          if (!changeEmitter) {\n            changeEmitter = new EventEmitter();\n            document.addEventListener(VISIBILITY_CHANGE_EVENT, function () {\n              if (changeEmitter) {\n                changeEmitter.emit(\"change\", AppState.currentState);\n              }\n            }, false);\n          }\n          return changeEmitter.addListener(type, handler);\n        }\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + \"deprecated. Please instead use `remove()` on the subscription \" + \"returned by `AppState.addEventListener`.\");\n        invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n        if (type === \"change\" && changeEmitter) {\n          changeEmitter.removeListener(handler);\n        }\n      }\n    }\n  }]);\n  return AppState;\n}();\nexport { AppState as default };\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/AppState/index.js"],"names":["invariant","EventEmitter","canUseDOM","isPrefixed","document","hasOwnProperty","EVENT_TYPES","VISIBILITY_CHANGE_EVENT","VISIBILITY_STATE_PROPERTY","AppStates","BACKGROUND","ACTIVE","changeEmitter","AppState","isAvailable","type","handler","indexOf","addEventListener","emit","currentState","addListener","console","error","removeListener"],"mappings":";;AASA,OAAOA,SAAAA,MAAe,oBAAA;AACtB,OAAOC,YAAAA;AACP,OAAOC,SAAAA;AAEP,IAAIC,UAAAA,GAAaD,SAAAA,IAAa,CAACE,QAAAA,CAASC,cAAc,CAAC,QAAA,CAAA,IAAaD,QAAAA,CAASC,cAAc,CAAC,cAAA,CAAA;AAC5F,IAAIC,WAAAA,GAAc,CAAC,QAAA,EAAU,eAAA,CAAgB;AAC7C,IAAIC,uBAAAA,GAA0BJ,UAAAA,GAAa,wBAAA,GAA2B,kBAAkB;AACxF,IAAIK,yBAAAA,GAA4BL,UAAAA,GAAa,uBAAA,GAA0B,iBAAiB;AACxF,IAAIM,SAAAA,GAAY;EACdC,UAAAA,EAAY,YAAA;EACZC,MAAAA,EAAQ;AACV,CAAA;AACA,IAAIC,aAAAA,GAAgB,IAAI;AAAA,IACHC,QAAAA;EAAAA;IAAAA;EAAAA;EAAAA;IAAAA;IAAAA,KACnB,eAA0B;MACxB,IAAI,CAACA,QAAAA,CAASC,WAAW,EAAE;QACzB,OAAOL,SAAAA,CAAUE,MAAM;MACzB;MAEA,QAAQP,QAAQ,CAACI,yBAAAA,CAA0B;QACzC,KAAK,QAAA;QACL,KAAK,WAAA;QACL,KAAK,UAAA;UACH,OAAOC,SAAAA,CAAUC,UAAU;QAE7B;UACE,OAAOD,SAAAA,CAAUE,MAAM;MAAA;IAE7B;EAAA;IAAA;IAAA,OAEA,0BAAwBI,IAAI,EAAEC,OAAO,EAAE;MACrC,IAAIH,QAAAA,CAASC,WAAW,EAAE;QACxBd,SAAAA,CAAUM,WAAAA,CAAYW,OAAO,CAACF,IAAAA,CAAAA,KAAU,CAAC,CAAA,EAAG,4CAAA,EAA8CA,IAAAA,CAAAA;QAE1F,IAAIA,IAAAA,KAAS,QAAA,EAAU;UACrB,IAAI,CAACH,aAAAA,EAAe;YAClBA,aAAAA,GAAgB,IAAIX,YAAAA,EAAAA;YACpBG,QAAAA,CAASc,gBAAgB,CAACX,uBAAAA,EAAyB,YAAM;cACvD,IAAIK,aAAAA,EAAe;gBACjBA,aAAAA,CAAcO,IAAI,CAAC,QAAA,EAAUN,QAAAA,CAASO,YAAY,CAAA;cACpD;YACF,CAAA,EAAG,KAAK,CAAA;UACV;UAEA,OAAOR,aAAAA,CAAcS,WAAW,CAACN,IAAAA,EAAMC,OAAAA,CAAAA;QACzC;MACF;IACF;EAAA;IAAA;IAAA,OAEA,6BAA2BD,IAAI,EAAEC,OAAO,EAAE;MACxC,IAAIH,QAAAA,CAASC,WAAW,EAAE;QACxBQ,OAAAA,CAAQC,KAAK,CAAC,2BAAA,GAA8BR,IAAAA,GAAO,2BAAA,GAA8B,gEAAA,GAAmE,0CAAA,CAAA;QACpJf,SAAAA,CAAUM,WAAAA,CAAYW,OAAO,CAACF,IAAAA,CAAAA,KAAU,CAAC,CAAA,EAAG,mDAAA,EAAqDA,IAAAA,CAAAA;QAEjG,IAAIA,IAAAA,KAAS,QAAA,IAAYH,aAAAA,EAAe;UACtCA,aAAAA,CAAcY,cAAc,CAACR,OAAAA,CAAAA;QAC/B;MACF;IACF;EAAA;EAAA;AAAA;AA7CF,SAAqBH,QAAAA,IAAAA,OAAAA;AAgDrBA,QAAAA,CAASC,WAAW,GAAGZ,SAAAA,IAAaE,QAAQ,CAACI,yBAAAA,CAA0B","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport EventEmitter from '../../vendor/react-native/emitter/_EventEmitter';\nimport canUseDOM from '../../modules/canUseDom'; // Android 4.4 browser\n\nvar isPrefixed = canUseDOM && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\nexport default class AppState {\n  static get currentState() {\n    if (!AppState.isAvailable) {\n      return AppStates.ACTIVE;\n    }\n\n    switch (document[VISIBILITY_STATE_PROPERTY]) {\n      case 'hidden':\n      case 'prerender':\n      case 'unloaded':\n        return AppStates.BACKGROUND;\n\n      default:\n        return AppStates.ACTIVE;\n    }\n  }\n\n  static addEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        if (!changeEmitter) {\n          changeEmitter = new EventEmitter();\n          document.addEventListener(VISIBILITY_CHANGE_EVENT, () => {\n            if (changeEmitter) {\n              changeEmitter.emit('change', AppState.currentState);\n            }\n          }, false);\n        }\n\n        return changeEmitter.addListener(type, handler);\n      }\n    }\n  }\n\n  static removeEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (type === 'change' && changeEmitter) {\n        changeEmitter.removeListener(handler);\n      }\n    }\n  }\n\n}\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];"]},"metadata":{},"sourceType":"module"}