{"ast":null,"code":"import canUseDOM from \"../../modules/canUseDom\";\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === \"function\" ? window.matchMedia(\"(prefers-reduced-motion: reduce)\") : null;\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener(\"change\", fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener(\"change\", fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\nvar handlers = {};\nvar AccessibilityInfo = {\n  isScreenReaderEnabled: isScreenReaderEnabled,\n  isReduceMotionEnabled: isReduceMotionEnabled,\n  fetch: isScreenReaderEnabled,\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === \"reduceMotionChanged\") {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === \"reduceMotionChanged\") {\n      var listener = handlers[handler];\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n      removeChangeListener(listener);\n    }\n    return;\n  }\n};\nexport default AccessibilityInfo;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"names":["canUseDOM","isScreenReaderEnabled","Promise","resolve","reject","prefersReducedMotionMedia","window","matchMedia","isReduceMotionEnabled","matches","addChangeListener","fn","addEventListener","addListener","removeChangeListener","removeEventListener","removeListener","handlers","AccessibilityInfo","fetch","eventName","handler","listener","event","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement"],"mappings":"AAQA,OAAOA,SAAAA;AAEP,SAASC,qBAAAA,GAAwB;EAC/B,OAAO,IAAIC,OAAAA,CAAQ,UAACC,OAAAA,EAASC,MAAAA,EAAW;IACtCD,OAAAA,CAAQ,IAAI,CAAA;EACd,CAAA,CAAA;AACF;AAEA,IAAIE,yBAAAA,GAA4BL,SAAAA,IAAa,OAAOM,MAAAA,CAAOC,UAAU,KAAK,UAAA,GAAaD,MAAAA,CAAOC,UAAU,CAAC,kCAAA,CAAA,GAAsC,IAAI;AAEnJ,SAASC,qBAAAA,GAAwB;EAC/B,OAAO,IAAIN,OAAAA,CAAQ,UAACC,OAAAA,EAASC,MAAAA,EAAW;IACtCD,OAAAA,CAAQE,yBAAAA,GAA4BA,yBAAAA,CAA0BI,OAAO,GAAG,IAAI,CAAA;EAC9E,CAAA,CAAA;AACF;AAEA,SAASC,iBAAAA,CAAkBC,EAAE,EAAE;EAC7B,IAAIN,yBAAAA,IAA6B,IAAI,EAAE;IACrCA,yBAAAA,CAA0BO,gBAAgB,IAAI,IAAI,GAAGP,yBAAAA,CAA0BO,gBAAgB,CAAC,QAAA,EAAUD,EAAAA,CAAAA,GAAMN,yBAAAA,CAA0BQ,WAAW,CAACF,EAAAA,CAAG;EAC3J;AACF;AAEA,SAASG,oBAAAA,CAAqBH,EAAE,EAAE;EAChC,IAAIN,yBAAAA,IAA6B,IAAI,EAAE;IACrCA,yBAAAA,CAA0BU,mBAAmB,IAAI,IAAI,GAAGV,yBAAAA,CAA0BU,mBAAmB,CAAC,QAAA,EAAUJ,EAAAA,CAAAA,GAAMN,yBAAAA,CAA0BW,cAAc,CAACL,EAAAA,CAAG;EACpK;AACF;AAEA,IAAIM,QAAAA,GAAW,CAAC,CAAA;AAChB,IAAIC,iBAAAA,GAAoB;EAOtBjB,qBAAAA,EAAAA,qBAAAA;EAQAO,qBAAAA,EAAAA,qBAAAA;EAKAW,KAAAA,EAAOlB,qBAAAA;EAKPW,gBAAAA,EAAkB,SAASA,gBAAAA,CAAiBQ,SAAS,EAAEC,OAAO,EAAE;IAC9D,IAAID,SAAAA,KAAc,qBAAA,EAAuB;MACvC,IAAI,CAACf,yBAAAA,EAA2B;QAC9B;MACF;MAEA,IAAIiB,QAAAA,GAAWC,SAAXD,QAAAA,CAAWC,KAAAA,EAAS;QACtBF,OAAAA,CAAQE,KAAAA,CAAMd,OAAO,CAAA;MACvB,CAAA;MAEAC,iBAAAA,CAAkBY,QAAAA,CAAAA;MAClBL,QAAQ,CAACI,OAAAA,CAAQ,GAAGC,QAAAA;IACtB;IAEA,OAAO;MACLE,MAAAA,EAAQ;QAAA,OAAMN,iBAAAA,CAAkBH,mBAAmB,CAACK,SAAAA,EAAWC,OAAAA,CAAAA;MAAAA;IACjE,CAAA;EACF,CAAA;EAKAI,qBAAAA,EAAuB,SAASA,qBAAAA,CAAsBC,QAAQ,EAAE,CAAC,CAAA;EAKjEC,wBAAAA,EAA0B,SAASA,wBAAAA,CAAyBC,YAAY,EAAE,CAAC,CAAA;EAK3Eb,mBAAAA,EAAqB,SAASA,mBAAAA,CAAoBK,SAAS,EAAEC,OAAO,EAAE;IACpE,IAAID,SAAAA,KAAc,qBAAA,EAAuB;MACvC,IAAIE,QAAAA,GAAWL,QAAQ,CAACI,OAAAA,CAAQ;MAEhC,IAAI,CAACC,QAAAA,IAAY,CAACjB,yBAAAA,EAA2B;QAC3C;MACF;MAEAS,oBAAAA,CAAqBQ,QAAAA,CAAAA;IACvB;IAEA;EACF;AACF,CAAA;AACA,eAAeJ,iBAAAA","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport canUseDOM from '../../modules/canUseDom';\n\nfunction isScreenReaderEnabled() {\n  return new Promise((resolve, reject) => {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise((resolve, reject) => {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled,\n\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = event => {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: () => AccessibilityInfo.removeEventListener(eventName, handler)\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}