{"ast":null,"code":"import _classCallCheck from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/createClass.js\";\nimport invariant from 'fbjs/lib/invariant';\nimport EventEmitter from \"../../vendor/react-native/emitter/_EventEmitter\";\nimport canUseDOM from \"../../modules/canUseDom\";\nvar isPrefixed = canUseDOM && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\nvar AppState = function () {\n  function AppState() {\n    _classCallCheck(this, AppState);\n  }\n  _createClass(AppState, null, [{\n    key: \"currentState\",\n    get: function get() {\n      if (!AppState.isAvailable) {\n        return AppStates.ACTIVE;\n      }\n      switch (document[VISIBILITY_STATE_PROPERTY]) {\n        case 'hidden':\n        case 'prerender':\n        case 'unloaded':\n          return AppStates.BACKGROUND;\n        default:\n          return AppStates.ACTIVE;\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n        if (type === 'change') {\n          if (!changeEmitter) {\n            changeEmitter = new EventEmitter();\n            document.addEventListener(VISIBILITY_CHANGE_EVENT, function () {\n              if (changeEmitter) {\n                changeEmitter.emit('change', AppState.currentState);\n              }\n            }, false);\n          }\n          return changeEmitter.addListener(type, handler);\n        }\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n        invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n        if (type === 'change' && changeEmitter) {\n          changeEmitter.removeListener(handler);\n        }\n      }\n    }\n  }]);\n  return AppState;\n}();\nexport { AppState as default };\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/AppState/index.js"],"names":["invariant","EventEmitter","canUseDOM","isPrefixed","document","hasOwnProperty","EVENT_TYPES","VISIBILITY_CHANGE_EVENT","VISIBILITY_STATE_PROPERTY","AppStates","BACKGROUND","ACTIVE","changeEmitter","AppState","isAvailable","type","handler","indexOf","addEventListener","emit","currentState","addListener","console","error","removeListener"],"mappings":";;AASA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP;AACA,OAAOC,SAAP;AAEA,IAAIC,UAAU,GAAGD,SAAS,IAAI,CAACE,QAAQ,CAACC,cAATD,CAAwB,QAAxBA,CAAdF,IAAmDE,QAAQ,CAACC,cAATD,CAAwB,cAAxBA,CAApE;AACA,IAAIE,WAAW,GAAG,CAAC,QAAD,EAAW,eAAX,CAAlB;AACA,IAAIC,uBAAuB,GAAGJ,UAAU,GAAG,wBAAH,GAA8B,kBAAtE;AACA,IAAIK,yBAAyB,GAAGL,UAAU,GAAG,uBAAH,GAA6B,iBAAvE;AACA,IAAIM,SAAS,GAAG;EACdC,UAAU,EAAE,YADE;EAEdC,MAAM,EAAE;AAFM,CAAhB;AAIA,IAAIC,aAAa,GAAG,IAApB;AACqBC,IAAAA,Q;;;;;;SACnB,SAAA,GAAA,GAA0B;MACxB,IAAI,CAACA,QAAQ,CAACC,WAAd,EAA2B;QACzB,OAAOL,SAAS,CAACE,MAAjB;MACD;MAED,QAAQP,QAAQ,CAACI,yBAAD,CAAhB;QACE,KAAK,QAAL;QACA,KAAK,WAAL;QACA,KAAK,UAAL;UACE,OAAOC,SAAS,CAACC,UAAjB;QAEF;UACE,OAAOD,SAAS,CAACE,MAAjB;MAPJ;IASD;;;WAED,SAAA,gBAAA,CAAwBI,IAAxB,EAA8BC,OAA9B,EAAuC;MACrC,IAAIH,QAAQ,CAACC,WAAb,EAA0B;QACxBd,SAAS,CAACM,WAAW,CAACW,OAAZX,CAAoBS,IAApBT,CAAAA,KAA8B,CAAC,CAAhC,EAAmC,4CAAnC,EAAiFS,IAAjF,CAATf;QAEA,IAAIe,IAAI,KAAK,QAAb,EAAuB;UACrB,IAAI,CAACH,aAAL,EAAoB;YAClBA,aAAa,GAAG,IAAIX,YAAJ,EAAhBW;YACAR,QAAQ,CAACc,gBAATd,CAA0BG,uBAA1BH,EAAmD,YAAM;cACvD,IAAIQ,aAAJ,EAAmB;gBACjBA,aAAa,CAACO,IAAdP,CAAmB,QAAnBA,EAA6BC,QAAQ,CAACO,YAAtCR,CAAAA;cACD;YACF,CAJDR,EAIG,KAJHA,CAAAA;UAKD;UAED,OAAOQ,aAAa,CAACS,WAAdT,CAA0BG,IAA1BH,EAAgCI,OAAhCJ,CAAP;QACD;MACF;IACF;;;WAED,SAAA,mBAAA,CAA2BG,IAA3B,EAAiCC,OAAjC,EAA0C;MACxC,IAAIH,QAAQ,CAACC,WAAb,EAA0B;QACxBQ,OAAO,CAACC,KAARD,CAAc,2BAAA,GAA8BP,IAA9B,GAAqC,2BAArC,GAAmE,gEAAnE,GAAsI,0CAApJO,CAAAA;QACAtB,SAAS,CAACM,WAAW,CAACW,OAAZX,CAAoBS,IAApBT,CAAAA,KAA8B,CAAC,CAAhC,EAAmC,mDAAnC,EAAwFS,IAAxF,CAATf;QAEA,IAAIe,IAAI,KAAK,QAATA,IAAqBH,aAAzB,EAAwC;UACtCA,aAAa,CAACY,cAAdZ,CAA6BI,OAA7BJ,CAAAA;QACD;MACF;IACF;;;;SA7CkBC,Q;AAgDrBA,QAAQ,CAACC,WAATD,GAAuBX,SAAS,IAAIE,QAAQ,CAACI,yBAAD,CAA5CK","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport EventEmitter from '../../vendor/react-native/emitter/_EventEmitter';\nimport canUseDOM from '../../modules/canUseDom'; // Android 4.4 browser\n\nvar isPrefixed = canUseDOM && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\nexport default class AppState {\n  static get currentState() {\n    if (!AppState.isAvailable) {\n      return AppStates.ACTIVE;\n    }\n\n    switch (document[VISIBILITY_STATE_PROPERTY]) {\n      case 'hidden':\n      case 'prerender':\n      case 'unloaded':\n        return AppStates.BACKGROUND;\n\n      default:\n        return AppStates.ACTIVE;\n    }\n  }\n\n  static addEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        if (!changeEmitter) {\n          changeEmitter = new EventEmitter();\n          document.addEventListener(VISIBILITY_CHANGE_EVENT, () => {\n            if (changeEmitter) {\n              changeEmitter.emit('change', AppState.currentState);\n            }\n          }, false);\n        }\n\n        return changeEmitter.addListener(type, handler);\n      }\n    }\n  }\n\n  static removeEventListener(type, handler) {\n    if (AppState.isAvailable) {\n      console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n      invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (type === 'change' && changeEmitter) {\n        changeEmitter.removeListener(handler);\n      }\n    }\n  }\n\n}\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];"]},"metadata":{},"sourceType":"module"}