{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nvar AnimatedTransform = function (_AnimatedWithChildren) {\n  _inherits(AnimatedTransform, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedTransform);\n  function AnimatedTransform(transforms) {\n    var _this;\n    _classCallCheck(this, AnimatedTransform);\n    _this = _super.call(this);\n    _this._transforms = transforms;\n    return _this;\n  }\n  _createClass(AnimatedTransform, [{\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            value.__makeNative();\n          }\n        }\n      });\n      _get(_getPrototypeOf(AnimatedTransform.prototype), \"__makeNative\", this).call(this);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      return this._transforms.map(function (transform) {\n        var result = {};\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getValue();\n          } else {\n            result[key] = value;\n          }\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"__getAnimatedValue\",\n    value: function __getAnimatedValue() {\n      return this._transforms.map(function (transform) {\n        var result = {};\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getAnimatedValue();\n          } else {\n            result[key] = value;\n          }\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      var _this2 = this;\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            value.__addChild(_this2);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      var _this3 = this;\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            value.__removeChild(_this3);\n          }\n        }\n      });\n      _get(_getPrototypeOf(AnimatedTransform.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      var transConfigs = [];\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            transConfigs.push({\n              type: \"animated\",\n              property: key,\n              nodeTag: value.__getNativeTag()\n            });\n          } else {\n            transConfigs.push({\n              type: \"static\",\n              property: key,\n              value: NativeAnimatedHelper.transformDataType(value)\n            });\n          }\n        }\n      });\n      NativeAnimatedHelper.validateTransform(transConfigs);\n      return {\n        type: \"transform\",\n        transforms: transConfigs\n      };\n    }\n  }]);\n  return AnimatedTransform;\n}(AnimatedWithChildren);\nexport default AnimatedTransform;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedTransform.js"],"names":["AnimatedNode","AnimatedWithChildren","NativeAnimatedHelper","AnimatedTransform","constructor","transforms","_transforms","__makeNative","forEach","transform","key","value","__getValue","map","result","__getAnimatedValue","__attach","__addChild","__detach","__removeChild","__getNativeConfig","transConfigs","push","type","property","nodeTag","__getNativeTag","transformDataType","validateTransform"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\n\nclass AnimatedTransform extends AnimatedWithChildren {\n  constructor(transforms) {\n    super();\n    this._transforms = transforms;\n  }\n\n  __makeNative() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n    });\n\n    super.__makeNative();\n  }\n\n  __getValue() {\n    return this._transforms.map(transform => {\n      var result = {};\n\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        } else {\n          result[key] = value;\n        }\n      }\n\n      return result;\n    });\n  }\n\n  __getAnimatedValue() {\n    return this._transforms.map(transform => {\n      var result = {};\n\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getAnimatedValue();\n        } else {\n          // All transform components needed to recompose matrix\n          result[key] = value;\n        }\n      }\n\n      return result;\n    });\n  }\n\n  __attach() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    });\n  }\n\n  __detach() {\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n    });\n\n    super.__detach();\n  }\n\n  __getNativeConfig() {\n    var transConfigs = [];\n\n    this._transforms.forEach(transform => {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          transConfigs.push({\n            type: 'animated',\n            property: key,\n            nodeTag: value.__getNativeTag()\n          });\n        } else {\n          transConfigs.push({\n            type: 'static',\n            property: key,\n            value: NativeAnimatedHelper.transformDataType(value)\n          });\n        }\n      }\n    });\n\n    NativeAnimatedHelper.validateTransform(transConfigs);\n    return {\n      type: 'transform',\n      transforms: transConfigs\n    };\n  }\n\n}\n\nexport default AnimatedTransform;"]},"metadata":{},"sourceType":"module"}