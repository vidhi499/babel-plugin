{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport AnimatedInterpolation from \"./AnimatedInterpolation\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nvar AnimatedDiffClamp = function (_AnimatedWithChildren) {\n  _inherits(AnimatedDiffClamp, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedDiffClamp);\n  function AnimatedDiffClamp(a, min, max) {\n    var _this;\n    _classCallCheck(this, AnimatedDiffClamp);\n    _this = _super.call(this);\n    _this._a = a;\n    _this._min = min;\n    _this._max = max;\n    _this._value = _this._lastValue = _this._a.__getValue();\n    return _this;\n  }\n  _createClass(AnimatedDiffClamp, [{\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      this._a.__makeNative();\n      _get(_getPrototypeOf(AnimatedDiffClamp.prototype), \"__makeNative\", this).call(this);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var value = this._a.__getValue();\n      var diff = value - this._lastValue;\n      this._lastValue = value;\n      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);\n      return this._value;\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._a.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._a.__removeChild(this);\n      _get(_getPrototypeOf(AnimatedDiffClamp.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      return {\n        type: 'diffclamp',\n        input: this._a.__getNativeTag(),\n        min: this._min,\n        max: this._max\n      };\n    }\n  }]);\n  return AnimatedDiffClamp;\n}(AnimatedWithChildren);\nexport default AnimatedDiffClamp;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedDiffClamp.js"],"names":["AnimatedInterpolation","AnimatedNode","AnimatedWithChildren","AnimatedDiffClamp","a","min","max","_a","_min","_max","_value","_lastValue","__getValue","__makeNative","config","value","diff","Math","__addChild","__removeChild","type","input","__getNativeTag"],"mappings":"AASA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,qBAAP;AACA,OAAOC,YAAP;AACA,OAAOC,oBAAP;AAEMC,IAAAA,iB;;;EACJ,SAAA,iBAAA,CAAYC,CAAZ,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;IAAA,IAAA,KAAA;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;IACvB,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,KAAA,CAAKC,EAAL,GAAUH,CAAV;IACA,KAAA,CAAKI,IAAL,GAAYH,GAAZ;IACA,KAAA,CAAKI,IAAL,GAAYH,GAAZ;IACA,KAAA,CAAKI,MAAL,GAAc,KAAA,CAAKC,UAAL,GAAkB,KAAA,CAAKJ,EAAL,CAAQK,UAAR,EAAhC;IALuB,OAAA,KAAA;EAMxB;;;WAED,SAAA,YAAA,GAAe;MACb,IAAA,CAAKL,EAAL,CAAQM,YAAR,EAAA;MAEA,IAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,cAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACD;;;WAED,SAAA,WAAA,CAAYC,MAAZ,EAAoB;MAClB,OAAO,IAAId,qBAAJ,CAA0B,IAA1B,EAAgCc,MAAhC,CAAP;IACD;;;WAED,SAAA,UAAA,GAAa;MACX,IAAIC,KAAK,GAAG,IAAA,CAAKR,EAAL,CAAQK,UAAR,EAAZ;MAEA,IAAII,IAAI,GAAGD,KAAK,GAAG,IAAA,CAAKJ,UAAxB;MACA,IAAA,CAAKA,UAAL,GAAkBI,KAAlB;MACA,IAAA,CAAKL,MAAL,GAAcO,IAAI,CAACZ,GAALY,CAASA,IAAI,CAACX,GAALW,CAAS,IAAA,CAAKP,MAAL,GAAcM,IAAvBC,EAA6B,IAAA,CAAKT,IAAlCS,CAATA,EAAkD,IAAA,CAAKR,IAAvDQ,CAAd;MACA,OAAO,IAAA,CAAKP,MAAZ;IACD;;;WAED,SAAA,QAAA,GAAW;MACT,IAAA,CAAKH,EAAL,CAAQW,UAAR,CAAmB,IAAnB,CAAA;IACD;;;WAED,SAAA,QAAA,GAAW;MACT,IAAA,CAAKX,EAAL,CAAQY,aAAR,CAAsB,IAAtB,CAAA;MAEA,IAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACD;;;WAED,SAAA,iBAAA,GAAoB;MAClB,OAAO;QACLC,IAAI,EAAE,WADD;QAELC,KAAK,EAAE,IAAA,CAAKd,EAAL,CAAQe,cAAR,EAFF;QAGLjB,GAAG,EAAE,IAAA,CAAKG,IAHL;QAILF,GAAG,EAAE,IAAA,CAAKG;MAJL,CAAP;IAMD;;;EA7C6BP,oB;AAiDhC,eAAeC,iBAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\n\nclass AnimatedDiffClamp extends AnimatedWithChildren {\n  constructor(a, min, max) {\n    super();\n    this._a = a;\n    this._min = min;\n    this._max = max;\n    this._value = this._lastValue = this._a.__getValue();\n  }\n\n  __makeNative() {\n    this._a.__makeNative();\n\n    super.__makeNative();\n  }\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __getValue() {\n    var value = this._a.__getValue();\n\n    var diff = value - this._lastValue;\n    this._lastValue = value;\n    this._value = Math.min(Math.max(this._value + diff, this._min), this._max);\n    return this._value;\n  }\n\n  __attach() {\n    this._a.__addChild(this);\n  }\n\n  __detach() {\n    this._a.__removeChild(this);\n\n    super.__detach();\n  }\n\n  __getNativeConfig() {\n    return {\n      type: 'diffclamp',\n      input: this._a.__getNativeTag(),\n      min: this._min,\n      max: this._max\n    };\n  }\n\n}\n\nexport default AnimatedDiffClamp;"]},"metadata":{},"sourceType":"module"}