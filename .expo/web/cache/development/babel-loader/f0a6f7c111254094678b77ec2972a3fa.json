{"ast":null,"code":"import useLayoutEffect from \"../useLayoutEffect\";\nimport UIManager from \"../../exports/UIManager\";\nimport canUseDOM from \"../canUseDom\";\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n          if (typeof onLayout === 'function') {\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (true && true) {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n  return resizeObserver;\n}\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n  useLayoutEffect(function () {\n    var node = ref.current;\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/useElementLayout/index.js"],"names":["useLayoutEffect","UIManager","canUseDOM","DOM_LAYOUT_HANDLER_NAME","didWarn","resizeObserver","getResizeObserver","window","ResizeObserver","entries","forEach","node","entry","target","onLayout","measure","x","y","width","height","left","top","event","nativeEvent","layout","timeStamp","Date","now","Object","defineProperty","enumerable","get","console","warn","useElementLayout","ref","observer","current","observe","unobserve"],"mappings":"AAQA,OAAOA,eAAP;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,IAAIC,uBAAuB,GAAG,sBAA9B;AACA,IAAIC,OAAO,GAAG,CAACF,SAAf;AACA,IAAIG,cAAc,GAAG,IAArB;AAEA,SAASC,iBAAT,GAA6B;EAC3B,IAAIJ,SAAS,IAAI,OAAOK,MAAM,CAACC,cAAd,KAAiC,WAAlD,EAA+D;IAC7D,IAAIH,cAAc,IAAI,IAAtB,EAA4B;MAC1BA,cAAc,GAAG,IAAIE,MAAM,CAACC,cAAX,CAA0B,UAAUC,OAAV,EAAmB;QAC5DA,OAAO,CAACC,OAARD,CAAgB,UAAA,KAAK,EAAI;UACvB,IAAIE,IAAI,GAAGC,KAAK,CAACC,MAAjB;UACA,IAAIC,QAAQ,GAAGH,IAAI,CAACR,uBAAD,CAAnB;UAEA,IAAI,OAAOW,QAAP,KAAoB,UAAxB,EAAoC;YAGlCb,SAAS,CAACc,OAAVd,CAAkBU,IAAlBV,EAAwB,UAACe,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,GAA5B,EAAoC;cAC1D,IAAIC,KAAK,GAAG;gBAEVC,WAAW,EAAE;kBACXC,MAAM,EAAE;oBACNR,CAAC,EAADA,CADM;oBAENC,CAAC,EAADA,CAFM;oBAGNC,KAAK,EAALA,KAHM;oBAINC,MAAM,EAANA,MAJM;oBAKNC,IAAI,EAAJA,IALM;oBAMNC,GAAG,EAAHA;kBANM;gBADG,CAFH;gBAYVI,SAAS,EAAEC,IAAI,CAACC,GAALD;cAZD,CAAZ;cAcAE,MAAM,CAACC,cAAPD,CAAsBN,KAAK,CAACC,WAA5BK,EAAyC,QAAzCA,EAAmD;gBACjDE,UAAU,EAAE,IADqC;gBAEjDC,GAAG,EAAE,SAAA,GAAA,GAAA;kBAAA,OAAMnB,KAAK,CAACC,MAAZ;gBAAA;cAF4C,CAAnDe,CAAAA;cAIAd,QAAQ,CAACQ,KAAD,CAARR;YACD,CApBDb,CAAAA;UAqBD;QACF,CA7BDQ,CAAAA;MA8BD,CA/BgB,CAAjBJ;IAgCD;EACF,CAnCD,MAmCO,IAAI,CAACD,OAAL,EAAc;IACnB,IAAI,IAAA,IAAA,IAAJ,EAA8E;MAC5E4B,OAAO,CAACC,IAARD,CAAa,4EAAA,GAA+E,uFAA5FA,CAAAA;MACA5B,OAAO,GAAG,IAAVA;IACD;EACF;EAED,OAAOC,cAAP;AACD;AAED,eAAe,SAAS6B,gBAAT,CAA0BC,GAA1B,EAA+BrB,QAA/B,EAAyC;EACtD,IAAIsB,QAAQ,GAAG9B,iBAAiB,EAAhC;EACAN,eAAe,CAAC,YAAM;IACpB,IAAIW,IAAI,GAAGwB,GAAG,CAACE,OAAf;IAEA,IAAI1B,IAAI,IAAI,IAAZ,EAAkB;MAChBA,IAAI,CAACR,uBAAD,CAAJQ,GAAgCG,QAAhCH;IACD;EACF,CANc,EAMZ,CAACwB,GAAD,EAAMrB,QAAN,CANY,CAAfd;EASAA,eAAe,CAAC,YAAM;IACpB,IAAIW,IAAI,GAAGwB,GAAG,CAACE,OAAf;IAEA,IAAI1B,IAAI,IAAI,IAARA,IAAgByB,QAAQ,IAAI,IAAhC,EAAsC;MACpC,IAAI,OAAOzB,IAAI,CAACR,uBAAD,CAAX,KAAyC,UAA7C,EAAyD;QACvDiC,QAAQ,CAACE,OAATF,CAAiBzB,IAAjByB,CAAAA;MACD,CAFD,MAEO;QACLA,QAAQ,CAACG,SAATH,CAAmBzB,IAAnByB,CAAAA;MACD;IACF;IAED,OAAO,YAAM;MACX,IAAIzB,IAAI,IAAI,IAARA,IAAgByB,QAAQ,IAAI,IAAhC,EAAsC;QACpCA,QAAQ,CAACG,SAATH,CAAmBzB,IAAnByB,CAAAA;MACD;IACF,CAJD;EAKD,CAhBc,EAgBZ,CAACD,GAAD,EAAMC,QAAN,CAhBY,CAAfpC;AAiBD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport useLayoutEffect from '../useLayoutEffect';\nimport UIManager from '../../exports/UIManager';\nimport canUseDOM from '../canUseDom';\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(entry => {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            // We still need to measure the view because browsers don't yet provide\n            // border-box dimensions in the entry\n            UIManager.measure(node, (x, y, width, height, left, top) => {\n              var event = {\n                // $FlowFixMe\n                nativeEvent: {\n                  layout: {\n                    x,\n                    y,\n                    width,\n                    height,\n                    left,\n                    top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: () => entry.target\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(() => {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]); // Observing is done in a separate effect to avoid this effect running\n  // when 'onLayout' changes.\n\n  useLayoutEffect(() => {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return () => {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}"]},"metadata":{},"sourceType":"module"}