{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _createElement = _interopRequireDefault(require(\"../createElement\"));\nvar forwardedProps = _interopRequireWildcard(require(\"../../modules/forwardedProps\"));\nvar _pick = _interopRequireDefault(require(\"../../modules/pick\"));\nvar _useElementLayout = _interopRequireDefault(require(\"../../modules/useElementLayout\"));\nvar _useLayoutEffect = _interopRequireDefault(require(\"../../modules/useLayoutEffect\"));\nvar _useMergeRefs = _interopRequireDefault(require(\"../../modules/useMergeRefs\"));\nvar _usePlatformMethods = _interopRequireDefault(require(\"../../modules/usePlatformMethods\"));\nvar _useResponderEvents = _interopRequireDefault(require(\"../../modules/useResponderEvents\"));\nvar _useLocale = require(\"../../modules/useLocale\");\nvar _StyleSheet = _interopRequireDefault(require(\"../StyleSheet\"));\nvar _TextInputState = _interopRequireDefault(require(\"../../modules/TextInputState\"));\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n    selectionStart = node.selectionStart;\n  var start = selection.start,\n    end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n      end = selection.end;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\nvar pickProps = function pickProps(props) {\n  return (0, _pick.default)(props, forwardPropsList);\n};\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\nvar focusTimeout = null;\nvar TextInput = React.forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n    autoCapitalize = _props$autoCapitalize === void 0 ? \"sentences\" : _props$autoCapitalize,\n    autoComplete = props.autoComplete,\n    autoCompleteType = props.autoCompleteType,\n    _props$autoCorrect = props.autoCorrect,\n    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n    blurOnSubmit = props.blurOnSubmit,\n    clearTextOnFocus = props.clearTextOnFocus,\n    dir = props.dir,\n    _props$editable = props.editable,\n    editable = _props$editable === void 0 ? true : _props$editable,\n    _props$keyboardType = props.keyboardType,\n    keyboardType = _props$keyboardType === void 0 ? \"default\" : _props$keyboardType,\n    _props$multiline = props.multiline,\n    multiline = _props$multiline === void 0 ? false : _props$multiline,\n    _props$numberOfLines = props.numberOfLines,\n    numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onChangeText = props.onChangeText,\n    onContentSizeChange = props.onContentSizeChange,\n    onFocus = props.onFocus,\n    onKeyPress = props.onKeyPress,\n    onLayout = props.onLayout,\n    onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n    onResponderEnd = props.onResponderEnd,\n    onResponderGrant = props.onResponderGrant,\n    onResponderMove = props.onResponderMove,\n    onResponderReject = props.onResponderReject,\n    onResponderRelease = props.onResponderRelease,\n    onResponderStart = props.onResponderStart,\n    onResponderTerminate = props.onResponderTerminate,\n    onResponderTerminationRequest = props.onResponderTerminationRequest,\n    onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n    onSelectionChange = props.onSelectionChange,\n    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder = props.onStartShouldSetResponder,\n    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n    onSubmitEditing = props.onSubmitEditing,\n    placeholderTextColor = props.placeholderTextColor,\n    returnKeyType = props.returnKeyType,\n    _props$secureTextEntr = props.secureTextEntry,\n    secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n    selection = props.selection,\n    selectTextOnFocus = props.selectTextOnFocus,\n    spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n  switch (keyboardType) {\n    case \"email-address\":\n      type = \"email\";\n      break;\n    case \"number-pad\":\n    case \"numeric\":\n      inputMode = \"numeric\";\n      break;\n    case \"decimal-pad\":\n      inputMode = \"decimal\";\n      break;\n    case \"phone-pad\":\n      type = \"tel\";\n      break;\n    case \"search\":\n    case \"web-search\":\n      type = \"search\";\n      break;\n    case \"url\":\n      type = \"url\";\n      break;\n    default:\n      type = \"text\";\n  }\n  if (secureTextEntry) {\n    type = \"password\";\n  }\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(function (hostNode) {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = \"\";\n          }\n        };\n        hostNode.isFocused = function () {\n          return hostNode != null && _TextInputState.default.currentlyFocusedField() === hostNode;\n        };\n        handleContentSizeChange(hostNode);\n      }\n    };\n  }, [handleContentSizeChange]);\n  function handleBlur(e) {\n    _TextInputState.default._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n  function handleFocus(e) {\n    var hostNode = e.target;\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n    if (hostNode != null) {\n      _TextInputState.default._currentlyFocusedNode = hostNode;\n      if (clearTextOnFocus) {\n        hostNode.value = \"\";\n      }\n      if (selectTextOnFocus) {\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n        focusTimeout = setTimeout(function () {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n    if (e.key === \"Enter\" && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(function () {\n          return hostNode.blur();\n        }, 0);\n      }\n    }\n  }\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n          selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e1) {}\n    }\n  }\n  (0, _useLayoutEffect.default)(function () {\n    var node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      _TextInputState.default._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? \"textarea\" : \"input\";\n  (0, _useElementLayout.default)(hostRef, onLayout);\n  (0, _useResponderEvents.default)(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var _useLocaleContext = (0, _useLocale.useLocaleContext)(),\n    contextDirection = _useLocaleContext.direction;\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || \"on\";\n  supportedProps.autoCorrect = autoCorrect ? \"on\" : \"off\";\n  supportedProps.dir = dir !== undefined ? dir : \"auto\";\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.inputMode = inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    \"--placeholderTextColor\": placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = (0, _usePlatformMethods.default)(supportedProps);\n  var setRef = (0, _useMergeRefs.default)(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? (0, _useLocale.getLocaleDirection)(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = (0, _createElement.default)(component, supportedProps, {\n    writingDirection: writingDirection\n  });\n  return element;\n});\nTextInput.displayName = \"TextInput\";\nTextInput.State = _TextInputState.default;\nvar styles = _StyleSheet.default.create({\n  textinput$raw: {\n    MozAppearance: \"textfield\",\n    WebkitAppearance: \"none\",\n    backgroundColor: \"transparent\",\n    border: \"0 solid black\",\n    borderRadius: 0,\n    boxSizing: \"border-box\",\n    font: \"14px System\",\n    margin: 0,\n    padding: 0,\n    resize: \"none\"\n  },\n  placeholder: {\n    placeholderTextColor: \"var(--placeholderTextColor)\"\n  }\n});\nvar _default = TextInput;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/exports/TextInput/index.js"],"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","React","_createElement","forwardedProps","_pick","_useElementLayout","_useLayoutEffect","_useMergeRefs","_usePlatformMethods","_useResponderEvents","_useLocale","_StyleSheet","_TextInputState","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setSelectionRange","e","forwardPropsList","Object","assign","defaultProps","accessibilityProps","clickProps","focusProps","keyboardProps","mouseProps","touchProps","styleProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","value","type","pickProps","props","isEventComposing","nativeEvent","isComposing","keyCode","focusTimeout","TextInput","forwardRef","forwardedRef","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","inputMode","dimensions","useRef","height","width","hostRef","handleContentSizeChange","useCallback","hostNode","newHeight","scrollHeight","newWidth","scrollWidth","current","contentSize","imperativeRef","useMemo","clear","isFocused","currentlyFocusedField","handleBlur","_currentlyFocusedNode","text","target","handleChange","handleFocus","clearTimeout","setTimeout","select","handleKeyDown","stopPropagation","blurOnSubmitDefault","shouldBlurOnSubmit","key","shiftKey","isDefaultPrevented","preventDefault","blur","handleSelectionChange","document","activeElement","component","_useLocaleContext","useLocaleContext","contextDirection","direction","supportedProps","undefined","enterKeyHint","onKeyDown","onSelect","style","styles","textinput$raw","platformMethodsRef","setRef","ref","langDirection","getLocaleDirection","componentDirection","writingDirection","element","displayName","State","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createElement = _interopRequireDefault(require(\"../createElement\"));\n\nvar forwardedProps = _interopRequireWildcard(require(\"../../modules/forwardedProps\"));\n\nvar _pick = _interopRequireDefault(require(\"../../modules/pick\"));\n\nvar _useElementLayout = _interopRequireDefault(require(\"../../modules/useElementLayout\"));\n\nvar _useLayoutEffect = _interopRequireDefault(require(\"../../modules/useLayoutEffect\"));\n\nvar _useMergeRefs = _interopRequireDefault(require(\"../../modules/useMergeRefs\"));\n\nvar _usePlatformMethods = _interopRequireDefault(require(\"../../modules/usePlatformMethods\"));\n\nvar _useResponderEvents = _interopRequireDefault(require(\"../../modules/useResponderEvents\"));\n\nvar _useLocale = require(\"../../modules/useLocale\");\n\nvar _StyleSheet = _interopRequireDefault(require(\"../StyleSheet\"));\n\nvar _TextInputState = _interopRequireDefault(require(\"../../modules/TextInputState\"));\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = props => (0, _pick.default)(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n\n      hostNode.isFocused = function () {\n        return hostNode != null && _TextInputState.default.currentlyFocusedField() === hostNode;\n      };\n\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    _TextInputState.default._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      _TextInputState.default._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target; // Prevent key events bubbling (see #612)\n\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  (0, _useLayoutEffect.default)(() => {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      _TextInputState.default._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  (0, _useElementLayout.default)(hostRef, onLayout);\n  (0, _useResponderEvents.default)(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n\n  var _useLocaleContext = (0, _useLocale.useLocaleContext)(),\n      contextDirection = _useLocaleContext.direction;\n\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off'; // 'auto' by default allows browsers to infer writing direction\n\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.inputMode = inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = (0, _usePlatformMethods.default)(supportedProps);\n  var setRef = (0, _useMergeRefs.default)(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? (0, _useLocale.getLocaleDirection)(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = (0, _createElement.default)(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput'; // $FlowFixMe\n\nTextInput.State = _TextInputState.default;\n\nvar styles = _StyleSheet.default.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\n\nvar _default = TextInput;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}