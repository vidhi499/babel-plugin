{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { forwardRef } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"../primitives/Text\";\nimport View from \"../primitives/View\";\nfunction createView() {\n  var nativeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return forwardRef(function (props, ref) {\n    return React.createElement(View, _objectSpread(_objectSpread(_objectSpread({}, nativeProps), props), {}, {\n      ref: ref\n    }));\n  });\n}\nexport var UL = createView(Platform.select({\n  web: {\n    accessibilityRole: \"list\"\n  }\n}));\nfunction isTextProps(props) {\n  return typeof props.children === \"string\";\n}\nexport var LI = forwardRef(function (props, ref) {\n  if (isTextProps(props)) {\n    var accessibilityRole = Platform.select({\n      web: \"listitem\",\n      default: props.accessibilityRole\n    });\n    return React.createElement(Text, _objectSpread(_objectSpread({}, props), {}, {\n      accessibilityRole: accessibilityRole,\n      ref: ref\n    }));\n  }\n  var accessibilityRole1 = Platform.select({\n    web: \"listitem\",\n    default: props.accessibilityRole\n  });\n  return React.createElement(View, _objectSpread(_objectSpread({}, props), {}, {\n    accessibilityRole: accessibilityRole1,\n    ref: ref\n  }));\n});","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/@expo/html-elements/build/elements/Lists.js"],"names":["React","forwardRef","Text","View","createView","nativeProps","props","ref","createElement","UL","Platform","select","web","accessibilityRole","isTextProps","children","LI","default"],"mappings":";;;AAAA,OAAOA,KAAAA,IAASC,UAAU,QAAQ,OAAA;AAAQ;AAE1C,OAAOC,IAAAA;AACP,OAAOC,IAAAA;AACP,SAASC,UAAAA,GAA6B;EAAA,IAAlBC,WAAAA,uEAAc,CAAC,CAAC;EAChC,OAAOJ,UAAAA,CAAW,UAACK,KAAAA,EAAOC,GAAAA,EAAQ;IAC9B,OAAOP,KAAAA,CAAMQ,aAAa,CAACL,IAAAA,gDAAWE,WAAW,GAAKC,KAAK;MAAEC,GAAAA,EAAKA;IAAAA,GAAI;EAC1E,CAAA,CAAA;AACJ;AACA,OAAO,IAAME,EAAAA,GAAKL,UAAAA,CAAWM,QAAAA,CAASC,MAAM,CAAC;EACzCC,GAAAA,EAAK;IACDC,iBAAAA,EAAmB;EACvB;AACJ,CAAA,CAAA,CAAA;AACA,SAASC,WAAAA,CAAYR,KAAK,EAAE;EAExB,OAAO,OAAOA,KAAAA,CAAMS,QAAQ,KAAK,QAAA;AACrC;AACA,OAAO,IAAMC,EAAAA,GAAKf,UAAAA,CAAW,UAACK,KAAAA,EAAOC,GAAAA,EAAQ;EACzC,IAAIO,WAAAA,CAAYR,KAAAA,CAAAA,EAAQ;IACpB,IAAMO,iBAAAA,GAAoBH,QAAAA,CAASC,MAAM,CAAC;MACtCC,GAAAA,EAAK,UAAA;MACLK,OAAAA,EAASX,KAAAA,CAAMO;IACnB,CAAA,CAAA;IACA,OAAOb,KAAAA,CAAMQ,aAAa,CAACN,IAAAA,kCAAWI,KAAK;MAAEO,iBAAAA,EAAmBA,iBAAAA;MAAmBN,GAAAA,EAAKA;IAAAA,GAAI;EAChG;EACA,IAAMM,kBAAAA,GAAoBH,QAAAA,CAASC,MAAM,CAAC;IACtCC,GAAAA,EAAK,UAAA;IACLK,OAAAA,EAASX,KAAAA,CAAMO;EACnB,CAAA,CAAA;EACA,OAAOb,KAAAA,CAAMQ,aAAa,CAACL,IAAAA,kCAAWG,KAAK;IAAEO,iBAAAA,EAAmBA,kBAAAA;IAAmBN,GAAAA,EAAKA;EAAAA,GAAI;AAChG,CAAA,CAAA","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport Text from '../primitives/Text';\nimport View from '../primitives/View';\nfunction createView(nativeProps = {}) {\n    return forwardRef((props, ref) => {\n        return React.createElement(View, { ...nativeProps, ...props, ref: ref });\n    });\n}\nexport const UL = createView(Platform.select({\n    web: {\n        accessibilityRole: 'list',\n    },\n}));\nfunction isTextProps(props) {\n    // Treat <li></li> as a Text element.\n    return typeof props.children === 'string';\n}\nexport const LI = forwardRef((props, ref) => {\n    if (isTextProps(props)) {\n        const accessibilityRole = Platform.select({\n            web: 'listitem',\n            default: props.accessibilityRole,\n        });\n        return React.createElement(Text, { ...props, accessibilityRole: accessibilityRole, ref: ref });\n    }\n    const accessibilityRole = Platform.select({\n        web: 'listitem',\n        default: props.accessibilityRole,\n    });\n    return React.createElement(View, { ...props, accessibilityRole: accessibilityRole, ref: ref });\n});\n//# sourceMappingURL=Lists.js.map"]},"metadata":{},"sourceType":"module"}