{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\nfunction fromOrigamiTensionAndFriction(tension, friction) {\n  return {\n    stiffness: stiffnessFromOrigamiValue(tension),\n    damping: dampingFromOrigamiValue(friction)\n  };\n}\nfunction fromBouncinessAndSpeed(bounciness, speed) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n  function b3Friction3(x) {\n    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;\n  }\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n  var b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize(speed / 1.7, 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return {\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction)\n  };\n}\nvar _default = {\n  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,\n  fromBouncinessAndSpeed: fromBouncinessAndSpeed\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/vendor/react-native/Animated/SpringConfig.js"],"names":["exports","__esModule","default","stiffnessFromOrigamiValue","oValue","dampingFromOrigamiValue","fromOrigamiTensionAndFriction","tension","friction","stiffness","damping","fromBouncinessAndSpeed","bounciness","speed","normalize","value","startValue","endValue","projectNormal","n","start","end","linearInterpolation","t","quadraticOutInterpolation","b3Friction1","x","Math","pow","b3Friction2","b3Friction3","b3Nobounce","b","s","bouncyTension","bouncyFriction","_default","module"],"mappings":"AASA,YAAA;;AAEAA,OAAAA,CAAQC,UAAU,GAAG,IAAI;AACzBD,OAAAA,CAAQE,OAAO,GAAG,KAAK,CAAA;AAEvB,SAASC,yBAAAA,CAA0BC,MAAM,EAAE;EACzC,OAAQA,CAAAA,MAAAA,GAAS,EAAC,IAAK,IAAA,GAAO,GAAA;AAChC;AAEA,SAASC,uBAAAA,CAAwBD,MAAM,EAAE;EACvC,OAAQA,CAAAA,MAAAA,GAAS,CAAA,IAAK,CAAA,GAAI,EAAA;AAC5B;AAEA,SAASE,6BAAAA,CAA8BC,OAAO,EAAEC,QAAQ,EAAE;EACxD,OAAO;IACLC,SAAAA,EAAWN,yBAAAA,CAA0BI,OAAAA,CAAAA;IACrCG,OAAAA,EAASL,uBAAAA,CAAwBG,QAAAA;EACnC,CAAA;AACF;AAEA,SAASG,sBAAAA,CAAuBC,UAAU,EAAEC,KAAK,EAAE;EACjD,SAASC,SAAAA,CAAUC,KAAK,EAAEC,UAAU,EAAEC,QAAQ,EAAE;IAC9C,OAAQF,CAAAA,KAAAA,GAAQC,UAAS,KAAMC,QAAAA,GAAWD,UAAS,CAAA;EACrD;EAEA,SAASE,aAAAA,CAAcC,CAAC,EAAEC,KAAK,EAAEC,GAAG,EAAE;IACpC,OAAOD,KAAAA,GAAQD,CAAAA,IAAKE,GAAAA,GAAMD,KAAI,CAAA;EAChC;EAEA,SAASE,mBAAAA,CAAoBC,CAAC,EAAEH,KAAK,EAAEC,GAAG,EAAE;IAC1C,OAAOE,CAAAA,GAAIF,GAAAA,GAAO,CAAA,CAAA,GAAIE,CAAAA,IAAKH,KAAAA;EAC7B;EAEA,SAASI,yBAAAA,CAA0BD,CAAC,EAAEH,KAAK,EAAEC,GAAG,EAAE;IAChD,OAAOC,mBAAAA,CAAoB,CAAA,GAAIC,CAAAA,GAAIA,CAAAA,GAAIA,CAAAA,EAAGH,KAAAA,EAAOC,GAAAA,CAAAA;EACnD;EAEA,SAASI,WAAAA,CAAYC,CAAC,EAAE;IACtB,OAAO,MAAA,GAASC,IAAAA,CAAKC,GAAG,CAACF,CAAAA,EAAG,CAAA,CAAA,GAAK,KAAA,GAAQC,IAAAA,CAAKC,GAAG,CAACF,CAAAA,EAAG,CAAA,CAAA,GAAK,IAAA,GAAOA,CAAAA,GAAI,IAAA;EACvE;EAEA,SAASG,WAAAA,CAAYH,CAAC,EAAE;IACtB,OAAO,QAAA,GAAWC,IAAAA,CAAKC,GAAG,CAACF,CAAAA,EAAG,CAAA,CAAA,GAAK,KAAA,GAAQC,IAAAA,CAAKC,GAAG,CAACF,CAAAA,EAAG,CAAA,CAAA,GAAK,IAAA,GAAOA,CAAAA,GAAI,CAAA;EACzE;EAEA,SAASI,WAAAA,CAAYJ,CAAC,EAAE;IACtB,OAAO,UAAA,GAAaC,IAAAA,CAAKC,GAAG,CAACF,CAAAA,EAAG,CAAA,CAAA,GAAK,QAAA,GAAWC,IAAAA,CAAKC,GAAG,CAACF,CAAAA,EAAG,CAAA,CAAA,GAAK,MAAA,GAASA,CAAAA,GAAI,IAAA;EAChF;EAEA,SAASK,UAAAA,CAAWxB,OAAO,EAAE;IAC3B,IAAIA,OAAAA,IAAW,EAAA,EAAI;MACjB,OAAOkB,WAAAA,CAAYlB,OAAAA,CAAAA;IACrB,CAAA,MAAO,IAAIA,OAAAA,GAAU,EAAA,IAAMA,OAAAA,IAAW,EAAA,EAAI;MACxC,OAAOsB,WAAAA,CAAYtB,OAAAA,CAAAA;IACrB,CAAA,MAAO;MACL,OAAOuB,WAAAA,CAAYvB,OAAAA,CAAAA;IACrB;EACF;EAEA,IAAIyB,CAAAA,GAAIlB,SAAAA,CAAUF,UAAAA,GAAa,GAAA,EAAK,CAAA,EAAG,EAAA,CAAA;EACvCoB,CAAAA,GAAId,aAAAA,CAAcc,CAAAA,EAAG,CAAA,EAAG,GAAA,CAAA;EACxB,IAAIC,CAAAA,GAAInB,SAAAA,CAAUD,KAAAA,GAAQ,GAAA,EAAK,CAAA,EAAG,EAAA,CAAA;EAClC,IAAIqB,aAAAA,GAAgBhB,aAAAA,CAAce,CAAAA,EAAG,GAAA,EAAK,GAAA,CAAA;EAC1C,IAAIE,cAAAA,GAAiBX,yBAAAA,CAA0BQ,CAAAA,EAAGD,UAAAA,CAAWG,aAAAA,CAAAA,EAAgB,IAAA,CAAA;EAC7E,OAAO;IACLzB,SAAAA,EAAWN,yBAAAA,CAA0B+B,aAAAA,CAAAA;IACrCxB,OAAAA,EAASL,uBAAAA,CAAwB8B,cAAAA;EACnC,CAAA;AACF;AAEA,IAAIC,QAAAA,GAAW;EACb9B,6BAAAA,EAAAA,6BAAAA;EACAK,sBAAAA,EAAAA;AACF,CAAA;AACAX,OAAAA,CAAQE,OAAO,GAAGkC,QAAAA;AAClBC,MAAAA,CAAOrC,OAAO,GAAGA,OAAAA,CAAQE,OAAO","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\n\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\n\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\n\nfunction fromOrigamiTensionAndFriction(tension, friction) {\n  return {\n    stiffness: stiffnessFromOrigamiValue(tension),\n    damping: dampingFromOrigamiValue(friction)\n  };\n}\n\nfunction fromBouncinessAndSpeed(bounciness, speed) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n\n  function b3Friction3(x) {\n    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;\n  }\n\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n\n  var b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize(speed / 1.7, 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return {\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction)\n  };\n}\n\nvar _default = {\n  fromOrigamiTensionAndFriction,\n  fromBouncinessAndSpeed\n};\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}