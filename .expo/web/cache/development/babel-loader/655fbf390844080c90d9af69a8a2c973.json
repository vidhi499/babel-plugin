{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _Platform = _interopRequireDefault(require(\"../../../exports/Platform\"));\nvar _RCTDeviceEventEmitter = _interopRequireDefault(require(\"./RCTDeviceEventEmitter\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar NativeEventEmitter = function () {\n  function NativeEventEmitter(nativeModule) {\n    _classCallCheck(this, NativeEventEmitter);\n    if (_Platform.default.OS === \"ios\") {\n      (0, _invariant.default)(nativeModule != null, \"`new NativeEventEmitter()` requires a non-null argument.\");\n      this._nativeModule = nativeModule;\n    }\n  }\n  _createClass(NativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this = this;\n      var _this$_nativeModule;\n      (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n      var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);\n      return {\n        remove: function remove() {\n          if (subscription != null) {\n            var _this$_nativeModule2;\n            (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n            subscription.remove();\n            subscription = null;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      var _this$_nativeModule3;\n      (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n      _RCTDeviceEventEmitter.default.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var _RCTDeviceEventEmitte;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      (_RCTDeviceEventEmitte = _RCTDeviceEventEmitter.default).emit.apply(_RCTDeviceEventEmitte, [eventType].concat(args));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      var _this$_nativeModule4;\n      (0, _invariant.default)(eventType != null, \"`NativeEventEmitter.removeAllListener()` requires a non-null argument.\");\n      (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n      _RCTDeviceEventEmitter.default.removeAllListeners(eventType);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      return _RCTDeviceEventEmitter.default.listenerCount(eventType);\n    }\n  }]);\n  return NativeEventEmitter;\n}();\nexports.default = NativeEventEmitter;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/vendor/react-native/NativeEventEmitter/index.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","_Platform","_RCTDeviceEventEmitter","_invariant","NativeEventEmitter","constructor","nativeModule","OS","_nativeModule","addListener","eventType","listener","context","_this$_nativeModule","subscription","remove","_this$_nativeModule2","removeListeners","removeListener","_this$_nativeModule3","emit","_len","arguments","length","args","Array","_key","removeAllListeners","_this$_nativeModule4","listenerCount","module"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _Platform = _interopRequireDefault(require(\"../../../exports/Platform\"));\n\nvar _RCTDeviceEventEmitter = _interopRequireDefault(require(\"./RCTDeviceEventEmitter\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nclass NativeEventEmitter {\n  constructor(nativeModule) {\n    if (_Platform.default.OS === 'ios') {\n      (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(eventType, listener, context) {\n    var _this$_nativeModule;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n\n    var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);\n\n    return {\n      remove: () => {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\n\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n\n    _RCTDeviceEventEmitter.default.removeListener(eventType, listener);\n  }\n\n  emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    _RCTDeviceEventEmitter.default.emit(eventType, ...args);\n  }\n\n  removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n\n    _RCTDeviceEventEmitter.default.removeAllListeners(eventType);\n  }\n\n  listenerCount(eventType) {\n    return _RCTDeviceEventEmitter.default.listenerCount(eventType);\n  }\n\n}\n\nexports.default = NativeEventEmitter;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}