{"ast":null,"code":"import * as React from 'react';\nimport * as ResponderSystem from \"./ResponderSystem\";\nvar emptyObject = {};\nvar idCounter = 0;\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n  return ref.current;\n}\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var _config = config,\n      onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n      onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n      onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = _config.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/useResponderEvents/index.js"],"names":["React","ResponderSystem","emptyObject","idCounter","useStable","getInitialValue","ref","useRef","current","useResponderEvents","hostRef","config","id","isAttachedRef","useEffect","attachListeners","removeNode","_config","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","addNode","useDebugValue","isResponder","getResponderNode"],"mappings":"AAkBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,eAAZ;AACA,IAAIC,WAAW,GAAG,CAAA,CAAlB;AACA,IAAIC,SAAS,GAAG,CAAhB;AAEA,SAASC,SAAT,CAAmBC,eAAnB,EAAoC;EAClC,IAAIC,GAAG,GAAGN,KAAK,CAACO,MAANP,CAAa,IAAbA,CAAV;EAEA,IAAIM,GAAG,CAACE,OAAJF,IAAe,IAAnB,EAAyB;IACvBA,GAAG,CAACE,OAAJF,GAAcD,eAAe,EAA7BC;EACD;EAED,OAAOA,GAAG,CAACE,OAAX;AACD;AAED,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;EAC1D,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;IACrBA,MAAM,GAAGT,WAATS;EACD;EAED,IAAIC,EAAE,GAAGR,SAAS,CAAC,YAAA;IAAA,OAAMD,SAAS,EAAf;EAAA,CAAD,CAAlB;EACA,IAAIU,aAAa,GAAGb,KAAK,CAACO,MAANP,CAAa,KAAbA,CAApB;EAIAA,KAAK,CAACc,SAANd,CAAgB,YAAM;IACpBC,eAAe,CAACc,eAAhBd,EAAAA;IACA,OAAO,YAAM;MACXA,eAAe,CAACe,UAAhBf,CAA2BW,EAA3BX,CAAAA;IACD,CAFD;EAGD,CALDD,EAKG,CAACY,EAAD,CALHZ,CAAAA;EAOAA,KAAK,CAACc,SAANd,CAAgB,YAAM;IACpB,IAAIiB,OAAO,GAAGN,MAAd;MACIO,wBAAwB,GAAGD,OAAO,CAACC,wBADvC;MAEIC,+BAA+B,GAAGF,OAAO,CAACE,+BAF9C;MAGIC,0BAA0B,GAAGH,OAAO,CAACG,0BAHzC;MAIIC,iCAAiC,GAAGJ,OAAO,CAACI,iCAJhD;MAKIC,mCAAmC,GAAGL,OAAO,CAACK,mCALlD;MAMIC,0CAA0C,GAAGN,OAAO,CAACM,0CANzD;MAOIC,yBAAyB,GAAGP,OAAO,CAACO,yBAPxC;MAQIC,gCAAgC,GAAGR,OAAO,CAACQ,gCAR/C;IASA,IAAIC,uBAAuB,GAAGR,wBAAwB,IAAI,IAA5BA,IAAoCC,+BAA+B,IAAI,IAAvED,IAA+EE,0BAA0B,IAAI,IAA7GF,IAAqHG,iCAAiC,IAAI,IAA1JH,IAAkKI,mCAAmC,IAAI,IAAzMJ,IAAiNK,0CAA0C,IAAI,IAA/PL,IAAuQM,yBAAyB,IAAI,IAApSN,IAA4SO,gCAAgC,IAAI,IAA9W;IACA,IAAIE,IAAI,GAAGjB,OAAO,CAACF,OAAnB;IAEA,IAAIkB,uBAAJ,EAA6B;MAC3BzB,eAAe,CAAC2B,OAAhB3B,CAAwBW,EAAxBX,EAA4B0B,IAA5B1B,EAAkCU,MAAlCV,CAAAA;MACAY,aAAa,CAACL,OAAdK,GAAwB,IAAxBA;IACD,CAHD,MAGO,IAAIA,aAAa,CAACL,OAAlB,EAA2B;MAChCP,eAAe,CAACe,UAAhBf,CAA2BW,EAA3BX,CAAAA;MACAY,aAAa,CAACL,OAAdK,GAAwB,KAAxBA;IACD;EACF,CApBDb,EAoBG,CAACW,MAAD,EAASD,OAAT,EAAkBE,EAAlB,CApBHZ,CAAAA;EAqBAA,KAAK,CAAC6B,aAAN7B,CAAoB;IAClB8B,WAAW,EAAEpB,OAAO,CAACF,OAARE,KAAoBT,eAAe,CAAC8B,gBAAhB9B;EADf,CAApBD,CAAAA;EAGAA,KAAK,CAAC6B,aAAN7B,CAAoBW,MAApBX,CAAAA;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Hook for integrating the Responder System into React\n *\n *   function SomeComponent({ onStartShouldSetResponder }) {\n *     const ref = useRef(null);\n *     useResponderEvents(ref, { onStartShouldSetResponder });\n *     return <div ref={ref} />\n *   }\n */\nimport * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(() => idCounter++);\n  var isAttachedRef = React.useRef(false); // This is a separate effects so it doesn't run when the config changes.\n  // On initial mount, attach global listeners if needed.\n  // On unmount, remove node potentially attached to the Responder System.\n\n  React.useEffect(() => {\n    ResponderSystem.attachListeners();\n    return () => {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]); // Register and unregister with the Responder System as necessary\n\n  React.useEffect(() => {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}"]},"metadata":{},"sourceType":"module"}