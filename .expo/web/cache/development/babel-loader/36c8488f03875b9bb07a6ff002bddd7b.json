{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  attachEventHandlersOnRef: true,\n  getLabel: true,\n  isRTL: true,\n  useId: true,\n  useLayoutEffect: true,\n  mergeIds: true,\n  mergeProps: true,\n  SSRProvider: true,\n  useIsSSR: true\n};\nObject.defineProperty(exports, \"useId\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.useId;\n  }\n});\nObject.defineProperty(exports, \"useLayoutEffect\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.useLayoutEffect;\n  }\n});\nObject.defineProperty(exports, \"mergeIds\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.mergeIds;\n  }\n});\nObject.defineProperty(exports, \"mergeProps\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.mergeProps;\n  }\n});\nObject.defineProperty(exports, \"SSRProvider\", {\n  enumerable: true,\n  get: function get() {\n    return _ssr.SSRProvider;\n  }\n});\nObject.defineProperty(exports, \"useIsSSR\", {\n  enumerable: true,\n  get: function get() {\n    return _ssr.useIsSSR;\n  }\n});\nexports.isRTL = exports.getLabel = exports.attachEventHandlersOnRef = void 0;\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _ariaToAccessibilityMap = require(\"./ariaToAccessibilityMap\");\nObject.keys(_ariaToAccessibilityMap).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _ariaToAccessibilityMap[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ariaToAccessibilityMap[key];\n    }\n  });\n});\nvar _utils = require(\"@react-aria/utils\");\nvar _ssr = require(\"@react-aria/ssr\");\nvar attachEventHandlersOnRef = function attachEventHandlersOnRef(props, ref) {\n  if (ref && ref.current) {\n    for (var _key in props) {\n      if (_key.startsWith('on')) {\n        ref.current[_key.toLowerCase()] = props[_key];\n      }\n    }\n  }\n};\nexports.attachEventHandlersOnRef = attachEventHandlersOnRef;\nvar getLabel = function getLabel(props) {\n  var _props$accessibilityL;\n  var label = (_props$accessibilityL = props.accessibilityLabel) !== null && _props$accessibilityL !== void 0 ? _props$accessibilityL : props['aria-label'];\n  if (!label) {\n    label = typeof props.label === 'string' ? props.label : undefined;\n  }\n  return label;\n};\nexports.getLabel = getLabel;\nvar isRTL = function isRTL() {\n  if (_reactNative.I18nManager.isRTL !== undefined) {\n    return _reactNative.I18nManager.isRTL;\n  }\n  if (_reactNative.I18nManager.getConstants) {\n    return _reactNative.I18nManager.getConstants().isRTL;\n  }\n};\nexports.isRTL = isRTL;","map":{"version":3,"sources":["index.ts"],"names":["attachEventHandlersOnRef","props","ref","current","key","startsWith","toLowerCase","getLabel","label","accessibilityLabel","undefined","isRTL","I18nManager","getConstants"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAA,uBAAA,GAAA,OAAA,4BAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,CAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;EAAA,IAAA,GAAA,KAAA,SAAA,IAAA,GAAA,KAAA,YAAA,EAAA;EAAA,IAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,YAAA,EAAA,GAAA,CAAA,EAAA;EAAA,IAAA,GAAA,IAAA,OAAA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,uBAAA,CAAA,GAAA,CAAA,EAAA;EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;IAAA,UAAA,EAAA,IAAA;IAAA,GAAA,EAAA,eAAA;MAAA,OAAA,uBAAA,CAAA,GAAA,CAAA;IAAA;EAAA,CAAA,CAAA;AAAA,CAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAMA,IAAA,IAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AA3BO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAAwB,CAAIC,KAAD,EAAaC,GAAb,EAA0B;EAChE,IAAIA,GAAG,IAAIA,GAAG,CAACC,OAAf,EAAwB;IACtB,KAAK,IAAIC,IAAT,IAAgBH,KAAhB,EAAuB;MACrB,IAAIG,IAAG,CAACC,UAAJD,CAAe,IAAfA,CAAJ,EAA0B;QACxBF,GAAG,CAACC,OAAJD,CAAYE,IAAG,CAACE,WAAJF,EAAZF,CAAAA,GAAiCD,KAAK,CAACG,IAAD,CAAtCF;MACD;IACF;EACF;AACF,CARM;;AAUA,IAAMK,QAAQ,GAAIN,SAAZM,QAAQ,CAAIN,KAAD,EAAgB;EAAA,IAAA,qBAAA;EACtC,IAAIO,KAAK,GAAA,CAAA,qBAAA,GAAGP,KAAK,CAACQ,kBAAT,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAA+BR,KAAK,CAAC,YAAD,CAA7C;EAEA,IAAI,CAACO,KAAL,EAAY;IACVA,KAAK,GAAG,OAAOP,KAAK,CAACO,KAAb,KAAuB,QAAvB,GAAkCP,KAAK,CAACO,KAAxC,GAAgDE,SAAxDF;EACD;EAED,OAAOA,KAAP;AACD,CARM;;AAmBA,IAAMG,KAAK,GAAG,SAARA,KAAK,GAAS;EAEzB,IAAIC,YAAAA,CAAAA,WAAAA,CAAYD,KAAZC,KAAsBF,SAA1B,EAAqC;IACnC,OAAOE,YAAAA,CAAAA,WAAAA,CAAYD,KAAnB;EAHuB;EAOzB,IAAIC,YAAAA,CAAAA,WAAAA,CAAYC,YAAhB,EAA8B;IAE5B,OAAOD,YAAAA,CAAAA,WAAAA,CAAYC,YAAZD,EAAAA,CAA2BD,KAAlC;EACD;AACF,CAXM","sourcesContent":["import { I18nManager } from 'react-native';\n\nexport const attachEventHandlersOnRef = (props: any, ref: any) => {\n  if (ref && ref.current) {\n    for (let key in props) {\n      if (key.startsWith('on')) {\n        ref.current[key.toLowerCase()] = props[key];\n      }\n    }\n  }\n};\n\nexport const getLabel = (props: any) => {\n  let label = props.accessibilityLabel ?? props['aria-label'];\n\n  if (!label) {\n    label = typeof props.label === 'string' ? props.label : undefined;\n  }\n\n  return label;\n};\n\nexport * from './ariaToAccessibilityMap';\nexport {\n  useId,\n  useLayoutEffect,\n  mergeIds,\n  mergeProps,\n} from '@react-aria/utils';\nexport { SSRProvider, useIsSSR } from '@react-aria/ssr';\n\nexport const isRTL = () => {\n  // To support previous RN versions. Newer versions use below getConstants()\n  if (I18nManager.isRTL !== undefined) {\n    return I18nManager.isRTL;\n  }\n\n  // @ts-ignore - RN web only\n  if (I18nManager.getConstants) {\n    // @ts-ignore - RN web only\n    return I18nManager.getConstants().isRTL;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}