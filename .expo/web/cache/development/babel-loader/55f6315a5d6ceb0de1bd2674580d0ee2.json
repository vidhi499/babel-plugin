{"ast":null,"code":"var TouchHistoryMath = {\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0;\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;"]},"metadata":{},"sourceType":"module"}