{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onScroll\", \"onTouchMove\", \"onWheel\", \"scrollEnabled\", \"scrollEventThrottle\", \"showsHorizontalScrollIndicator\", \"showsVerticalScrollIndicator\", \"style\"];\nimport * as React from 'react';\nimport StyleSheet from \"../StyleSheet\";\nimport View from \"../View\";\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nfunction normalizeScrollEvent(e) {\n  return {\n    nativeEvent: {\n      contentOffset: {\n        get x() {\n          return e.target.scrollLeft;\n        },\n        get y() {\n          return e.target.scrollTop;\n        }\n      },\n      contentSize: {\n        get height() {\n          return e.target.scrollHeight;\n        },\n        get width() {\n          return e.target.scrollWidth;\n        }\n      },\n      layoutMeasurement: {\n        get height() {\n          return e.target.offsetHeight;\n        },\n        get width() {\n          return e.target.offsetWidth;\n        }\n      }\n    },\n    timeStamp: Date.now()\n  };\n}\nfunction shouldEmitScrollEvent(lastTick, eventThrottle) {\n  var timeSinceLastTick = Date.now() - lastTick;\n  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;\n}\nvar ScrollViewBase = React.forwardRef(function (props, forwardedRef) {\n  var onScroll = props.onScroll,\n    onTouchMove = props.onTouchMove,\n    onWheel = props.onWheel,\n    _props$scrollEnabled = props.scrollEnabled,\n    scrollEnabled = _props$scrollEnabled === void 0 ? true : _props$scrollEnabled,\n    _props$scrollEventThr = props.scrollEventThrottle,\n    scrollEventThrottle = _props$scrollEventThr === void 0 ? 0 : _props$scrollEventThr,\n    showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator,\n    showsVerticalScrollIndicator = props.showsVerticalScrollIndicator,\n    style = props.style,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var scrollState = React.useRef({\n    isScrolling: false,\n    scrollLastTick: 0\n  });\n  var scrollTimeout = React.useRef(null);\n  var scrollRef = React.useRef(null);\n  function createPreventableScrollHandler(handler) {\n    return function (e) {\n      if (scrollEnabled) {\n        if (handler) {\n          handler(e);\n        }\n      }\n    };\n  }\n  function handleScroll(e) {\n    e.stopPropagation();\n    if (e.target === scrollRef.current) {\n      e.persist();\n      if (scrollTimeout.current != null) {\n        clearTimeout(scrollTimeout.current);\n      }\n      scrollTimeout.current = setTimeout(function () {\n        handleScrollEnd(e);\n      }, 100);\n      if (scrollState.current.isScrolling) {\n        if (shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle)) {\n          handleScrollTick(e);\n        }\n      } else {\n        handleScrollStart(e);\n      }\n    }\n  }\n  function handleScrollStart(e) {\n    scrollState.current.isScrolling = true;\n    handleScrollTick(e);\n  }\n  function handleScrollTick(e) {\n    scrollState.current.scrollLastTick = Date.now();\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n  function handleScrollEnd(e) {\n    scrollState.current.isScrolling = false;\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n  var hideScrollbar = showsHorizontalScrollIndicator === false || showsVerticalScrollIndicator === false;\n  return React.createElement(View, _extends({}, rest, {\n    onScroll: handleScroll,\n    onTouchMove: createPreventableScrollHandler(onTouchMove),\n    onWheel: createPreventableScrollHandler(onWheel),\n    ref: useMergeRefs(scrollRef, forwardedRef),\n    style: [style, !scrollEnabled && styles.scrollDisabled, hideScrollbar && styles.hideScrollbar]\n  }));\n});\nvar styles = StyleSheet.create({\n  scrollDisabled: {\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    touchAction: 'none'\n  },\n  hideScrollbar: {\n    scrollbarWidth: 'none'\n  }\n});\nexport default ScrollViewBase;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/ScrollView/ScrollViewBase.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","StyleSheet","View","useMergeRefs","normalizeScrollEvent","e","nativeEvent","contentOffset","x","target","scrollLeft","y","scrollTop","contentSize","height","scrollHeight","width","scrollWidth","layoutMeasurement","offsetHeight","offsetWidth","timeStamp","Date","now","shouldEmitScrollEvent","lastTick","eventThrottle","timeSinceLastTick","ScrollViewBase","forwardRef","props","forwardedRef","onScroll","onTouchMove","onWheel","_props$scrollEnabled","scrollEnabled","_props$scrollEventThr","scrollEventThrottle","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","style","rest","scrollState","useRef","isScrolling","scrollLastTick","scrollTimeout","scrollRef","createPreventableScrollHandler","handler","handleScroll","stopPropagation","current","persist","clearTimeout","setTimeout","handleScrollEnd","handleScrollTick","handleScrollStart","hideScrollbar","createElement","ref","styles","scrollDisabled","create","overflowX","overflowY","touchAction","scrollbarWidth"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onScroll\", \"onTouchMove\", \"onWheel\", \"scrollEnabled\", \"scrollEventThrottle\", \"showsHorizontalScrollIndicator\", \"showsVerticalScrollIndicator\", \"style\"];\n\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\nimport useMergeRefs from '../../modules/useMergeRefs';\n\nfunction normalizeScrollEvent(e) {\n  return {\n    nativeEvent: {\n      contentOffset: {\n        get x() {\n          return e.target.scrollLeft;\n        },\n\n        get y() {\n          return e.target.scrollTop;\n        }\n\n      },\n      contentSize: {\n        get height() {\n          return e.target.scrollHeight;\n        },\n\n        get width() {\n          return e.target.scrollWidth;\n        }\n\n      },\n      layoutMeasurement: {\n        get height() {\n          return e.target.offsetHeight;\n        },\n\n        get width() {\n          return e.target.offsetWidth;\n        }\n\n      }\n    },\n    timeStamp: Date.now()\n  };\n}\n\nfunction shouldEmitScrollEvent(lastTick, eventThrottle) {\n  var timeSinceLastTick = Date.now() - lastTick;\n  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;\n}\n/**\n * Encapsulates the Web-specific scroll throttling and disabling logic\n */\n\n\nvar ScrollViewBase = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var onScroll = props.onScroll,\n      onTouchMove = props.onTouchMove,\n      onWheel = props.onWheel,\n      _props$scrollEnabled = props.scrollEnabled,\n      scrollEnabled = _props$scrollEnabled === void 0 ? true : _props$scrollEnabled,\n      _props$scrollEventThr = props.scrollEventThrottle,\n      scrollEventThrottle = _props$scrollEventThr === void 0 ? 0 : _props$scrollEventThr,\n      showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator,\n      showsVerticalScrollIndicator = props.showsVerticalScrollIndicator,\n      style = props.style,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var scrollState = React.useRef({\n    isScrolling: false,\n    scrollLastTick: 0\n  });\n  var scrollTimeout = React.useRef(null);\n  var scrollRef = React.useRef(null);\n\n  function createPreventableScrollHandler(handler) {\n    return e => {\n      if (scrollEnabled) {\n        if (handler) {\n          handler(e);\n        }\n      }\n    };\n  }\n\n  function handleScroll(e) {\n    e.stopPropagation();\n\n    if (e.target === scrollRef.current) {\n      e.persist(); // A scroll happened, so the scroll resets the scrollend timeout.\n\n      if (scrollTimeout.current != null) {\n        clearTimeout(scrollTimeout.current);\n      }\n\n      scrollTimeout.current = setTimeout(() => {\n        handleScrollEnd(e);\n      }, 100);\n\n      if (scrollState.current.isScrolling) {\n        // Scroll last tick may have changed, check if we need to notify\n        if (shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle)) {\n          handleScrollTick(e);\n        }\n      } else {\n        // Weren't scrolling, so we must have just started\n        handleScrollStart(e);\n      }\n    }\n  }\n\n  function handleScrollStart(e) {\n    scrollState.current.isScrolling = true;\n    handleScrollTick(e);\n  }\n\n  function handleScrollTick(e) {\n    scrollState.current.scrollLastTick = Date.now();\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  function handleScrollEnd(e) {\n    scrollState.current.isScrolling = false;\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  var hideScrollbar = showsHorizontalScrollIndicator === false || showsVerticalScrollIndicator === false;\n  return /*#__PURE__*/React.createElement(View, _extends({}, rest, {\n    onScroll: handleScroll,\n    onTouchMove: createPreventableScrollHandler(onTouchMove),\n    onWheel: createPreventableScrollHandler(onWheel),\n    ref: useMergeRefs(scrollRef, forwardedRef),\n    style: [style, !scrollEnabled && styles.scrollDisabled, hideScrollbar && styles.hideScrollbar]\n  }));\n}); // Chrome doesn't support e.preventDefault in this case; touch-action must be\n// used to disable scrolling.\n// https://developers.google.com/web/updates/2017/01/scrolling-intervention\n\nvar styles = StyleSheet.create({\n  scrollDisabled: {\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    touchAction: 'none'\n  },\n  hideScrollbar: {\n    scrollbarWidth: 'none'\n  }\n});\nexport default ScrollViewBase;"]},"metadata":{},"sourceType":"module"}