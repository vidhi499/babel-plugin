{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar _createForOfIteratorHelperLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar ViewabilityHelper = function () {\n  function ViewabilityHelper(config) {\n    _classCallCheck(this, ViewabilityHelper);\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  _createClass(ViewabilityHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._timers.forEach(clearTimeout);\n    }\n  }, {\n    key: \"computeViewableItems\",\n    value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {\n      var _this$_config = this._config,\n        itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n        viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n      var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n      var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n      (0, _invariant.default)(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), \"Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold\");\n      var viewableIndices = [];\n      if (itemCount === 0) {\n        return viewableIndices;\n      }\n      var firstVisible = -1;\n      var _ref = renderRange || {\n          first: 0,\n          last: itemCount - 1\n        },\n        first = _ref.first,\n        last = _ref.last;\n      if (last >= itemCount) {\n        console.warn(\"Invalid render range computing viewability \" + JSON.stringify({\n          renderRange: renderRange,\n          itemCount: itemCount\n        }));\n        return [];\n      }\n      for (var idx = first; idx <= last; idx++) {\n        var metrics = getFrameMetrics(idx);\n        if (!metrics) {\n          continue;\n        }\n        var top = metrics.offset - scrollOffset;\n        var bottom = top + metrics.length;\n        if (top < viewportHeight && bottom > 0) {\n          firstVisible = idx;\n          if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n            viewableIndices.push(idx);\n          }\n        } else if (firstVisible >= 0) {\n          break;\n        }\n      }\n      return viewableIndices;\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {\n      var _this = this;\n      if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n        return;\n      }\n      var viewableIndices = [];\n      if (itemCount) {\n        viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n      }\n      if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {\n        return v === viewableIndices[ii];\n      })) {\n        return;\n      }\n      this._viewableIndices = viewableIndices;\n      if (this._config.minimumViewTime) {\n        var handle = setTimeout(function () {\n          _this._timers.delete(handle);\n          _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n        }, this._config.minimumViewTime);\n        this._timers.add(handle);\n      } else {\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }\n    }\n  }, {\n    key: \"resetViewableIndices\",\n    value: function resetViewableIndices() {\n      this._viewableIndices = [];\n    }\n  }, {\n    key: \"recordInteraction\",\n    value: function recordInteraction() {\n      this._hasInteracted = true;\n    }\n  }, {\n    key: \"_onUpdateSync\",\n    value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {\n      var _this2 = this;\n      viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {\n        return _this2._viewableIndices.includes(ii);\n      });\n      var prevItems = this._viewableItems;\n      var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {\n        var viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }));\n      var changed = [];\n      for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(nextItems), _step; !(_step = _iterator()).done;) {\n        var _step$value = _step.value,\n          key = _step$value[0],\n          viewable = _step$value[1];\n        if (!prevItems.has(key)) {\n          changed.push(viewable);\n        }\n      }\n      for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n        var _step2$value = _step2.value,\n          _key = _step2$value[0],\n          _viewable = _step2$value[1];\n        if (!nextItems.has(_key)) {\n          changed.push((0, _objectSpread2.default)((0, _objectSpread2.default)({}, _viewable), {}, {\n            isViewable: false\n          }));\n        }\n      }\n      if (changed.length > 0) {\n        this._viewableItems = nextItems;\n        onViewableItemsChanged({\n          viewableItems: Array.from(nextItems.values()),\n          changed: changed,\n          viewabilityConfig: this._config\n        });\n      }\n    }\n  }]);\n  return ViewabilityHelper;\n}();\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\nvar _default = ViewabilityHelper;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/vendor/react-native/ViewabilityHelper/index.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","_objectSpread2","_createForOfIteratorHelperLoose2","_invariant","ViewabilityHelper","constructor","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","dispose","forEach","clearTimeout","computeViewableItems","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","_this$_config","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","first","last","console","warn","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","onUpdate","createViewToken","onViewableItemsChanged","waitForInteraction","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","resetViewableIndices","recordInteraction","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","_iterator","_step","done","_step$value","value","has","_iterator2","_step2","_step2$value","_key","_viewable","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","_default","module"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _createForOfIteratorHelperLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  constructor(config) {\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n\n\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n\n\n  computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange // Optional optimization to reduce the scan size\n  ) {\n    var _this$_config = this._config,\n        itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n        viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n    var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n    (0, _invariant.default)(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n    var viewableIndices = [];\n\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n\n    var firstVisible = -1;\n\n    var _ref = renderRange || {\n      first: 0,\n      last: itemCount - 1\n    },\n        first = _ref.first,\n        last = _ref.last;\n\n    if (last >= itemCount) {\n      console.warn('Invalid render range computing viewability ' + JSON.stringify({\n        renderRange,\n        itemCount\n      }));\n      return [];\n    }\n\n    for (var idx = first; idx <= last; idx++) {\n      var metrics = getFrameMetrics(idx);\n\n      if (!metrics) {\n        continue;\n      }\n\n      var top = metrics.offset - scrollOffset;\n      var bottom = top + metrics.length;\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n\n        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n\n    return viewableIndices;\n  }\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n\n\n  onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange // Optional optimization to reduce the scan size\n  ) {\n    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n      return;\n    }\n\n    var viewableIndices = [];\n\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n    }\n\n    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n\n    this._viewableIndices = viewableIndices;\n\n    if (this._config.minimumViewTime) {\n      var handle = setTimeout(() => {\n        this._timers.delete(handle);\n\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }, this._config.minimumViewTime);\n\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n    }\n  }\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n\n\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n\n\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync( // $FlowFixMe\n  viewableIndicesToCheck, // $FlowFixMe\n  onViewableItemsChanged, // $FlowFixMe\n  createViewToken) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));\n    var prevItems = this._viewableItems;\n    var nextItems = new Map(viewableIndicesToCheck.map(ii => {\n      var viewable = createViewToken(ii, true);\n      return [viewable.key, viewable];\n    }));\n    var changed = [];\n\n    for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(nextItems), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          viewable = _step$value[1];\n\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n\n    for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n      var _step2$value = _step2.value,\n          _key = _step2$value[0],\n          _viewable = _step2$value[1];\n\n      if (!nextItems.has(_key)) {\n        changed.push((0, _objectSpread2.default)((0, _objectSpread2.default)({}, _viewable), {}, {\n          isViewable: false\n        }));\n      }\n    }\n\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config\n      });\n    }\n  }\n\n}\n\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nvar _default = ViewabilityHelper;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}