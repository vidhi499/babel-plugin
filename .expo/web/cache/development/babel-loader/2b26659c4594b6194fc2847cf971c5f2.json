{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport _EventSubscription from \"./_EventSubscription\";\nvar EmitterSubscription = function (_EventSubscription2) {\n  _inherits(EmitterSubscription, _EventSubscription2);\n  var _super = _createSuper(EmitterSubscription);\n  function EmitterSubscription(emitter, subscriber, listener, context) {\n    var _this;\n    _classCallCheck(this, EmitterSubscription);\n    _this = _super.call(this, subscriber);\n    _this.emitter = emitter;\n    _this.listener = listener;\n    _this.context = context;\n    return _this;\n  }\n  _createClass(EmitterSubscription, [{\n    key: \"remove\",\n    value: function remove() {\n      this.emitter.removeSubscription(this);\n    }\n  }]);\n  return EmitterSubscription;\n}(_EventSubscription);\nexport default EmitterSubscription;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/emitter/_EmitterSubscription.js"],"names":["_EventSubscription","EmitterSubscription","emitter","subscriber","listener","context","removeSubscription"],"mappings":"AASA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,kBAAP;AAKMC,IAAAA,mB;;;EAWJ,SAAA,mBAAA,CAAYC,OAAZ,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,OAA3C,EAAoD;IAAA,IAAA,KAAA;IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,CAAA;IAClD,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMF,UAAN,CAAA;IACA,KAAA,CAAKD,OAAL,GAAeA,OAAf;IACA,KAAA,CAAKE,QAAL,GAAgBA,QAAhB;IACA,KAAA,CAAKC,OAAL,GAAeA,OAAf;IAJkD,OAAA,KAAA;EAKnD;;;WASD,SAAA,MAAA,GAAS;MACP,IAAA,CAAKH,OAAL,CAAaI,kBAAb,CAAgC,IAAhC,CAAA;IACD;;;EA3B+BN,kB;AA+BlC,eAAeC,mBAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _EventSubscription from './_EventSubscription';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription extends _EventSubscription {\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(emitter, subscriber, listener, context) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of _EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n\n\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n\n}\n\nexport default EmitterSubscription;"]},"metadata":{},"sourceType":"module"}