{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from \"fbjs/lib/invariant\";\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n    this._subscriptionsForType = {};\n  }\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value: function addSubscription(eventType, subscription) {\n      invariant(subscription.subscriber === this, \"The subscriber of the subscription is incorrectly set.\");\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n      var key = this._subscriptionsForType[eventType].length;\n      this._subscriptionsForType[eventType].push(subscription);\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions(eventType) {\n      if (eventType == null) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value: function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n  return EventSubscriptionVendor;\n}();\nexport default EventSubscriptionVendor;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"names":["invariant","EventSubscriptionVendor","constructor","_subscriptionsForType","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"mappings":"AASA,YAAA;;AAAA;AAAA;AAEA,OAAOA,SAAAA,MAAe,oBAAA;AAAqB,IAMrCC,uBAAAA;EACJC,mCAAc;IAAA;IACZ,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAA;EAChC;EAAA;IAAA;IAAA,OASAC,yBAAgBC,SAAS,EAAEC,YAAY,EAAE;MACvCN,SAAAA,CAAUM,YAAAA,CAAaC,UAAU,KAAK,IAAI,EAAE,wDAAA,CAAA;MAE5C,IAAI,CAAC,IAAI,CAACJ,qBAAqB,CAACE,SAAAA,CAAU,EAAE;QAC1C,IAAI,CAACF,qBAAqB,CAACE,SAAAA,CAAU,GAAG,EAAE;MAC5C;MAEA,IAAIG,GAAAA,GAAM,IAAI,CAACL,qBAAqB,CAACE,SAAAA,CAAU,CAACI,MAAM;MAEtD,IAAI,CAACN,qBAAqB,CAACE,SAAAA,CAAU,CAACK,IAAI,CAACJ,YAAAA,CAAAA;MAE3CA,YAAAA,CAAaD,SAAS,GAAGA,SAAAA;MACzBC,YAAAA,CAAaE,GAAG,GAAGA,GAAAA;MACnB,OAAOF,YAAAA;IACT;EAAA;IAAA;IAAA,OASAK,gCAAuBN,SAAS,EAAE;MAChC,IAAIA,SAAAA,IAAa,IAAI,EAAE;QACrB,IAAI,CAACF,qBAAqB,GAAG,CAAC,CAAA;MAChC,CAAA,MAAO;QACL,OAAO,IAAI,CAACA,qBAAqB,CAACE,SAAAA,CAAU;MAC9C;IACF;EAAA;IAAA;IAAA,OASAO,4BAAmBN,YAAY,EAAE;MAC/B,IAAID,SAAAA,GAAYC,YAAAA,CAAaD,SAAS;MACtC,IAAIG,GAAAA,GAAMF,YAAAA,CAAaE,GAAG;MAC1B,IAAIK,oBAAAA,GAAuB,IAAI,CAACV,qBAAqB,CAACE,SAAAA,CAAU;MAEhE,IAAIQ,oBAAAA,EAAsB;QACxB,OAAOA,oBAAoB,CAACL,GAAAA,CAAI;MAClC;IACF;EAAA;IAAA;IAAA,OAeAM,iCAAwBT,SAAS,EAAE;MACjC,OAAO,IAAI,CAACF,qBAAqB,CAACE,SAAAA,CAAU;IAC9C;EAAA;EAAA;AAAA;AAIF,eAAeJ,uBAAAA","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  }\n\n}\n\nexport default EventSubscriptionVendor;"]},"metadata":{},"sourceType":"module"}