{"ast":null,"code":"\"use strict\";\n\nimport PressResponder from \"./PressResponder\";\nimport { useDebugValue, useEffect, useRef } from \"react\";\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n  var pressResponder = pressResponderRef.current;\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"names":["PressResponder","useDebugValue","useEffect","useRef","usePressEvents","hostRef","config","pressResponderRef","current","pressResponder","configure","reset","getEventHandlers"],"mappings":"AASA,YAAA;;AAEA,OAAOA,cAAAA;AACP,SAASC,aAAa,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAA;AACjD,eAAe,SAASC,cAAAA,CAAeC,OAAO,EAAEC,MAAM,EAAE;EACtD,IAAIC,iBAAAA,GAAoBJ,MAAAA,CAAO,IAAI,CAAA;EAEnC,IAAII,iBAAAA,CAAkBC,OAAO,IAAI,IAAI,EAAE;IACrCD,iBAAAA,CAAkBC,OAAO,GAAG,IAAIR,cAAAA,CAAeM,MAAAA,CAAAA;EACjD;EAEA,IAAIG,cAAAA,GAAiBF,iBAAAA,CAAkBC,OAAO;EAE9CN,SAAAA,CAAU,YAAM;IACdO,cAAAA,CAAeC,SAAS,CAACJ,MAAAA,CAAAA;EAC3B,CAAA,EAAG,CAACA,MAAAA,EAAQG,cAAAA,CAAe,CAAA;EAG3BP,SAAAA,CAAU,YAAM;IACd,OAAO,YAAM;MACXO,cAAAA,CAAeE,KAAK,EAAA;IACtB,CAAA;EACF,CAAA,EAAG,CAACF,cAAAA,CAAe,CAAA;EACnBR,aAAAA,CAAcK,MAAAA,CAAAA;EACd,OAAOG,cAAAA,CAAeG,gBAAgB,EAAA;AACxC","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"]},"metadata":{},"sourceType":"module"}