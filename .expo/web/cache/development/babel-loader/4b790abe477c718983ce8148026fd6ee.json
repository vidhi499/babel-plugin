{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/createClass.js\";\nimport InteractionManager from \"../../../exports/InteractionManager\";\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  _createClass(Batchinator, [{\n    key: \"dispose\",\n    value: function dispose(options) {\n      if (options === void 0) {\n        options = {\n          abort: false\n        };\n      }\n      if (this._taskHandle) {\n        this._taskHandle.cancel();\n        if (!options.abort) {\n          this._callback();\n        }\n        this._taskHandle = null;\n      }\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule() {\n      var _this = this;\n      if (this._taskHandle) {\n        return;\n      }\n      var timeoutHandle = setTimeout(function () {\n        _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n          _this._taskHandle = null;\n          _this._callback();\n        });\n      }, this._delay);\n      this._taskHandle = {\n        cancel: function cancel() {\n          return clearTimeout(timeoutHandle);\n        }\n      };\n    }\n  }]);\n  return Batchinator;\n}();\nexport default Batchinator;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"names":["InteractionManager","Batchinator","callback","delayMS","_delay","_callback","options","abort","_taskHandle","cancel","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout"],"mappings":"AASA,YAAA;;;;AAEA,OAAOA,kBAAP;AAwBMC,IAAAA,W;EACJ,SAAA,WAAA,CAAYC,QAAZ,EAAsBC,OAAtB,EAA+B;IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;IAC7B,IAAA,CAAKC,MAAL,GAAcD,OAAd;IACA,IAAA,CAAKE,SAAL,GAAiBH,QAAjB;EACD;;;WASD,SAAA,OAAA,CAAQI,OAAR,EAAiB;MACf,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;QACtBA,OAAO,GAAG;UACRC,KAAK,EAAE;QADC,CAAVD;MAGD;MAED,IAAI,IAAA,CAAKE,WAAT,EAAsB;QACpB,IAAA,CAAKA,WAAL,CAAiBC,MAAjB,EAAA;QAEA,IAAI,CAACH,OAAO,CAACC,KAAb,EAAoB;UAClB,IAAA,CAAKF,SAAL,EAAA;QACD;QAED,IAAA,CAAKG,WAAL,GAAmB,IAAnB;MACD;IACF;;;WAED,SAAA,QAAA,GAAW;MAAA,IAAA,KAAA,GAAA,IAAA;MACT,IAAI,IAAA,CAAKA,WAAT,EAAsB;QACpB;MACD;MAED,IAAIE,aAAa,GAAGC,UAAU,CAAC,YAAM;QACnC,KAAI,CAACH,WAAL,GAAmBR,kBAAkB,CAACY,oBAAnBZ,CAAwC,YAAM;UAG/D,KAAI,CAACQ,WAAL,GAAmB,IAAnB;UAEA,KAAI,CAACH,SAAL,EAAA;QACD,CANkBL,CAAnB;MAOD,CAR6B,EAQ3B,IAAA,CAAKI,MARsB,CAA9B;MASA,IAAA,CAAKI,WAAL,GAAmB;QACjBC,MAAM,EAAE,SAAA,MAAA,GAAA;UAAA,OAAMI,YAAY,CAACH,aAAD,CAAlB;QAAA;MADS,CAAnB;IAGD;;;;AAIH,eAAeT,WAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nclass Batchinator {\n  constructor(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  }\n\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: () => clearTimeout(timeoutHandle)\n    };\n  }\n\n}\n\nexport default Batchinator;"]},"metadata":{},"sourceType":"module"}