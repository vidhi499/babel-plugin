{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar TouchHistoryMath = {\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0;\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);\n  },\n  noCentroid: -1\n};\nvar _default = TouchHistoryMath;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/vendor/react-native/TouchHistoryMath/index.js"],"names":["exports","__esModule","default","TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nvar _default = TouchHistoryMath;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}