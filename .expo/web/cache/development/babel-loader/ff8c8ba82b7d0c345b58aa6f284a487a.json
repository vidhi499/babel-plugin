{"ast":null,"code":"import * as React from \"react\";\nexport default function mergeRefs() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return function forwardRef(node) {\n    args.forEach(function (ref) {\n      if (ref == null) {\n        return;\n      }\n      if (typeof ref === \"function\") {\n        ref(node);\n        return;\n      }\n      if (typeof ref === \"object\") {\n        ref.current = node;\n        return;\n      }\n      console.error(\"mergeRefs cannot handle Refs of type boolean, number or string, received ref \" + String(ref));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/mergeRefs/index.js"],"names":["React","mergeRefs","_len","arguments","length","args","Array","_key","forwardRef","node","forEach","ref","current","console","error","String"],"mappings":"AAQA,OAAA,KAAYA,KAAAA,MAAW,OAAA;AACvB,eAAe,SAASC,SAAAA,GAAY;EAClC,KAAK,IAAIC,IAAAA,GAAOC,SAAAA,CAAUC,MAAM,EAAEC,IAAAA,GAAO,IAAIC,KAAAA,CAAMJ,IAAAA,CAAAA,EAAOK,IAAAA,GAAO,CAAA,EAAGA,IAAAA,GAAOL,IAAAA,EAAMK,IAAAA,EAAAA,EAAQ;IACvFF,IAAI,CAACE,IAAAA,CAAK,GAAGJ,SAAS,CAACI,IAAAA,CAAK;EAC9B;EAEA,OAAO,SAASC,UAAAA,CAAWC,IAAI,EAAE;IAC/BJ,IAAAA,CAAKK,OAAO,CAACC,UAAAA,GAAAA,EAAO;MAClB,IAAIA,GAAAA,IAAO,IAAI,EAAE;QACf;MACF;MAEA,IAAI,OAAOA,GAAAA,KAAQ,UAAA,EAAY;QAC7BA,GAAAA,CAAIF,IAAAA,CAAAA;QACJ;MACF;MAEA,IAAI,OAAOE,GAAAA,KAAQ,QAAA,EAAU;QAC3BA,GAAAA,CAAIC,OAAO,GAAGH,IAAAA;QACd;MACF;MAEAI,OAAAA,CAAQC,KAAK,CAAC,+EAAA,GAAkFC,MAAAA,CAAOJ,GAAAA,CAAAA,CAAAA;IACzG,CAAA,CAAA;EACF,CAAA;AACF","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nexport default function mergeRefs() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return function forwardRef(node) {\n    args.forEach(ref => {\n      if (ref == null) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n        return;\n      }\n\n      if (typeof ref === 'object') {\n        ref.current = node;\n        return;\n      }\n\n      console.error(\"mergeRefs cannot handle Refs of type boolean, number or string, received ref \" + String(ref));\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}