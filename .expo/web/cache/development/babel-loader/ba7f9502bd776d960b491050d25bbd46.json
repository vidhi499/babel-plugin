{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport InteractionManager from \"../../../exports/InteractionManager\";\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  _createClass(Batchinator, [{\n    key: \"dispose\",\n    value: function dispose(options) {\n      if (options === void 0) {\n        options = {\n          abort: false\n        };\n      }\n      if (this._taskHandle) {\n        this._taskHandle.cancel();\n        if (!options.abort) {\n          this._callback();\n        }\n        this._taskHandle = null;\n      }\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule() {\n      var _this = this;\n      if (this._taskHandle) {\n        return;\n      }\n      var timeoutHandle = setTimeout(function () {\n        _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n          _this._taskHandle = null;\n          _this._callback();\n        });\n      }, this._delay);\n      this._taskHandle = {\n        cancel: function cancel() {\n          return clearTimeout(timeoutHandle);\n        }\n      };\n    }\n  }]);\n  return Batchinator;\n}();\nexport default Batchinator;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"names":["InteractionManager","Batchinator","constructor","callback","delayMS","_delay","_callback","dispose","options","abort","_taskHandle","cancel","schedule","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout"],"mappings":"AASA,YAAA;;AAAA;AAAA;AAEA,OAAOA,kBAAAA;AAA8D,IAwB/DC,WAAAA;EACJC,qBAAYC,QAAQ,EAAEC,OAAO,EAAE;IAAA;IAC7B,IAAI,CAACC,MAAM,GAAGD,OAAAA;IACd,IAAI,CAACE,SAAS,GAAGH,QAAAA;EACnB;EAAA;IAAA;IAAA,OASAI,iBAAQC,OAAO,EAAE;MACf,IAAIA,OAAAA,KAAY,KAAK,CAAA,EAAG;QACtBA,OAAAA,GAAU;UACRC,KAAAA,EAAO;QACT,CAAA;MACF;MAEA,IAAI,IAAI,CAACC,WAAW,EAAE;QACpB,IAAI,CAACA,WAAW,CAACC,MAAM,EAAA;QAEvB,IAAI,CAACH,OAAAA,CAAQC,KAAK,EAAE;UAClB,IAAI,CAACH,SAAS,EAAA;QAChB;QAEA,IAAI,CAACI,WAAW,GAAG,IAAI;MACzB;IACF;EAAA;IAAA;IAAA,OAEAE,oBAAW;MAAA;MACT,IAAI,IAAI,CAACF,WAAW,EAAE;QACpB;MACF;MAEA,IAAIG,aAAAA,GAAgBC,UAAAA,CAAW,YAAM;QACnC,KAAI,CAACJ,WAAW,GAAGV,kBAAAA,CAAmBe,oBAAoB,CAAC,YAAM;UAG/D,KAAI,CAACL,WAAW,GAAG,IAAI;UAEvB,KAAI,CAACJ,SAAS,EAAA;QAChB,CAAA,CAAA;MACF,CAAA,EAAG,IAAI,CAACD,MAAM,CAAA;MACd,IAAI,CAACK,WAAW,GAAG;QACjBC,MAAAA,EAAQ;UAAA,OAAMK,YAAAA,CAAaH,aAAAA,CAAAA;QAAAA;MAC7B,CAAA;IACF;EAAA;EAAA;AAAA;AAIF,eAAeZ,WAAAA","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nclass Batchinator {\n  constructor(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  }\n\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: () => clearTimeout(timeoutHandle)\n    };\n  }\n\n}\n\nexport default Batchinator;"]},"metadata":{},"sourceType":"module"}