{"ast":null,"code":"import useLayoutEffect from \"../useLayoutEffect\";\nimport UIManager from \"../../exports/UIManager\";\nimport canUseDOM from \"../canUseDom\";\nvar DOM_LAYOUT_HANDLER_NAME = \"__reactLayoutHandler\";\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== \"undefined\") {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n          if (typeof onLayout === \"function\") {\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, \"target\", {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (\"development\" !== \"production\" && \"development\" !== \"test\") {\n      console.warn(\"onLayout relies on ResizeObserver which is not supported by your browser. \" + \"Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.\");\n      didWarn = true;\n    }\n  }\n  return resizeObserver;\n}\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n  useLayoutEffect(function () {\n    var node = ref.current;\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === \"function\") {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/useElementLayout/index.js"],"names":["useLayoutEffect","UIManager","canUseDOM","DOM_LAYOUT_HANDLER_NAME","didWarn","resizeObserver","getResizeObserver","window","ResizeObserver","entries","forEach","entry","node","target","onLayout","measure","x","y","width","height","left","top","event","nativeEvent","layout","timeStamp","Date","now","Object","defineProperty","enumerable","get","process","console","warn","useElementLayout","ref","observer","current","observe","unobserve"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport useLayoutEffect from '../useLayoutEffect';\nimport UIManager from '../../exports/UIManager';\nimport canUseDOM from '../canUseDom';\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(entry => {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            // We still need to measure the view because browsers don't yet provide\n            // border-box dimensions in the entry\n            UIManager.measure(node, (x, y, width, height, left, top) => {\n              var event = {\n                // $FlowFixMe\n                nativeEvent: {\n                  layout: {\n                    x,\n                    y,\n                    width,\n                    height,\n                    left,\n                    top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: () => entry.target\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(() => {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]); // Observing is done in a separate effect to avoid this effect running\n  // when 'onLayout' changes.\n\n  useLayoutEffect(() => {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return () => {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}"]},"metadata":{},"sourceType":"module"}