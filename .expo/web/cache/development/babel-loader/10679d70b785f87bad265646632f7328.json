{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _Dimensions = _interopRequireDefault(require(\"../../exports/Dimensions\"));\nvar _findNodeHandle = _interopRequireDefault(require(\"../../exports/findNodeHandle\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _Platform = _interopRequireDefault(require(\"../../exports/Platform\"));\nvar _TextInputState = _interopRequireDefault(require(\"../TextInputState\"));\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\nvar _warning = _interopRequireDefault(require(\"fbjs/lib/warning\"));\nvar emptyObject = {};\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar ScrollResponderMixin = {\n  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false\n    };\n  },\n  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {\n    return this.state.isTouching;\n  },\n  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {\n    return false;\n  },\n  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {\n    return this.scrollResponderIsAnimating();\n  },\n  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {\n    (0, _warning.default)(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\n  },\n  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {\n    var nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n    var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedField();\n    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {\n      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\n      _TextInputState.default.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {\n    this.state.lastMomentumScrollBeginTime = Date.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {\n    this.state.lastMomentumScrollEndTime = Date.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n  scrollResponderIsAnimating: function scrollResponderIsAnimating() {\n    var now = Date.now();\n    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;\n    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {\n    return this.getScrollableNode ? this.getScrollableNode() : (0, _findNodeHandle.default)(this);\n  },\n  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {\n    if (typeof x === \"number\") {\n      console.warn(\"`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.\");\n    } else {\n      var _ref = x || emptyObject;\n      x = _ref.x;\n      y = _ref.y;\n      animated = _ref.animated;\n    }\n    var node = this.scrollResponderGetScrollableNode();\n    var left = x || 0;\n    var top = y || 0;\n    if (typeof node.scroll === \"function\") {\n      node.scroll({\n        top: top,\n        left: left,\n        behavior: !animated ? \"auto\" : \"smooth\"\n      });\n    } else {\n      node.scrollLeft = left;\n      node.scrollTop = top;\n    }\n  },\n  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {\n    if (_Platform.default.OS !== \"ios\") {\n      (0, _invariant.default)(\"zoomToRect is not implemented\");\n    }\n  },\n  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {},\n  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n    _UIManager.default.measureLayout(nodeHandle, (0, _findNodeHandle.default)(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\n  },\n  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {\n    var keyboardScreenY = _Dimensions.default.get(\"window\").height;\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n    this.scrollResponderScrollTo({\n      x: 0,\n      y: scrollOffsetY,\n      animated: true\n    });\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {\n    console.error(\"Error measuring text field: \", e);\n  },\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0;\n  },\n  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  }\n};\nvar ScrollResponder = {\n  Mixin: ScrollResponderMixin\n};\nvar _default = ScrollResponder;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/modules/ScrollResponder/index.js"],"names":["_interopRequireDefault","require","default","exports","__esModule","_Dimensions","_findNodeHandle","_invariant","_Platform","_TextInputState","_UIManager","_warning","emptyObject","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollResponderMixin","scrollResponderMixinGetInitialState","isTouching","lastMomentumScrollBeginTime","lastMomentumScrollEndTime","observedScrollSinceBecomingResponder","becameResponderWhileAnimating","scrollResponderHandleScrollShouldSetResponder","state","scrollResponderHandleStartShouldSetResponder","scrollResponderHandleStartShouldSetResponderCapture","e","scrollResponderIsAnimating","scrollResponderHandleResponderReject","scrollResponderHandleTerminationRequest","scrollResponderHandleTouchEnd","nativeEvent","touches","length","props","onTouchEnd","scrollResponderHandleResponderRelease","onResponderRelease","currentlyFocusedTextInput","currentlyFocusedField","keyboardShouldPersistTaps","target","onScrollResponderKeyboardDismissed","blurTextInput","scrollResponderHandleScroll","onScroll","scrollResponderHandleResponderGrant","onResponderGrant","scrollResponderHandleScrollBeginDrag","onScrollBeginDrag","scrollResponderHandleScrollEndDrag","onScrollEndDrag","scrollResponderHandleMomentumScrollBegin","Date","now","onMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onMomentumScrollEnd","scrollResponderHandleTouchStart","onTouchStart","scrollResponderHandleTouchMove","onTouchMove","timeSinceLastMomentumScrollEnd","isAnimating","scrollResponderGetScrollableNode","getScrollableNode","scrollResponderScrollTo","x","y","animated","console","warn","_ref","node","left","top","scroll","behavior","scrollLeft","scrollTop","scrollResponderZoomTo","rect","OS","scrollResponderFlashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","additionalScrollOffset","measureLayout","getInnerViewNode","scrollResponderTextInputFocusError","scrollResponderInputMeasureAndScrollToKeyboard","width","height","keyboardScreenY","get","keyboardWillOpenTo","endCoordinates","screenY","scrollOffsetY","Math","max","error","UNSAFE_componentWillMount","scrollResponderKeyboardWillShow","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","ScrollResponder","Mixin","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _Dimensions = _interopRequireDefault(require(\"../../exports/Dimensions\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../../exports/findNodeHandle\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _Platform = _interopRequireDefault(require(\"../../exports/Platform\"));\n\nvar _TextInputState = _interopRequireDefault(require(\"../TextInputState\"));\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nvar _warning = _interopRequireDefault(require(\"fbjs/lib/warning\"));\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Mixin that can be integrated in order to handle scrolling that plays well\n * with `ResponderEventPlugin`. Integrate with your platform specific scroll\n * views, or even your custom built (every-frame animating) scroll views so that\n * all of these systems play well with the `ResponderEventPlugin`.\n *\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollResponder` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. The `ScrollResponder` is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\nvar emptyObject = {};\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar ScrollResponderMixin = {\n  // mixins: [Subscribable.Mixin],\n  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n      // Reset to false every time becomes responder. This is used to:\n      // - Determine if the scroll view has been scrolled and therefore should\n      // refuse to give up its responder lock.\n      // - Determine if releasing should dismiss the keyboard when we are in\n      // tap-to-dismiss mode (!this.props.keyboardShouldPersistTaps).\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false\n    };\n  },\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {\n    return this.state.isTouching;\n  },\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {\n    return false;\n  },\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not the focused input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {\n    // First see if we want to eat taps while the keyboard is up\n    // var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    // if (!this.props.keyboardShouldPersistTaps &&\n    //   currentlyFocusedTextInput != null &&\n    //   e.target !== currentlyFocusedTextInput) {\n    //   return true;\n    // }\n    return this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {\n    (0, _warning.default)(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\n  },\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {SyntheticEvent} e Event.\n   */\n  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {\n    var nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e); // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n\n    var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedField();\n\n    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {\n      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\n\n      _TextInputState.default.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {\n    this.state.lastMomentumScrollBeginTime = Date.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {\n    this.state.lastMomentumScrollEndTime = Date.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  scrollResponderIsAnimating: function scrollResponderIsAnimating() {\n    var now = Date.now();\n    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;\n    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n\n  /**\n   * Returns the node that represents native view that can be scrolled.\n   * Components can pass what node to use by defining a `getScrollableNode`\n   * function otherwise `this` is used.\n   */\n  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {\n    return this.getScrollableNode ? this.getScrollableNode() : (0, _findNodeHandle.default)(this);\n  },\n\n  /**\n   * A helper function to scroll to a specific point in the scrollview.\n   * This is currently used to help focus on child textviews, but can also\n   * be used to quickly scroll to any element we want to focus. Syntax:\n   *\n   * scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n   *\n   * Note: The weird argument signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as as alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {\n    if (typeof x === 'number') {\n      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\n    } else {\n      var _ref = x || emptyObject;\n\n      x = _ref.x;\n      y = _ref.y;\n      animated = _ref.animated;\n    }\n\n    var node = this.scrollResponderGetScrollableNode();\n    var left = x || 0;\n    var top = y || 0;\n\n    if (typeof node.scroll === 'function') {\n      node.scroll({\n        top,\n        left,\n        behavior: !animated ? 'auto' : 'smooth'\n      });\n    } else {\n      node.scrollLeft = left;\n      node.scrollTop = top;\n    }\n  },\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {\n    if (_Platform.default.OS !== 'ios') {\n      (0, _invariant.default)('zoomToRect is not implemented');\n    }\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {},\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {any} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's top \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n\n    _UIManager.default.measureLayout(nodeHandle, (0, _findNodeHandle.default)(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\n  },\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {\n    var keyboardScreenY = _Dimensions.default.get('window').height;\n\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n\n    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset; // By default, this can scroll with negative offset, pulling the content\n    // down so that the target component's bottom meets the keyboard's top.\n    // If requested otherwise, cap the offset at 0 minimum to avoid content\n    // shifting down.\n\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n\n    this.scrollResponderScrollTo({\n      x: 0,\n      y: scrollOffsetY,\n      animated: true\n    });\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {\n    console.error('Error measuring text field: ', e);\n  },\n\n  /**\n   * `componentWillMount` is the closest thing to a  standard \"constructor\" for\n   * React components.\n   *\n   * The `keyboardWillShow` is called before input focus.\n   */\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0; // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);\n  },\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` providesModule callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {\n    // TODO(7693961): The event for DidShow is not available on iOS yet.\n    // Use the one from WillShow and do not assign.\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  }\n};\nvar ScrollResponder = {\n  Mixin: ScrollResponderMixin\n};\nvar _default = ScrollResponder;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}