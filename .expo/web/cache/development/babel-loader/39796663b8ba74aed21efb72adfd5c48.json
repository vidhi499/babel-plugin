{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _createForOfIteratorHelperLoose from \"@babel/runtime/helpers/createForOfIteratorHelperLoose\";\nimport invariant from 'fbjs/lib/invariant';\nvar ViewabilityHelper = function () {\n  function ViewabilityHelper(config) {\n    _classCallCheck(this, ViewabilityHelper);\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  _createClass(ViewabilityHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._timers.forEach(clearTimeout);\n    }\n  }, {\n    key: \"computeViewableItems\",\n    value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {\n      var _this$_config = this._config,\n        itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n        viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n      var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n      var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n      invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n      var viewableIndices = [];\n      if (itemCount === 0) {\n        return viewableIndices;\n      }\n      var firstVisible = -1;\n      var _ref = renderRange || {\n          first: 0,\n          last: itemCount - 1\n        },\n        first = _ref.first,\n        last = _ref.last;\n      if (last >= itemCount) {\n        console.warn('Invalid render range computing viewability ' + JSON.stringify({\n          renderRange: renderRange,\n          itemCount: itemCount\n        }));\n        return [];\n      }\n      for (var idx = first; idx <= last; idx++) {\n        var metrics = getFrameMetrics(idx);\n        if (!metrics) {\n          continue;\n        }\n        var top = metrics.offset - scrollOffset;\n        var bottom = top + metrics.length;\n        if (top < viewportHeight && bottom > 0) {\n          firstVisible = idx;\n          if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n            viewableIndices.push(idx);\n          }\n        } else if (firstVisible >= 0) {\n          break;\n        }\n      }\n      return viewableIndices;\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {\n      var _this = this;\n      if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n        return;\n      }\n      var viewableIndices = [];\n      if (itemCount) {\n        viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n      }\n      if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {\n        return v === viewableIndices[ii];\n      })) {\n        return;\n      }\n      this._viewableIndices = viewableIndices;\n      if (this._config.minimumViewTime) {\n        var handle = setTimeout(function () {\n          _this._timers[\"delete\"](handle);\n          _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n        }, this._config.minimumViewTime);\n        this._timers.add(handle);\n      } else {\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }\n    }\n  }, {\n    key: \"resetViewableIndices\",\n    value: function resetViewableIndices() {\n      this._viewableIndices = [];\n    }\n  }, {\n    key: \"recordInteraction\",\n    value: function recordInteraction() {\n      this._hasInteracted = true;\n    }\n  }, {\n    key: \"_onUpdateSync\",\n    value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {\n      var _this2 = this;\n      viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {\n        return _this2._viewableIndices.includes(ii);\n      });\n      var prevItems = this._viewableItems;\n      var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {\n        var viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }));\n      var changed = [];\n      for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {\n        var _step$value = _step.value,\n          key = _step$value[0],\n          viewable = _step$value[1];\n        if (!prevItems.has(key)) {\n          changed.push(viewable);\n        }\n      }\n      for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n        var _step2$value = _step2.value,\n          _key = _step2$value[0],\n          _viewable = _step2$value[1];\n        if (!nextItems.has(_key)) {\n          changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {\n            isViewable: false\n          }));\n        }\n      }\n      if (changed.length > 0) {\n        this._viewableItems = nextItems;\n        onViewableItemsChanged({\n          viewableItems: Array.from(nextItems.values()),\n          changed: changed,\n          viewabilityConfig: this._config\n        });\n      }\n    }\n  }]);\n  return ViewabilityHelper;\n}();\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\nexport default ViewabilityHelper;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/ViewabilityHelper/index.js"],"names":["_objectSpread","_createForOfIteratorHelperLoose","invariant","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","_this$_config","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","first","last","console","warn","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","_iterator","_step","done","_step$value","value","has","_iterator2","_step2","_step2$value","_key","_viewable","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _createForOfIteratorHelperLoose from \"@babel/runtime/helpers/createForOfIteratorHelperLoose\";\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  constructor(config) {\n    if (config === void 0) {\n      config = {\n        viewAreaCoveragePercentThreshold: 0\n      };\n    }\n\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n\n\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n\n\n  computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange // Optional optimization to reduce the scan size\n  ) {\n    var _this$_config = this._config,\n        itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n        viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n    var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n    invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n    var viewableIndices = [];\n\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n\n    var firstVisible = -1;\n\n    var _ref = renderRange || {\n      first: 0,\n      last: itemCount - 1\n    },\n        first = _ref.first,\n        last = _ref.last;\n\n    if (last >= itemCount) {\n      console.warn('Invalid render range computing viewability ' + JSON.stringify({\n        renderRange,\n        itemCount\n      }));\n      return [];\n    }\n\n    for (var idx = first; idx <= last; idx++) {\n      var metrics = getFrameMetrics(idx);\n\n      if (!metrics) {\n        continue;\n      }\n\n      var top = metrics.offset - scrollOffset;\n      var bottom = top + metrics.length;\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n\n        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n\n    return viewableIndices;\n  }\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n\n\n  onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange // Optional optimization to reduce the scan size\n  ) {\n    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {\n      return;\n    }\n\n    var viewableIndices = [];\n\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n    }\n\n    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n\n    this._viewableIndices = viewableIndices;\n\n    if (this._config.minimumViewTime) {\n      var handle = setTimeout(() => {\n        this._timers.delete(handle);\n\n        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n      }, this._config.minimumViewTime);\n\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);\n    }\n  }\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n\n\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n\n\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync( // $FlowFixMe\n  viewableIndicesToCheck, // $FlowFixMe\n  onViewableItemsChanged, // $FlowFixMe\n  createViewToken) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));\n    var prevItems = this._viewableItems;\n    var nextItems = new Map(viewableIndicesToCheck.map(ii => {\n      var viewable = createViewToken(ii, true);\n      return [viewable.key, viewable];\n    }));\n    var changed = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          viewable = _step$value[1];\n\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n      var _step2$value = _step2.value,\n          _key = _step2$value[0],\n          _viewable = _step2$value[1];\n\n      if (!nextItems.has(_key)) {\n        changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {\n          isViewable: false\n        }));\n      }\n    }\n\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config\n      });\n    }\n  }\n\n}\n\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nexport default ViewabilityHelper;"]},"metadata":{},"sourceType":"module"}