{"ast":null,"code":"import canUseDOM from \"../../modules/canUseDom\";\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\nvar handlers = {};\nvar AccessibilityInfo = {\n  isScreenReaderEnabled: isScreenReaderEnabled,\n  isReduceMotionEnabled: isReduceMotionEnabled,\n  fetch: isScreenReaderEnabled,\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n      removeChangeListener(listener);\n    }\n    return;\n  }\n};\nexport default AccessibilityInfo;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"names":["canUseDOM","isScreenReaderEnabled","Promise","resolve","reject","prefersReducedMotionMedia","window","matchMedia","isReduceMotionEnabled","matches","addChangeListener","fn","addEventListener","addListener","removeChangeListener","removeEventListener","removeListener","handlers","AccessibilityInfo","fetch","eventName","handler","listener","event","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement"],"mappings":"AAQA,OAAOA,SAAP;AAEA,SAASC,qBAAT,GAAiC;EAC/B,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtCD,OAAO,CAAC,IAAD,CAAPA;EACD,CAFM,CAAP;AAGD;AAED,IAAIE,yBAAyB,GAAGL,SAAS,IAAI,OAAOM,MAAM,CAACC,UAAd,KAA6B,UAA1CP,GAAuDM,MAAM,CAACC,UAAPD,CAAkB,kCAAlBA,CAAvDN,GAA+G,IAA/I;AAEA,SAASQ,qBAAT,GAAiC;EAC/B,OAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtCD,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB,CAACI,OAA7B,GAAuC,IAAjE,CAAPN;EACD,CAFM,CAAP;AAGD;AAED,SAASO,iBAAT,CAA2BC,EAA3B,EAA+B;EAC7B,IAAIN,yBAAyB,IAAI,IAAjC,EAAuC;IACrCA,yBAAyB,CAACO,gBAA1BP,IAA8C,IAA9CA,GAAqDA,yBAAyB,CAACO,gBAA1BP,CAA2C,QAA3CA,EAAqDM,EAArDN,CAArDA,GAAgHA,yBAAyB,CAACQ,WAA1BR,CAAsCM,EAAtCN,CAAhHA;EACD;AACF;AAED,SAASS,oBAAT,CAA8BH,EAA9B,EAAkC;EAChC,IAAIN,yBAAyB,IAAI,IAAjC,EAAuC;IACrCA,yBAAyB,CAACU,mBAA1BV,IAAiD,IAAjDA,GAAwDA,yBAAyB,CAACU,mBAA1BV,CAA8C,QAA9CA,EAAwDM,EAAxDN,CAAxDA,GAAsHA,yBAAyB,CAACW,cAA1BX,CAAyCM,EAAzCN,CAAtHA;EACD;AACF;AAED,IAAIY,QAAQ,GAAG,CAAA,CAAf;AACA,IAAIC,iBAAiB,GAAG;EAOtBjB,qBAAqB,EAArBA,qBAPsB;EAetBO,qBAAqB,EAArBA,qBAfsB;EAoBtBW,KAAK,EAAElB,qBApBe;EAyBtBW,gBAAgB,EAAE,SAASA,gBAAT,CAA0BQ,SAA1B,EAAqCC,OAArC,EAA8C;IAC9D,IAAID,SAAS,KAAK,qBAAlB,EAAyC;MACvC,IAAI,CAACf,yBAAL,EAAgC;QAC9B;MACD;MAED,IAAIiB,QAAQ,GAARA,SAAAA,QAAW,CAAA,KAAK,EAAI;QACtBD,OAAO,CAACE,KAAK,CAACd,OAAP,CAAPY;MACD,CAFD;MAIAX,iBAAiB,CAACY,QAAD,CAAjBZ;MACAO,QAAQ,CAACI,OAAD,CAARJ,GAAoBK,QAApBL;IACD;IAED,OAAO;MACLO,MAAM,EAAE,SAAA,MAAA,GAAA;QAAA,OAAMN,iBAAiB,CAACH,mBAAlBG,CAAsCE,SAAtCF,EAAiDG,OAAjDH,CAAN;MAAA;IADH,CAAP;EAGD,CA1CqB;EA+CtBO,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC,CAAE,CA/C5C;EAoDtBC,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,YAAlC,EAAgD,CAAE,CApDtD;EAyDtBb,mBAAmB,EAAE,SAASA,mBAAT,CAA6BK,SAA7B,EAAwCC,OAAxC,EAAiD;IACpE,IAAID,SAAS,KAAK,qBAAlB,EAAyC;MACvC,IAAIE,QAAQ,GAAGL,QAAQ,CAACI,OAAD,CAAvB;MAEA,IAAI,CAACC,QAAD,IAAa,CAACjB,yBAAlB,EAA6C;QAC3C;MACD;MAEDS,oBAAoB,CAACQ,QAAD,CAApBR;IACD;IAED;EACD;AArEqB,CAAxB;AAuEA,eAAeI,iBAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport canUseDOM from '../../modules/canUseDom';\n\nfunction isScreenReaderEnabled() {\n  return new Promise((resolve, reject) => {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise((resolve, reject) => {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled,\n\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = event => {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: () => AccessibilityInfo.removeEventListener(eventName, handler)\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}