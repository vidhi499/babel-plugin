{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nvar startNativeAnimationNextId = 1;\nvar Animation = function () {\n  function Animation() {\n    _classCallCheck(this, Animation);\n  }\n  _createClass(Animation, [{\n    key: \"start\",\n    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.__nativeId) {\n        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n      }\n    }\n  }, {\n    key: \"__getNativeAnimationConfig\",\n    value: function __getNativeAnimationConfig() {\n      throw new Error('This animation type cannot be offloaded to native');\n    }\n  }, {\n    key: \"__debouncedOnEnd\",\n    value: function __debouncedOnEnd(result) {\n      var onEnd = this.__onEnd;\n      this.__onEnd = null;\n      onEnd && onEnd(result);\n    }\n  }, {\n    key: \"__startNativeAnimation\",\n    value: function __startNativeAnimation(animatedValue) {\n      var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n      startNativeAnimationNextId += 1;\n      NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n      try {\n        animatedValue.__makeNative();\n        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n      } catch (e) {\n        throw e;\n      } finally {\n        NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n      }\n    }\n  }]);\n  return Animation;\n}();\nexport default Animation;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/Animation.js"],"names":["NativeAnimatedHelper","startNativeAnimationNextId","Animation","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__nativeId","API","stopAnimation","Error","result","__onEnd","startNativeAnimationWaitId","setWaitingForIdentifier","__makeNative","generateNewAnimationId","startAnimatingNode","__getNativeTag","__getNativeAnimationConfig","__debouncedOnEnd","bind","e","unsetWaitingForIdentifier"],"mappings":"AASA,YAAA;;;;AAEA,OAAOA,oBAAP;AACA,IAAIC,0BAA0B,GAAG,CAAjC;AAIMC,IAAAA,S;;;;;;WACJ,SAAA,KAAA,CAAMC,SAAN,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,iBAAlC,EAAqDC,aAArD,EAAoE,CAAE;;;WAEtE,SAAA,IAAA,GAAO;MACL,IAAI,IAAA,CAAKC,UAAT,EAAqB;QACnBR,oBAAoB,CAACS,GAArBT,CAAyBU,aAAzBV,CAAuC,IAAA,CAAKQ,UAA5CR,CAAAA;MACD;IACF;;;WAED,SAAA,0BAAA,GAA6B;MAG3B,MAAM,IAAIW,KAAJ,CAAU,mDAAV,CAAN;IACD;;;WAGD,SAAA,gBAAA,CAAiBC,MAAjB,EAAyB;MACvB,IAAIP,KAAK,GAAG,IAAA,CAAKQ,OAAjB;MACA,IAAA,CAAKA,OAAL,GAAe,IAAf;MACAR,KAAK,IAAIA,KAAK,CAACO,MAAD,CAAdP;IACD;;;WAED,SAAA,sBAAA,CAAuBE,aAAvB,EAAsC;MACpC,IAAIO,0BAA0B,GAAGb,0BAA0B,GAAG,iBAA9D;MACAA,0BAA0B,IAAI,CAA9BA;MACAD,oBAAoB,CAACS,GAArBT,CAAyBe,uBAAzBf,CAAiDc,0BAAjDd,CAAAA;MAEA,IAAI;QACFO,aAAa,CAACS,YAAdT,EAAAA;QAEA,IAAA,CAAKC,UAAL,GAAkBR,oBAAoB,CAACiB,sBAArBjB,EAAlB;QACAA,oBAAoB,CAACS,GAArBT,CAAyBkB,kBAAzBlB,CAA4C,IAAA,CAAKQ,UAAjDR,EAA6DO,aAAa,CAACY,cAAdZ,EAA7DP,EAA6F,IAAA,CAAKoB,0BAAL,EAA7FpB,EAAgI,IAAA,CAAKqB,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAhItB,CAAAA;MACD,CAAC,QAAOuB,CAAP,EAAU;QACV,MAAMA,CAAN;MACD,CAPD,SAOU;QACRvB,oBAAoB,CAACS,GAArBT,CAAyBwB,yBAAzBxB,CAAmDc,0BAAnDd,CAAAA;MACD;IACF;;;;AAIH,eAAeE,SAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar startNativeAnimationNextId = 1; // Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\n\nclass Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n\n  __getNativeAnimationConfig() {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  } // Helper function for subclasses to make sure onEnd is only called once.\n\n\n  __debouncedOnEnd(result) {\n    var onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n\n  __startNativeAnimation(animatedValue) {\n    var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n\n    try {\n      animatedValue.__makeNative();\n\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n\n}\n\nexport default Animation;"]},"metadata":{},"sourceType":"module"}