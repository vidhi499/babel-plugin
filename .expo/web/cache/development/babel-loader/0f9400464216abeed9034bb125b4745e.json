{"ast":null,"code":"import _classCallCheck from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/createClass.js\";\nimport { isStartish, isMoveish, isEndish } from \"./ResponderEventTypes\";\nvar __DEV__ = true;\nvar MAX_TOUCH_BANK = 20;\nfunction timestampForTouch(touch) {\n  return touch.timeStamp || touch.timestamp;\n}\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n  return identifier;\n}\nfunction recordTouchStart(touch, touchHistory) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchHistory.touchBank[identifier];\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchHistory.touchBank[identifier] = createTouchRecord(touch);\n  }\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\nfunction recordTouchMove(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\nfunction recordTouchEnd(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\nfunction printTouchBank(touchHistory) {\n  var touchBank = touchHistory.touchBank;\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n  return printed;\n}\nexport var ResponderTouchHistoryStore = function () {\n  function ResponderTouchHistoryStore() {\n    _classCallCheck(this, ResponderTouchHistoryStore);\n    this._touchHistory = {\n      touchBank: [],\n      numberActiveTouches: 0,\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n  }\n  _createClass(ResponderTouchHistoryStore, [{\n    key: \"recordTouchTrack\",\n    value: function recordTouchTrack(topLevelType, nativeEvent) {\n      var touchHistory = this._touchHistory;\n      if (isMoveish(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchMove(touch, touchHistory);\n        });\n      } else if (isStartish(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchStart(touch, touchHistory);\n        });\n        touchHistory.numberActiveTouches = nativeEvent.touches.length;\n        if (touchHistory.numberActiveTouches === 1) {\n          touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n        }\n      } else if (isEndish(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchEnd(touch, touchHistory);\n        });\n        touchHistory.numberActiveTouches = nativeEvent.touches.length;\n        if (touchHistory.numberActiveTouches === 1) {\n          var touchBank = touchHistory.touchBank;\n          for (var i = 0; i < touchBank.length; i++) {\n            var touchTrackToCheck = touchBank[i];\n            if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n              touchHistory.indexOfSingleActiveTouch = i;\n              break;\n            }\n          }\n          if (__DEV__) {\n            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n            if (!(activeRecord != null && activeRecord.touchActive)) {\n              console.error('Cannot find single active touch.');\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"touchHistory\",\n    get: function get() {\n      return this._touchHistory;\n    }\n  }]);\n  return ResponderTouchHistoryStore;\n}();\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/modules/useResponderEvents/ResponderTouchHistoryStore.js"],"names":["isStartish","isMoveish","isEndish","__DEV__","MAX_TOUCH_BANK","timestampForTouch","touch","timeStamp","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","_ref","identifier","console","error","recordTouchStart","touchHistory","touchBank","mostRecentTimeStamp","recordTouchMove","warn","printTouch","printTouchBank","recordTouchEnd","JSON","stringify","printed","slice","length","ResponderTouchHistoryStore","_touchHistory","numberActiveTouches","indexOfSingleActiveTouch","topLevelType","nativeEvent","changedTouches","forEach","touches","i","touchTrackToCheck","activeRecord"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { isStartish, isMoveish, isEndish } from './ResponderEventTypes';\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar MAX_TOUCH_BANK = 20;\n\nfunction timestampForTouch(touch) {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\".\n  return touch.timeStamp || touch.timestamp;\n}\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\n\n\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n\n  return identifier;\n}\n\nfunction recordTouchStart(touch, touchHistory) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchHistory.touchBank[identifier];\n\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchHistory.touchBank[identifier] = createTouchRecord(touch);\n  }\n\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\n\nfunction recordTouchEnd(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\n\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank(touchHistory) {\n  var touchBank = touchHistory.touchBank;\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n\n  return printed;\n}\n\nexport class ResponderTouchHistoryStore {\n  constructor() {\n    this._touchHistory = {\n      touchBank: [],\n      //Array<TouchRecord>\n      numberActiveTouches: 0,\n      // If there is only one active touch, we remember its location. This prevents\n      // us having to loop through all of the touches all the time in the most\n      // common case.\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n  }\n\n  recordTouchTrack(topLevelType, nativeEvent) {\n    var touchHistory = this._touchHistory;\n\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(touch => recordTouchMove(touch, touchHistory));\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(touch => recordTouchStart(touch, touchHistory));\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(touch => recordTouchEnd(touch, touchHistory));\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        var touchBank = touchHistory.touchBank;\n\n        for (var i = 0; i < touchBank.length; i++) {\n          var touchTrackToCheck = touchBank[i];\n\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n\n        if (__DEV__) {\n          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  }\n\n  get touchHistory() {\n    return this._touchHistory;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}