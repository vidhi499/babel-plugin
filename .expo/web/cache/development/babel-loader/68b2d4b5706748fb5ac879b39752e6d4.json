{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"../../../exports/Platform\";\nimport RCTDeviceEventEmitter from \"./RCTDeviceEventEmitter\";\nimport invariant from \"fbjs/lib/invariant\";\nvar NativeEventEmitter = function () {\n  function NativeEventEmitter(nativeModule) {\n    _classCallCheck(this, NativeEventEmitter);\n    if (Platform.OS === \"ios\") {\n      invariant(nativeModule != null, \"`new NativeEventEmitter()` requires a non-null argument.\");\n      this._nativeModule = nativeModule;\n    }\n  }\n  _createClass(NativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this = this;\n      var _this$_nativeModule;\n      (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n      var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n      return {\n        remove: function remove() {\n          if (subscription != null) {\n            var _this$_nativeModule2;\n            (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n            subscription.remove();\n            subscription = null;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      var _this$_nativeModule3;\n      (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n      RCTDeviceEventEmitter.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      var _this$_nativeModule4;\n      invariant(eventType != null, \"`NativeEventEmitter.removeAllListener()` requires a non-null argument.\");\n      (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n      RCTDeviceEventEmitter.removeAllListeners(eventType);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      return RCTDeviceEventEmitter.listenerCount(eventType);\n    }\n  }]);\n  return NativeEventEmitter;\n}();\nexport { NativeEventEmitter as default };\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/index.js"],"names":["Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","constructor","nativeModule","OS","_nativeModule","addListener","eventType","listener","context","_this$_nativeModule","subscription","remove","_this$_nativeModule2","removeListeners","removeListener","_this$_nativeModule3","emit","_len","arguments","length","args","Array","_key","removeAllListeners","_this$_nativeModule4","listenerCount"],"mappings":"AASA,YAAA;;AAAA;AAAA;AAEA,OAAOA,QAAAA;AACP,OAAOC,qBAAAA;AACP,OAAOC,SAAAA,MAAe,oBAAA;AAAqB,IAYtBC,kBAAAA;EACnBC,4BAAYC,YAAY,EAAE;IAAA;IACxB,IAAIL,QAAAA,CAASM,EAAE,KAAK,KAAA,EAAO;MACzBJ,SAAAA,CAAUG,YAAAA,IAAgB,IAAI,EAAE,0DAAA,CAAA;MAChC,IAAI,CAACE,aAAa,GAAGF,YAAAA;IACvB;EACF;EAAA;IAAA;IAAA,OAEAG,qBAAYC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAE;MAAA;MACxC,IAAIC,mBAAAA;MAEHA,CAAAA,mBAAAA,GAAsB,IAAI,CAACL,aAAa,KAAK,IAAI,GAAG,KAAK,CAAA,GAAIK,mBAAAA,CAAoBJ,WAAW,CAACC,SAAAA,CAAU;MACxG,IAAII,YAAAA,GAAeZ,qBAAAA,CAAsBO,WAAW,CAACC,SAAAA,EAAWC,QAAAA,EAAUC,OAAAA,CAAAA;MAC1E,OAAO;QACLG,MAAAA,EAAQ,kBAAM;UACZ,IAAID,YAAAA,IAAgB,IAAI,EAAE;YACxB,IAAIE,oBAAAA;YAEHA,CAAAA,oBAAAA,GAAuB,KAAI,CAACR,aAAa,KAAK,IAAI,GAAG,KAAK,CAAA,GAAIQ,oBAAAA,CAAqBC,eAAe,CAAC,CAAA,CAAE;YAEtGH,YAAAA,CAAaC,MAAM,EAAA;YACnBD,YAAAA,GAAe,IAAI;UACrB;QACF;MACF,CAAA;IACF;EAAA;IAAA;IAAA,OAMAI,wBAAeR,SAAS,EAAEC,QAAQ,EAAE;MAClC,IAAIQ,oBAAAA;MAEHA,CAAAA,oBAAAA,GAAuB,IAAI,CAACX,aAAa,KAAK,IAAI,GAAG,KAAK,CAAA,GAAIW,oBAAAA,CAAqBF,eAAe,CAAC,CAAA,CAAE;MAGtGf,qBAAAA,CAAsBgB,cAAc,CAACR,SAAAA,EAAWC,QAAAA,CAAAA;IAClD;EAAA;IAAA;IAAA,OAEAS,cAAKV,SAAS,EAAE;MACd,KAAK,IAAIW,IAAAA,GAAOC,SAAAA,CAAUC,MAAM,EAAEC,IAAAA,GAAO,IAAIC,KAAAA,CAAMJ,IAAAA,GAAO,CAAA,GAAIA,IAAAA,GAAO,CAAA,GAAI,CAAC,CAAA,EAAGK,IAAAA,GAAO,CAAA,EAAGA,IAAAA,GAAOL,IAAAA,EAAMK,IAAAA,EAAAA,EAAQ;QAC1GF,IAAI,CAACE,IAAAA,GAAO,CAAA,CAAE,GAAGJ,SAAS,CAACI,IAAAA,CAAK;MAClC;MAIAxB,qBAAAA,CAAsBkB,IAAI,OAA1BlB,qBAAAA,GAA2BQ,SAAAA,SAAcc,IAAAA,EAAAA;IAC3C;EAAA;IAAA;IAAA,OAEAG,4BAAmBjB,SAAS,EAAE;MAC5B,IAAIkB,oBAAAA;MAEJzB,SAAAA,CAAUO,SAAAA,IAAa,IAAI,EAAE,wEAAA,CAAA;MAC5BkB,CAAAA,oBAAAA,GAAuB,IAAI,CAACpB,aAAa,KAAK,IAAI,GAAG,KAAK,CAAA,GAAIoB,oBAAAA,CAAqBX,eAAe,CAAC,IAAI,CAACY,aAAa,CAACnB,SAAAA,CAAAA,CAAW;MAClIR,qBAAAA,CAAsByB,kBAAkB,CAACjB,SAAAA,CAAAA;IAC3C;EAAA;IAAA;IAAA,OAEAmB,uBAAcnB,SAAS,EAAE;MACvB,OAAOR,qBAAAA,CAAsB2B,aAAa,CAACnB,SAAAA,CAAAA;IAC7C;EAAA;EAAA;AAAA;AA5DF,SAAqBN,kBAAAA,IAAAA,OAAAA","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter {\n  constructor(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(eventType, listener, context) {\n    var _this$_nativeModule;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: () => {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\n\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  }\n\n  emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}