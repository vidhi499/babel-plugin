{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"href\", \"target\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { forwardRef } from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"../primitives/Text\";\nexport var A = forwardRef(function (_ref, ref) {\n  var href = _ref.href,\n    target = _ref.target,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var nativeProps = Platform.select({\n    web: {\n      href: href,\n      target: target\n    },\n    default: {\n      onPress: function onPress(event) {\n        props.onPress && props.onPress(event);\n        if (Platform.OS !== 'web' && href !== undefined) {\n          Linking.openURL(href);\n        }\n      }\n    }\n  });\n  return React.createElement(Text, _objectSpread(_objectSpread(_objectSpread({\n    accessibilityRole: \"link\"\n  }, props), nativeProps), {}, {\n    ref: ref\n  }));\n});","map":{"version":3,"sources":["../../src/elements/Anchor.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAK,IAAmB,UAAU,QAAQ,OAAO;AAAC;AAAA;AAGzD,OAAO,IAAI;AAGX,OAAO,IAAM,CAAC,GAAG,UAAU,CAAC,gBAAwC,GAAG,EAAI;EAAA,IAA5C,IAAI,QAAJ,IAAI;IAAE,MAAM,QAAN,MAAM;IAAK,KAAK;EACnD,IAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAY;IAC7C,GAAG,EAAE;MACH,IAAI,EAAJ,IAAI;MACJ,MAAM,EAAN;KACD;IACD,OAAO,EAAE;MACP,OAAO,EAAE,iBAAC,KAAK,EAAI;QACjB,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACrC,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,IAAI,KAAK,SAAS,EAAE;UAC/C,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;QACtB;MACH;IACD;GACF,CAAC;EACF,OAAO,KAAA,CAAA,aAAA,CAAC,IAAI;IAAC,iBAAiB,EAAC;EAAM,GAAK,KAAK,GAAM,WAAW;IAAE,GAAG,EAAE;EAAG,GAAI;AAChF,CAAC,CAA6B","sourcesContent":["import React, { ComponentType, forwardRef } from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport Text from '../primitives/Text';\nimport { LinkProps } from './Text.types';\n\nexport const A = forwardRef(({ href, target, ...props }: LinkProps, ref) => {\n  const nativeProps = Platform.select<LinkProps>({\n    web: {\n      href,\n      target,\n    },\n    default: {\n      onPress: (event) => {\n        props.onPress && props.onPress(event);\n        if (Platform.OS !== 'web' && href !== undefined) {\n          Linking.openURL(href);\n        }\n      },\n    },\n  });\n  return <Text accessibilityRole=\"link\" {...props} {...nativeProps} ref={ref} />;\n}) as ComponentType<LinkProps>;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}