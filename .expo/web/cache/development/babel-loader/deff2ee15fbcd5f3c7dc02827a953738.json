{"ast":null,"code":"'use strict';\n\nimport _createClass from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/VidhiKataria/Documents/Projects/testing123/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nvar Info = _createClass(function Info() {\n  _classCallCheck(this, Info);\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n});\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\nvar _sampleRate = DEBUG ? 1 : null;\nvar FillRateHelper = function () {\n  function FillRateHelper(getFrameMetrics) {\n    _classCallCheck(this, FillRateHelper);\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n  _createClass(FillRateHelper, [{\n    key: \"activate\",\n    value: function activate() {\n      if (this._enabled && this._samplesStartTime == null) {\n        DEBUG && console.debug('FillRateHelper: activate');\n        this._samplesStartTime = global.performance.now();\n      }\n    }\n  }, {\n    key: \"deactivateAndFlush\",\n    value: function deactivateAndFlush() {\n      if (!this._enabled) {\n        return;\n      }\n      var start = this._samplesStartTime;\n      if (start == null) {\n        DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n        return;\n      }\n      if (this._info.sample_count < _minSampleCount) {\n        this._resetData();\n        return;\n      }\n      var total_time_spent = global.performance.now() - start;\n      var info = _objectSpread(_objectSpread({}, this._info), {}, {\n        total_time_spent: total_time_spent\n      });\n      if (DEBUG) {\n        var derived = {\n          avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n          avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n          avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n          any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n          any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n          mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n          mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n        };\n        for (var key in derived) {\n          derived[key] = Math.round(1000 * derived[key]) / 1000;\n        }\n        console.debug('FillRateHelper deactivateAndFlush: ', {\n          derived: derived,\n          info: info\n        });\n      }\n      _listeners.forEach(function (listener) {\n        return listener(info);\n      });\n      this._resetData();\n    }\n  }, {\n    key: \"computeBlankness\",\n    value: function computeBlankness(props, state, scrollMetrics) {\n      if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n        return 0;\n      }\n      var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength;\n      this._info.sample_count++;\n      this._info.pixels_sampled += Math.round(visibleLength);\n      this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n      var scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n      var now = global.performance.now();\n      if (this._anyBlankStartTime != null) {\n        this._info.any_blank_ms += now - this._anyBlankStartTime;\n      }\n      this._anyBlankStartTime = null;\n      if (this._mostlyBlankStartTime != null) {\n        this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n      }\n      this._mostlyBlankStartTime = null;\n      var blankTop = 0;\n      var first = state.first;\n      var firstFrame = this._getFrameMetrics(first);\n      while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n        firstFrame = this._getFrameMetrics(first);\n        first++;\n      }\n      if (firstFrame && first > 0) {\n        blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n      }\n      var blankBottom = 0;\n      var last = state.last;\n      var lastFrame = this._getFrameMetrics(last);\n      while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n        lastFrame = this._getFrameMetrics(last);\n        last--;\n      }\n      if (lastFrame && last < props.getItemCount(props.data) - 1) {\n        var bottomEdge = lastFrame.offset + lastFrame.length;\n        blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n      }\n      var pixels_blank = Math.round(blankTop + blankBottom);\n      var blankness = pixels_blank / visibleLength;\n      if (blankness > 0) {\n        this._anyBlankStartTime = now;\n        this._info.any_blank_speed_sum += scrollSpeed;\n        this._info.any_blank_count++;\n        this._info.pixels_blank += pixels_blank;\n        if (blankness > 0.5) {\n          this._mostlyBlankStartTime = now;\n          this._info.mostly_blank_count++;\n        }\n      } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n        this.deactivateAndFlush();\n      }\n      return blankness;\n    }\n  }, {\n    key: \"enabled\",\n    value: function enabled() {\n      return this._enabled;\n    }\n  }, {\n    key: \"_resetData\",\n    value: function _resetData() {\n      this._anyBlankStartTime = null;\n      this._info = new Info();\n      this._mostlyBlankStartTime = null;\n      this._samplesStartTime = null;\n    }\n  }], [{\n    key: \"addListener\",\n    value: function addListener(callback) {\n      if (_sampleRate === null) {\n        console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n      }\n      _listeners.push(callback);\n      return {\n        remove: function remove() {\n          _listeners = _listeners.filter(function (listener) {\n            return callback !== listener;\n          });\n        }\n      };\n    }\n  }, {\n    key: \"setSampleRate\",\n    value: function setSampleRate(sampleRate) {\n      _sampleRate = sampleRate;\n    }\n  }, {\n    key: \"setMinSampleCount\",\n    value: function setMinSampleCount(minSampleCount) {\n      _minSampleCount = minSampleCount;\n    }\n  }]);\n  return FillRateHelper;\n}();\nexport default FillRateHelper;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/FillRateHelper/index.js"],"names":["_objectSpread","Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","callback","console","warn","push","remove","filter","listener","sampleRate","minSampleCount","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","debug","global","performance","now","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","props","state","scrollMetrics","getItemCount","data","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","first","firstFrame","last","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","deactivateAndFlush"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n\nclass Info {\n  constructor() {\n    this.any_blank_count = 0;\n    this.any_blank_ms = 0;\n    this.any_blank_speed_sum = 0;\n    this.mostly_blank_count = 0;\n    this.mostly_blank_ms = 0;\n    this.pixels_blank = 0;\n    this.pixels_sampled = 0;\n    this.pixels_scrolled = 0;\n    this.total_time_spent = 0;\n    this.sample_count = 0;\n  }\n\n}\n\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\n\nvar _sampleRate = DEBUG ? 1 : null;\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\n\n\nclass FillRateHelper {\n  static addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n\n    _listeners.push(callback);\n\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      }\n    };\n  }\n\n  static setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(getFrameMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n\n    var start = this._samplesStartTime; // const for flow\n\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n\n      return;\n    }\n\n    var total_time_spent = global.performance.now() - start;\n\n    var info = _objectSpread(_objectSpread({}, this._info), {}, {\n      total_time_spent\n    });\n\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived,\n        info\n      });\n    }\n\n    _listeners.forEach(listener => listener(info));\n\n    this._resetData();\n  }\n\n  computeBlankness(props, state, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n      return 0;\n    }\n\n    var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength; // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n\n    var now = global.performance.now();\n\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n\n    this._anyBlankStartTime = null;\n\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = state.first;\n\n    var firstFrame = this._getFrameMetrics(first);\n\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    } // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n\n\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n\n    var blankBottom = 0;\n    var last = state.last;\n\n    var lastFrame = this._getFrameMetrics(last);\n\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    } // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n\n\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n\n    return blankness;\n  }\n\n  enabled() {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n\n}\n\nexport default FillRateHelper;"]},"metadata":{},"sourceType":"module"}