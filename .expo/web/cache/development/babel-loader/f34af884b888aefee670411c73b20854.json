{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nexports.__esModule = true;\nexports.default = void 0;\nvar clipboardAvailable;\nvar Clipboard = function () {\n  function Clipboard() {\n    _classCallCheck(this, Clipboard);\n  }\n  _createClass(Clipboard, null, [{\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      if (clipboardAvailable === undefined) {\n        clipboardAvailable = typeof document.queryCommandSupported === \"function\" && document.queryCommandSupported(\"copy\");\n      }\n      return clipboardAvailable;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString() {\n      return Promise.resolve(\"\");\n    }\n  }, {\n    key: \"setString\",\n    value: function setString(text) {\n      var success = false;\n      var body = document.body;\n      if (body) {\n        var node = document.createElement(\"span\");\n        node.textContent = text;\n        node.style.opacity = \"0\";\n        node.style.position = \"absolute\";\n        node.style.whiteSpace = \"pre-wrap\";\n        node.style.userSelect = \"auto\";\n        body.appendChild(node);\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        var range = document.createRange();\n        range.selectNodeContents(node);\n        selection.addRange(range);\n        try {\n          document.execCommand(\"copy\");\n          success = true;\n        } catch (e) {}\n        selection.removeAllRanges();\n        body.removeChild(node);\n      }\n      return success;\n    }\n  }]);\n  return Clipboard;\n}();\nexports.default = Clipboard;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/cjs/exports/Clipboard/index.js"],"names":["exports","__esModule","default","clipboardAvailable","Clipboard","undefined","document","queryCommandSupported","Promise","resolve","text","success","body","node","createElement","textContent","style","opacity","position","whiteSpace","userSelect","appendChild","selection","window","getSelection","removeAllRanges","range","createRange","selectNodeContents","addRange","execCommand","e","removeChild","module"],"mappings":"AAAA,YAAA;;AAAA;AAAA;AAEAA,OAAAA,CAAQC,UAAU,GAAG,IAAI;AACzBD,OAAAA,CAAQE,OAAO,GAAG,KAAK,CAAA;AAWvB,IAAIC,kBAAAA;AAAAA,IAEEC,SAAAA;EAAAA;IAAAA;EAAAA;EAAAA;IAAAA;IAAAA,OACJ,uBAAqB;MACnB,IAAID,kBAAAA,KAAuBE,SAAAA,EAAW;QACpCF,kBAAAA,GAAqB,OAAOG,QAAAA,CAASC,qBAAqB,KAAK,UAAA,IAAcD,QAAAA,CAASC,qBAAqB,CAAC,MAAA,CAAA;MAC9G;MAEA,OAAOJ,kBAAAA;IACT;EAAA;IAAA;IAAA,OAEA,qBAAmB;MACjB,OAAOK,OAAAA,CAAQC,OAAO,CAAC,EAAA,CAAA;IACzB;EAAA;IAAA;IAAA,OAEA,mBAAiBC,IAAI,EAAE;MACrB,IAAIC,OAAAA,GAAU,KAAK;MACnB,IAAIC,IAAAA,GAAON,QAAAA,CAASM,IAAI;MAExB,IAAIA,IAAAA,EAAM;QAER,IAAIC,IAAAA,GAAOP,QAAAA,CAASQ,aAAa,CAAC,MAAA,CAAA;QAClCD,IAAAA,CAAKE,WAAW,GAAGL,IAAAA;QACnBG,IAAAA,CAAKG,KAAK,CAACC,OAAO,GAAG,GAAA;QACrBJ,IAAAA,CAAKG,KAAK,CAACE,QAAQ,GAAG,UAAA;QACtBL,IAAAA,CAAKG,KAAK,CAACG,UAAU,GAAG,UAAA;QACxBN,IAAAA,CAAKG,KAAK,CAACI,UAAU,GAAG,MAAA;QACxBR,IAAAA,CAAKS,WAAW,CAACR,IAAAA,CAAAA;QAEjB,IAAIS,SAAAA,GAAYC,MAAAA,CAAOC,YAAY,EAAA;QACnCF,SAAAA,CAAUG,eAAe,EAAA;QACzB,IAAIC,KAAAA,GAAQpB,QAAAA,CAASqB,WAAW,EAAA;QAChCD,KAAAA,CAAME,kBAAkB,CAACf,IAAAA,CAAAA;QACzBS,SAAAA,CAAUO,QAAQ,CAACH,KAAAA,CAAAA;QAEnB,IAAI;UACFpB,QAAAA,CAASwB,WAAW,CAAC,MAAA,CAAA;UACrBnB,OAAAA,GAAU,IAAI;QAChB,CAAA,CAAE,OAAOoB,CAAAA,EAAG,CAAC;QAGbT,SAAAA,CAAUG,eAAe,EAAA;QACzBb,IAAAA,CAAKoB,WAAW,CAACnB,IAAAA,CAAAA;MACnB;MAEA,OAAOF,OAAAA;IACT;EAAA;EAAA;AAAA;AAIFX,OAAAA,CAAQE,OAAO,GAAGE,SAAAA;AAClB6B,MAAAA,CAAOjC,OAAO,GAAGA,OAAAA,CAAQE,OAAO","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar clipboardAvailable;\n\nclass Clipboard {\n  static isAvailable() {\n    if (clipboardAvailable === undefined) {\n      clipboardAvailable = typeof document.queryCommandSupported === 'function' && document.queryCommandSupported('copy');\n    }\n\n    return clipboardAvailable;\n  }\n\n  static getString() {\n    return Promise.resolve('');\n  }\n\n  static setString(text) {\n    var success = false;\n    var body = document.body;\n\n    if (body) {\n      // add the text to a hidden node\n      var node = document.createElement('span');\n      node.textContent = text;\n      node.style.opacity = '0';\n      node.style.position = 'absolute';\n      node.style.whiteSpace = 'pre-wrap';\n      node.style.userSelect = 'auto';\n      body.appendChild(node); // select the text\n\n      var selection = window.getSelection();\n      selection.removeAllRanges();\n      var range = document.createRange();\n      range.selectNodeContents(node);\n      selection.addRange(range); // attempt to copy\n\n      try {\n        document.execCommand('copy');\n        success = true;\n      } catch (e) {} // remove selection and node\n\n\n      selection.removeAllRanges();\n      body.removeChild(node);\n    }\n\n    return success;\n  }\n\n}\n\nexports.default = Clipboard;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}