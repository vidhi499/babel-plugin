{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { forwardRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"../primitives/Text\";\nimport View from \"../primitives/View\";\nfunction createView() {\n  var nativeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return forwardRef(function (props, ref) {\n    return React.createElement(View, _objectSpread(_objectSpread(_objectSpread({}, nativeProps), props), {}, {\n      ref: ref\n    }));\n  });\n}\nexport var UL = createView(Platform.select({\n  web: {\n    accessibilityRole: 'list'\n  }\n}));\nfunction isTextProps(props) {\n  return typeof props.children === 'string';\n}\nexport var LI = forwardRef(function (props, ref) {\n  if (isTextProps(props)) {\n    var _accessibilityRole = Platform.select({\n      web: 'listitem',\n      default: props.accessibilityRole\n    });\n    return React.createElement(Text, _objectSpread(_objectSpread({}, props), {}, {\n      accessibilityRole: _accessibilityRole,\n      ref: ref\n    }));\n  }\n  var accessibilityRole = Platform.select({\n    web: 'listitem',\n    default: props.accessibilityRole\n  });\n  return React.createElement(View, _objectSpread(_objectSpread({}, props), {}, {\n    accessibilityRole: accessibilityRole,\n    ref: ref\n  }));\n});","map":{"version":3,"sources":["../../src/elements/Lists.tsx"],"names":[],"mappings":";;;AAAA,OAAO,KAAK,IAAmB,UAAU,QAA2B,OAAO;AAAC;AAG5E,OAAO,IAAmB;AAC1B,OAAO,IAAmB;AAE1B,SAAS,UAAU,GAA4B;EAAA,IAA3B,WAAA,uEAAyB,CAAA,CAAE;EAC7C,OAAO,UAAU,CAAC,UAAC,KAAgB,EAAE,GAAG,EAAI;IAC1C,OAAO,KAAA,CAAA,aAAA,CAAC,IAAI,gDAAK,WAAW,GAAM,KAAK;MAAE,GAAG,EAAE;IAAG,GAAI;EACvD,CAAC,CAA6B;AAChC;AAEA,OAAO,IAAM,EAAE,GAAG,UAAU,CAC1B,QAAQ,CAAC,MAAM,CAAC;EACd,GAAG,EAAE;IACH,iBAAiB,EAAE;EACpB;CACF,CAAC,CACH;AAED,SAAS,WAAW,CAAC,KAAU,EAAA;EAE7B,OAAO,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;AAC3C;AAIA,OAAO,IAAM,EAAE,GAAG,UAAU,CAAC,UAAC,KAAiC,EAAE,GAAQ,EAAI;EAC3E,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;IACtB,IAAM,kBAAiB,GAAiC,QAAQ,CAAC,MAAM,CAAC;MACtE,GAAG,EAAE,UAAU;MACf,OAAO,EAAE,KAAK,CAAC;KAChB,CAAC;IACF,OAAO,KAAA,CAAA,aAAA,CAAC,IAAI,kCAAK,KAAK;MAAE,iBAAiB,EAAE,kBAAiB;MAAE,GAAG,EAAE;IAAG,GAAI;EAC3E;EACD,IAAM,iBAAiB,GAAiC,QAAQ,CAAC,MAAM,CAAC;IACtE,GAAG,EAAE,UAAU;IACf,OAAO,EAAE,KAAK,CAAC;GAChB,CAAC;EACF,OAAO,KAAA,CAAA,aAAA,CAAC,IAAI,kCAAK,KAAK;IAAE,iBAAiB,EAAE,iBAAiB;IAAE,GAAG,EAAE;EAAG,GAAI;AAC5E,CAAC,CAA2B","sourcesContent":["import React, { ComponentType, forwardRef, PropsWithChildren } from 'react';\nimport { Platform } from 'react-native';\n\nimport Text, { TextProps } from '../primitives/Text';\nimport View, { ViewProps } from '../primitives/View';\n\nfunction createView(nativeProps: ViewProps = {}): ComponentType<ViewProps> {\n  return forwardRef((props: ViewProps, ref) => {\n    return <View {...nativeProps} {...props} ref={ref} />;\n  }) as ComponentType<ViewProps>;\n}\n\nexport const UL = createView(\n  Platform.select({\n    web: {\n      accessibilityRole: 'list',\n    },\n  })\n);\n\nfunction isTextProps(props: any): props is TextProps {\n  // Treat <li></li> as a Text element.\n  return typeof props.children === 'string';\n}\n\ntype LIProps = TextProps | ViewProps;\n\nexport const LI = forwardRef((props: PropsWithChildren<LIProps>, ref: any) => {\n  if (isTextProps(props)) {\n    const accessibilityRole: LIProps['accessibilityRole'] = Platform.select({\n      web: 'listitem',\n      default: props.accessibilityRole,\n    });\n    return <Text {...props} accessibilityRole={accessibilityRole} ref={ref} />;\n  }\n  const accessibilityRole: LIProps['accessibilityRole'] = Platform.select({\n    web: 'listitem',\n    default: props.accessibilityRole,\n  });\n  return <View {...props} accessibilityRole={accessibilityRole} ref={ref} />;\n}) as ComponentType<LIProps>;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}