{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedInterpolation from \"./AnimatedInterpolation\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nvar AnimatedDiffClamp = function (_AnimatedWithChildren) {\n  _inherits(AnimatedDiffClamp, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedDiffClamp);\n  function AnimatedDiffClamp(a, min, max) {\n    var _this;\n    _classCallCheck(this, AnimatedDiffClamp);\n    _this = _super.call(this);\n    _this._a = a;\n    _this._min = min;\n    _this._max = max;\n    _this._value = _this._lastValue = _this._a.__getValue();\n    return _this;\n  }\n  _createClass(AnimatedDiffClamp, [{\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      this._a.__makeNative();\n      _get(_getPrototypeOf(AnimatedDiffClamp.prototype), \"__makeNative\", this).call(this);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var value = this._a.__getValue();\n      var diff = value - this._lastValue;\n      this._lastValue = value;\n      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);\n      return this._value;\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._a.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._a.__removeChild(this);\n      _get(_getPrototypeOf(AnimatedDiffClamp.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      return {\n        type: \"diffclamp\",\n        input: this._a.__getNativeTag(),\n        min: this._min,\n        max: this._max\n      };\n    }\n  }]);\n  return AnimatedDiffClamp;\n}(AnimatedWithChildren);\nexport default AnimatedDiffClamp;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedDiffClamp.js"],"names":["AnimatedInterpolation","AnimatedNode","AnimatedWithChildren","AnimatedDiffClamp","constructor","a","min","max","_a","_min","_max","_value","_lastValue","__getValue","__makeNative","interpolate","config","value","diff","Math","__attach","__addChild","__detach","__removeChild","__getNativeConfig","type","input","__getNativeTag"],"mappings":"AASA,YAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,OAAOA,qBAAAA;AACP,OAAOC,YAAAA;AACP,OAAOC,oBAAAA;AAAmD,IAEpDC,iBAAAA;EAAAA;EAAAA;EACJC,2BAAYC,CAAC,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAAA;IAAA;IACvB;IACA,MAAKC,EAAE,GAAGH,CAAAA;IACV,MAAKI,IAAI,GAAGH,GAAAA;IACZ,MAAKI,IAAI,GAAGH,GAAAA;IACZ,MAAKI,MAAM,GAAG,MAAKC,UAAU,GAAG,MAAKJ,EAAE,CAACK,UAAU,EAAA;IAAA;EACpD;EAAA;IAAA;IAAA,OAEAC,wBAAe;MACb,IAAI,CAACN,EAAE,CAACM,YAAY,EAAA;MAEpB;IACF;EAAA;IAAA;IAAA,OAEAC,qBAAYC,MAAM,EAAE;MAClB,OAAO,IAAIhB,qBAAAA,CAAsB,IAAI,EAAEgB,MAAAA,CAAAA;IACzC;EAAA;IAAA;IAAA,OAEAH,sBAAa;MACX,IAAII,KAAAA,GAAQ,IAAI,CAACT,EAAE,CAACK,UAAU,EAAA;MAE9B,IAAIK,IAAAA,GAAOD,KAAAA,GAAQ,IAAI,CAACL,UAAU;MAClC,IAAI,CAACA,UAAU,GAAGK,KAAAA;MAClB,IAAI,CAACN,MAAM,GAAGQ,IAAAA,CAAKb,GAAG,CAACa,IAAAA,CAAKZ,GAAG,CAAC,IAAI,CAACI,MAAM,GAAGO,IAAAA,EAAM,IAAI,CAACT,IAAI,CAAA,EAAG,IAAI,CAACC,IAAI,CAAA;MACzE,OAAO,IAAI,CAACC,MAAM;IACpB;EAAA;IAAA;IAAA,OAEAS,oBAAW;MACT,IAAI,CAACZ,EAAE,CAACa,UAAU,CAAC,IAAI,CAAA;IACzB;EAAA;IAAA;IAAA,OAEAC,oBAAW;MACT,IAAI,CAACd,EAAE,CAACe,aAAa,CAAC,IAAI,CAAA;MAE1B;IACF;EAAA;IAAA;IAAA,OAEAC,6BAAoB;MAClB,OAAO;QACLC,IAAAA,EAAM,WAAA;QACNC,KAAAA,EAAO,IAAI,CAAClB,EAAE,CAACmB,cAAc,EAAA;QAC7BrB,GAAAA,EAAK,IAAI,CAACG,IAAI;QACdF,GAAAA,EAAK,IAAI,CAACG;MACZ,CAAA;IACF;EAAA;EAAA;AAAA,EA7C8BR,oBAAAA;AAiDhC,eAAeC,iBAAAA","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\n\nclass AnimatedDiffClamp extends AnimatedWithChildren {\n  constructor(a, min, max) {\n    super();\n    this._a = a;\n    this._min = min;\n    this._max = max;\n    this._value = this._lastValue = this._a.__getValue();\n  }\n\n  __makeNative() {\n    this._a.__makeNative();\n\n    super.__makeNative();\n  }\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __getValue() {\n    var value = this._a.__getValue();\n\n    var diff = value - this._lastValue;\n    this._lastValue = value;\n    this._value = Math.min(Math.max(this._value + diff, this._min), this._max);\n    return this._value;\n  }\n\n  __attach() {\n    this._a.__addChild(this);\n  }\n\n  __detach() {\n    this._a.__removeChild(this);\n\n    super.__detach();\n  }\n\n  __getNativeConfig() {\n    return {\n      type: 'diffclamp',\n      input: this._a.__getNativeTag(),\n      min: this._min,\n      max: this._max\n    };\n  }\n\n}\n\nexport default AnimatedDiffClamp;"]},"metadata":{},"sourceType":"module"}