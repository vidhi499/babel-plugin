{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"../../../exports/Platform\";\nimport RCTDeviceEventEmitter from \"./RCTDeviceEventEmitter\";\nimport invariant from 'fbjs/lib/invariant';\nvar NativeEventEmitter = function () {\n  function NativeEventEmitter(nativeModule) {\n    _classCallCheck(this, NativeEventEmitter);\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n  _createClass(NativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this = this;\n      var _this$_nativeModule;\n      (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n      var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n      return {\n        remove: function remove() {\n          if (subscription != null) {\n            var _this$_nativeModule2;\n            (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n            subscription.remove();\n            subscription = null;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      var _this$_nativeModule3;\n      (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n      RCTDeviceEventEmitter.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      var _this$_nativeModule4;\n      invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n      (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n      RCTDeviceEventEmitter.removeAllListeners(eventType);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      return RCTDeviceEventEmitter.listenerCount(eventType);\n    }\n  }]);\n  return NativeEventEmitter;\n}();\nexport { NativeEventEmitter as default };","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/index.js"],"names":["Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","nativeModule","OS","_nativeModule","eventType","listener","context","_this$_nativeModule","addListener","subscription","remove","_this$_nativeModule2","removeListeners","_this$_nativeModule3","removeListener","_len","arguments","length","args","Array","_key","emit","_this$_nativeModule4","listenerCount","removeAllListeners"],"mappings":"AASA,YAAA;;;;AAEA,OAAOA,QAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAYqBC,IAAAA,kB;EACnB,SAAA,kBAAA,CAAYC,YAAZ,EAA0B;IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;IACxB,IAAIJ,QAAQ,CAACK,EAATL,KAAgB,KAApB,EAA2B;MACzBE,SAAS,CAACE,YAAY,IAAI,IAAjB,EAAuB,0DAAvB,CAATF;MACA,IAAA,CAAKI,aAAL,GAAqBF,YAArB;IACD;EACF;;;WAED,SAAA,WAAA,CAAYG,SAAZ,EAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;MAAA,IAAA,KAAA,GAAA,IAAA;MACxC,IAAIC,mBAAJ;MAEA,CAACA,mBAAmB,GAAG,IAAA,CAAKJ,aAA5B,KAA8C,IAA9C,GAAqD,KAAK,CAA1D,GAA8DI,mBAAmB,CAACC,WAApBD,CAAgCH,SAAhCG,CAA9D;MACA,IAAIE,YAAY,GAAGX,qBAAqB,CAACU,WAAtBV,CAAkCM,SAAlCN,EAA6CO,QAA7CP,EAAuDQ,OAAvDR,CAAnB;MACA,OAAO;QACLY,MAAM,EAAE,SAAA,MAAA,GAAM;UACZ,IAAID,YAAY,IAAI,IAApB,EAA0B;YACxB,IAAIE,oBAAJ;YAEA,CAACA,oBAAoB,GAAG,KAAI,CAACR,aAA7B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+DQ,oBAAoB,CAACC,eAArBD,CAAqC,CAArCA,CAA/D;YAEAF,YAAY,CAACC,MAAbD,EAAAA;YACAA,YAAY,GAAG,IAAfA;UACD;QACF;MAVI,CAAP;IAYD;;;WAMD,SAAA,cAAA,CAAeL,SAAf,EAA0BC,QAA1B,EAAoC;MAClC,IAAIQ,oBAAJ;MAEA,CAACA,oBAAoB,GAAG,IAAA,CAAKV,aAA7B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+DU,oBAAoB,CAACD,eAArBC,CAAqC,CAArCA,CAA/D;MAGAf,qBAAqB,CAACgB,cAAtBhB,CAAqCM,SAArCN,EAAgDO,QAAhDP,CAAAA;IACD;;;WAED,SAAA,IAAA,CAAKM,SAAL,EAAgB;MACd,KAAK,IAAIW,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAPA,GAAWA,IAAI,GAAG,CAAlBA,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;QAC1GF,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJF,GAAiBF,SAAS,CAACI,IAAD,CAA1BF;MACD;MAIDpB,qBAAqB,CAACuB,IAAtBvB,CAAAA,KAAAA,CAAAA,qBAAqB,EAAA,CAAMM,SAAN,CAAA,CAAA,MAAA,CAAoBc,IAApB,CAAA,CAArBpB;IACD;;;WAED,SAAA,kBAAA,CAAmBM,SAAnB,EAA8B;MAC5B,IAAIkB,oBAAJ;MAEAvB,SAAS,CAACK,SAAS,IAAI,IAAd,EAAoB,wEAApB,CAATL;MACA,CAACuB,oBAAoB,GAAG,IAAA,CAAKnB,aAA7B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+DmB,oBAAoB,CAACV,eAArBU,CAAqC,IAAA,CAAKC,aAAL,CAAmBnB,SAAnB,CAArCkB,CAA/D;MACAxB,qBAAqB,CAAC0B,kBAAtB1B,CAAyCM,SAAzCN,CAAAA;IACD;;;WAED,SAAA,aAAA,CAAcM,SAAd,EAAyB;MACvB,OAAON,qBAAqB,CAACyB,aAAtBzB,CAAoCM,SAApCN,CAAP;IACD;;;;SA5DkBE,kB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter {\n  constructor(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(eventType, listener, context) {\n    var _this$_nativeModule;\n\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: () => {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n\n          (_this$_nativeModule2 = this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\n\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  }\n\n  emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}