{"ast":null,"code":"import invariant from \"fbjs/lib/invariant\";\nimport requestIdleCallback, { cancelIdleCallback } from \"../../modules/requestIdleCallback\";\nvar InteractionManager = {\n  Events: {\n    interactionStart: \"interactionStart\",\n    interactionComplete: \"interactionComplete\"\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, \"Must provide a handle to clear.\");\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;\n;\n;\n(function () {\n  var _a, _b;\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      import.meta.webpackHot.accept();\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"names":["invariant","requestIdleCallback","cancelIdleCallback","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","then","bind","done","cancel","createInteractionHandle","clearInteractionHandle","addListener"],"mappings":"AASA,OAAOA,SAAAA,MAAe,oBAAA;AACtB,OAAOC,mBAAAA,IAAuBC,kBAAkB;AAChD,IAAIC,kBAAAA,GAAqB;EACvBC,MAAAA,EAAQ;IACNC,gBAAAA,EAAkB,kBAAA;IAClBC,mBAAAA,EAAqB;EACvB,CAAA;EAKAC,oBAAAA,gCAAqBC,IAAI,EAAE;IACzB,IAAIC,MAAAA;IACJ,IAAIC,OAAAA,GAAU,IAAIC,OAAAA,CAAQC,UAAAA,OAAAA,EAAW;MACnCH,MAAAA,GAASR,mBAAAA,CAAoB,YAAM;QACjC,IAAIO,IAAAA,EAAM;UACRI,OAAAA,CAAQJ,IAAAA,EAAAA,CAAAA;QACV,CAAA,MAAO;UACLI,OAAAA,EAAAA;QACF;MACF,CAAA,CAAA;IACF,CAAA,CAAA;IACA,OAAO;MACLC,IAAAA,EAAMH,OAAAA,CAAQG,IAAI,CAACC,IAAI,CAACJ,OAAAA,CAAAA;MACxBK,IAAAA,EAAML,OAAAA,CAAQG,IAAI,CAACC,IAAI,CAACJ,OAAAA,CAAAA;MACxBM,MAAAA,EAAQ,kBAAM;QACZd,kBAAAA,CAAmBO,MAAAA,CAAAA;MACrB;IACF,CAAA;EACF,CAAA;EAKAQ,uBAAAA,qCAA0B;IACxB,OAAO,CAAA;EACT,CAAA;EAKAC,sBAAAA,kCAAuBT,MAAM,EAAE;IAC7BT,SAAAA,CAAU,CAAC,CAACS,MAAAA,EAAQ,iCAAA,CAAA;EACtB,CAAA;EAEAU,WAAAA,EAAa,uBAAM,CAAC;AACtB,CAAA;AACA,eAAehB,kBAAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(resolve => {\n      handle = requestIdleCallback(() => {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n\n  addListener: () => {}\n};\nexport default InteractionManager;"]},"metadata":{},"sourceType":"module"}