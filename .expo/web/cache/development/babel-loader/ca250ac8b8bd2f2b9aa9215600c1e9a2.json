{"ast":null,"code":"\"use strict\";\nvar deepDiffer = function deepDiffer(one, two, maxDepth) {\n  if (maxDepth === void 0) {\n    maxDepth = -1;\n  }\n  if (maxDepth === 0) {\n    return true;\n  }\n  if (one === two) {\n    return false;\n  }\n  if (typeof one === \"function\" && typeof two === \"function\") {\n    return false;\n  }\n  if (typeof one !== \"object\" || one === null) {\n    return one !== two;\n  }\n  if (typeof two !== \"object\" || two === null) {\n    return true;\n  }\n  if (one.constructor !== two.constructor) {\n    return true;\n  }\n  if (Array.isArray(one)) {\n    var len = one.length;\n    if (two.length !== len) {\n      return true;\n    }\n    for (var ii = 0; ii < len; ii++) {\n      if (deepDiffer(one[ii], two[ii], maxDepth - 1)) {\n        return true;\n      }\n    }\n  } else {\n    for (var key in one) {\n      if (deepDiffer(one[key], two[key], maxDepth - 1)) {\n        return true;\n      }\n    }\n    for (var twoKey in two) {\n      if (one[twoKey] === undefined && two[twoKey] !== undefined) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nexport default deepDiffer;","map":{"version":3,"sources":["/Users/VidhiKataria/Documents/Projects/testing123/node_modules/react-native-web/dist/vendor/react-native/deepDiffer/index.js"],"names":["deepDiffer","one","two","maxDepth","constructor","Array","isArray","len","length","ii","key","twoKey","undefined"],"mappings":"AASA,YAAA;AAKA,IAAIA,UAAAA,GAAa,SAASA,UAAAA,CAAWC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EACvD,IAAIA,QAAAA,KAAa,KAAK,CAAA,EAAG;IACvBA,QAAAA,GAAW,CAAC,CAAA;EACd;EAEA,IAAIA,QAAAA,KAAa,CAAA,EAAG;IAClB,OAAO,IAAI;EACb;EAEA,IAAIF,GAAAA,KAAQC,GAAAA,EAAK;IAEf,OAAO,KAAK;EACd;EAEA,IAAI,OAAOD,GAAAA,KAAQ,UAAA,IAAc,OAAOC,GAAAA,KAAQ,UAAA,EAAY;IAE1D,OAAO,KAAK;EACd;EAEA,IAAI,OAAOD,GAAAA,KAAQ,QAAA,IAAYA,GAAAA,KAAQ,IAAI,EAAE;IAE3C,OAAOA,GAAAA,KAAQC,GAAAA;EACjB;EAEA,IAAI,OAAOA,GAAAA,KAAQ,QAAA,IAAYA,GAAAA,KAAQ,IAAI,EAAE;IAG3C,OAAO,IAAI;EACb;EAEA,IAAID,GAAAA,CAAIG,WAAW,KAAKF,GAAAA,CAAIE,WAAW,EAAE;IACvC,OAAO,IAAI;EACb;EAEA,IAAIC,KAAAA,CAAMC,OAAO,CAACL,GAAAA,CAAAA,EAAM;IAEtB,IAAIM,GAAAA,GAAMN,GAAAA,CAAIO,MAAM;IAEpB,IAAIN,GAAAA,CAAIM,MAAM,KAAKD,GAAAA,EAAK;MACtB,OAAO,IAAI;IACb;IAEA,KAAK,IAAIE,EAAAA,GAAK,CAAA,EAAGA,EAAAA,GAAKF,GAAAA,EAAKE,EAAAA,EAAAA,EAAM;MAC/B,IAAIT,UAAAA,CAAWC,GAAG,CAACQ,EAAAA,CAAG,EAAEP,GAAG,CAACO,EAAAA,CAAG,EAAEN,QAAAA,GAAW,CAAA,CAAA,EAAI;QAC9C,OAAO,IAAI;MACb;IACF;EACF,CAAA,MAAO;IACL,KAAK,IAAIO,GAAAA,IAAOT,GAAAA,EAAK;MACnB,IAAID,UAAAA,CAAWC,GAAG,CAACS,GAAAA,CAAI,EAAER,GAAG,CAACQ,GAAAA,CAAI,EAAEP,QAAAA,GAAW,CAAA,CAAA,EAAI;QAChD,OAAO,IAAI;MACb;IACF;IAEA,KAAK,IAAIQ,MAAAA,IAAUT,GAAAA,EAAK;MAGtB,IAAID,GAAG,CAACU,MAAAA,CAAO,KAAKC,SAAAA,IAAaV,GAAG,CAACS,MAAAA,CAAO,KAAKC,SAAAA,EAAW;QAC1D,OAAO,IAAI;MACb;IACF;EACF;EAEA,OAAO,KAAK;AACd,CAAA;AAEA,eAAeZ,UAAAA","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n/*\n * @returns {bool} true if different, false if equal\n */\n\nvar deepDiffer = function deepDiffer(one, two, maxDepth) {\n  if (maxDepth === void 0) {\n    maxDepth = -1;\n  }\n\n  if (maxDepth === 0) {\n    return true;\n  }\n\n  if (one === two) {\n    // Short circuit on identical object references instead of traversing them.\n    return false;\n  }\n\n  if (typeof one === 'function' && typeof two === 'function') {\n    // We consider all functions equal\n    return false;\n  }\n\n  if (typeof one !== 'object' || one === null) {\n    // Primitives can be directly compared\n    return one !== two;\n  }\n\n  if (typeof two !== 'object' || two === null) {\n    // We know they are different because the previous case would have triggered\n    // otherwise.\n    return true;\n  }\n\n  if (one.constructor !== two.constructor) {\n    return true;\n  }\n\n  if (Array.isArray(one)) {\n    // We know two is also an array because the constructors are equal\n    var len = one.length;\n\n    if (two.length !== len) {\n      return true;\n    }\n\n    for (var ii = 0; ii < len; ii++) {\n      if (deepDiffer(one[ii], two[ii], maxDepth - 1)) {\n        return true;\n      }\n    }\n  } else {\n    for (var key in one) {\n      if (deepDiffer(one[key], two[key], maxDepth - 1)) {\n        return true;\n      }\n    }\n\n    for (var twoKey in two) {\n      // The only case we haven't checked yet is keys that are in two but aren't\n      // in one, which means they are different.\n      if (one[twoKey] === undefined && two[twoKey] !== undefined) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport default deepDiffer;"]},"metadata":{},"sourceType":"module"}